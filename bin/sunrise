#!/bin/bash

syntaxError() {
	echo "usage: $0 [{--help|-?}|{--set|-s} n|{--verbose|-v}]+"
	echo "set: day | month | year | from | to | lAtitude | lOngtitude | zone | city | [s|daylight]"
	exit 1
}

bomb() {
	echo "$1 requires an argument" 1>&2	
	exit 1
}

##
# set up the defaults (San Jose, CA)
a=37.33
o=-121.88
z=-8
d=0
v=0
m=0
f=0
t=0
y=0
s=-1
c=''
# http://mywiki.wooledge.org/BashFAQ/035
while true; do
    case "$1" in
      -h|--help|-\?) syntaxError; exit 0 ;;
      -v|--verbose)  v=1; shift ;;
      -a|--lat)      if [ $# -gt 1 ]; then a=$2; shift 2 ; else bomb $1 ; fi ;;
      -o|--long)     if [ $# -gt 1 ]; then o=$2; shift 2 ; else bomb $1 ; fi ;;
      -m|--month)    if [ $# -gt 1 ]; then m=$2; shift 2 ; else bomb $1 ; fi ;;
      -f|--from)     if [ $# -gt 1 ]; then f=$2; shift 2 ; else bomb $1 ; fi ;;
      -t|--to)       if [ $# -gt 1 ]; then t=$2; shift 2 ; else bomb $1 ; fi ;;
      -z|--zone)     if [ $# -gt 1 ]; then z=$2; shift 2 ; else bomb $1 ; fi ;;
      -y|--year)     if [ $# -gt 1 ]; then y=$2; shift 2 ; else bomb $1 ; fi ;;
      -d|--day)      if [ $# -gt 1 ]; then d=$2; shift 2 ; else bomb $1 ; fi ;;
      -s|--daylight) if [ $# -gt 1 ]; then s=$2; shift 2 ; else bomb $1 ; fi ;;
      -c|--city)     if [ $# -gt 1 ]; then c=$2; shift 2 ; else bomb $1 ; fi ;;
      --)            shift; break;;
      -*)            echo "invalid option: $1" 1>&2; syntaxError; exit 1;;
      *)             break;;
    esac
done

##
# look up the city
cities="/Users/rmills/bin/cities.txt"
if [ "$c" != "" ]; then
	if [ ! -e "$cities" ]; then
		echo file "$cities" not found
		exit 1
	fi
	count=$(grep "$c" "$cities" |wc -l)
	if [ "$count" -eq "0" ]; then
		echo "*** city $c not found"
		exit 1
	elif [ "$count" -eq "1" ]; then
		echo "found unique city"
		       grep "$c" "$cities"
		x+=( $(grep "$c" "$cities") )
		a=${x[1]}
		l=${x[2]}
		echo "lat = " $a " long = " $l
	else 
		echo "too many cities"
		grep "$c" "$cities"
		exit 1
	fi
fi

##
# modify defaults
if [ "$f" == "0" ]; then f=$(date "+DATE: %d" | cut -d' ' -f2) ; fi
if [ "$t" == "0" ]; then t=$(date "+DATE: %d" | cut -d' ' -f2) ; fi
if [ "$m" == "0" ]; then m=$(date "+DATE: %m" | cut -d' ' -f2) ; fi
if [ "$y" == "0" ]; then y=$(date "+DATE: %y" | cut -d' ' -f2) ; fi
if [ "$d" != "0" ]; then f=$d                 ; t=$d           ; fi
if [ "$d" == "*" ]; then f=1                  ; t=31           ; fi
if [ "$m" == "*" ]; then m1=1 ; m2=12 ; else m1="$m"; m2=$m    ; fi

##
# adjust for days, months, leap years and day-light saving
if [  $y -lt 100 ]; then let y=$((y+2000)) ; fi
if [ "$(( y==((y/4)*4) ))" -ne 0 ]; then T=29; else T=28; fi
if [ "$f"                  -lt 1 ]; then f=1            ; fi

case "$m" in
	# 1|3|5|7|8|10|12) ;;
	4|6|9|11) if [ "$t" -gt 30   ]; then t=30; fi ;;
	2)        if [ "$t" -gt "$T" ]; then t=$T; fi ;;
esac

##
# report to user
if [ "$v" -eq 1 ]; then
	echo "--month" "$m"
	echo "--lat  " "$a"
	echo "--long " "$o"
	echo "--zone"  "$z"
	echo "--from"  "$f"
	echo "--to"    "$t"
	echo "--year"  "$y"
fi

##
# determine the result
let c=0
if [[ "$t" == "$f" && "$m" != "*"  ]]; then let c=99 ; fi
for m in $(seq $m1 $m2); do
	x=$s
	if [ "$s" -eq -1 ]; then
		case "$m" in # adjust daylight saving (would be better to use a web-service to determine this)
			3|4|5|6|7|8|9|10) x=1;;
			*)                x=0;;
		esac
	fi
	for d in $(seq $f $t) ; do
		if [ $(( c+=1 )) == 1 ]; then echo 'Date      -sunrise- -sunset-' ;fi
		tmp=/tmp/sunrise.xml
		curl --silent http://www.earthtools.org/sun/$a/$o/$d/$m/$z/$x > $tmp
		sunrise=$(grep sunrise $tmp | cut -d">" -f2 | cut -d"<" -f 1)
		sunset=$(grep  sunset  $tmp | cut -d">" -f2 | cut -d"<" -f 1)
		printf "%04d-%02d-%02d %s %s\n" $y $m $d $sunrise $sunset
	done
done

# That's all Folks!!
##
