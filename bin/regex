#!/usr/bin/perl --
# use strict;

if ($#ARGV < 0) {
    &display_usage;
    exit(0);
}

my $datafile = $ARGV[0] || $0 . '.txt';
my ($height, $width, $bcharlist, @board) = &read_data($datafile);
my @borderchars = split('', $bcharlist);

&display_board($width, $height, 0, @board);

my $changes = $height * $width;
my $passes = 0;
while ($changes > 0) {
    $changes = 0;
    $passes++;
    for (my $y = 0; $y < $height; $y++) {
        for (my $x = 0; $x <= $#{$board[$y]}; $x++) {
            next    if (&is_border($board[$y][$x]));
            my $sum = &count_neighbors($x, $y, 
                        $width, $height, \@board);
            if ($sum >= 3) {
                $changes++;
                $board[$y][$x] = $borderchars[0];
            }
        }
    }
}

&display_board($width, $height, $passes, @board);

sub read_data {
    my ($filename) = @_;
    my $h = 0, $w = 0, $charlist = '#';
    my (@board);
    open(DATAFILE, $filename) or die("Can't open $filename : $!\n");
        while (my $line = <DATAFILE>) {
            chomp($line);
            next        unless (length($line));
            next        if ($line =~ m/^#/); 

            my @parts = split(/\s*[:=]\s*/, $line, 2);
            $w = $parts[1]    if ($parts[0] =~ m/width|x/i);
            $h = $parts[1]    if ($parts[0] =~ m/height|y/i);
            $charlist = $parts[1]
                if ($parts[0] =~ m/border|wall|char/i);
            if ($parts[0] =~ m/board|screen/i) {
                for (my $i = 0; $i < $w; $i++) {
                    $line = <DATAFILE>;
                    chomp($line);
                    @{$board[$i]} = split('', $line);
                }
            }
        }
    close(DATAFILE);
    return($h, $w, $charlist, @board);
}
sub display_board {
    my ($i, $j, $pass, @screen) = @_;
    printf("Pass : %d\nHeight : %d, Width : %d\nBoard : \n",
        $pass, $j, $i);
    for (my $y = 0; $y < $j; $y++) 
        { print(join('', @{$screen[$y]}, "\n")); }
    print("\n");
}
sub is_border {
    my ($character) = @_;
    return(scalar(grep(/$character/, @borderchars)));
}
sub count_neighbors {
    local ($i, $j, $w, $h, *screen) = @_;
    my $ncount = 0;
    if ($j > 0)
        { $ncount++    if (&is_border($screen[$j - 1][$i])); }
    if ($j < ($h - 1))
        { $ncount++    if (&is_border($screen[$j + 1][$i])); }
    if ($i > 0)
        { $ncount++    if (&is_border($screen[$j][$i - 1])); }
    if ($i < $w)
        { $ncount++    if (&is_border($screen[$j][$i + 1])); }
    return($ncount);
}
sub display_usage {
    while (<DATA>) {
        s/\$0/$0/;
        print $_    unless (m/^__DATA__$/);
    }
}
__END__
__DATA__
Program execution:
    $0 filename

where filename is the name of the data file to use.

Datafile format:
<line> : <parameter1><seperator><parameter1_value>
<line> : <parameter2<seperator>parameter2_value>
<line> : <parameter2><seperator>
<line> : <dataline>

<seperator> : <space>*['='|':']<space>*
<parameter1> : ['height'|'width'|'x'|'y']
<parameter1_value> : <number>
<parameter2> : ['border'|'wall'|'char']
<parameter2_value> : <string1>
<dataline> : <string2>

<number> : <digit>+
<string1> : <non_whitespace>+
<string2> : <character>

<digit> : (equivalent to perl regex /\d/)
<space> : (equivalent to perl regex /\s/)
<non_whitespace> : (equivalent to perl regex /\S/)
<character> : (matched by perl regex /./)

Sample file:
x:4
y= 3
wall=#
screen=
## #
#  #
# ##
