#!/usr/bin/perl

# use strict;
# use warnings;

##
# public modules
use XML::Parser::Expat;
use File::Basename;
use Math::Trig;
use Cwd;

##
# our module
use lib "$ENV{PWD}/";
use lib "$ENV{HOME}/bin";
use Collage;

##
# globals
my $name ;
my $w    ;
my $W    ;
my $H    ;

#############################################
##
# functions and forward declarations
sub syntax
{
	Collage::error("usage: mkcollage name [w]") ;
}

##
# fixup: template -> instance conversion
sub fixup
{
	my $s=shift;
	
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime time ;
    
    @WDays  = ( "Sunday" , "Monday"  , "Tuesday"  , "Wednesday", "Thursday", "Friday" , "Saturday") ;
    @Months = ( "January", "February", "March"    , "April"    , "May"     , "June"
              , "July"   , "August"  , "September", "October"  , "November", "December"
              ) ;
    
    $smon  = $Months[$mon] ;
    $wday  = $WDays[$wday] ;
    $year += 1900 if $year < 1900 ;
    $mon++ ;
    
    my $date = "$smon $mday, $year";
    
    my $width = 150;
    my $WIDth = $W - $width;
    
	# http://sunsite.ualberta.ca/Documentation/Misc/perl-5.6.1/pod/perllol.html
	my @P  = ( ['__YEAR__' 				,"$year" ]
	         , ['__DATE__' 				,"$date" ]
	         , ['__DAY__'  				,"$wday" ]
	         , ['__WIDTH__'				,"$W"    ]
	         , ['__WIDth__'				,"$WIDth"]
	         , ['__width__'				,"$width"]
	         , ['__NAME__'              ,"$name" ]
	         , ['/2012/NewYearsDay'    	, '/2011/Christmas/NewYearsDay'] # New Year 2011 correction
	         , ['AppleOffice/IMG_3502' 	, 'Apple']                       # New Year 2011 correction
	         , ["$ENV{PHOTOS}/"        	, '/'    ]
	         );
	for my $i (0 .. $#P) {
		my $p=$P[$i][0];
		my $q=$P[$i][1];
		# http://www.perlmonks.org/?node_id=98357
		my $S = $s;
		$s   =~ s#\Q$p\E#$q#g;
		
		# 	print "sub '$p' -> '$q'\n";
		# 	print "$S\n";
		# 	print "$s\n";
		# 	print "--------------------\n";
	}

	return $s;
}
#
#############################################

#############################################
# main program

##
# Get the command line arguments
$name = shift or syntax() ;
$w = shift or 0 ;
$w = 550 if !$w ;

##
# Find the photo and collage data
my $home    = $ENV{"HOME"} ;
my $path    = "${home}/Pictures/Picasa/Collages/${name}" ;
my $photo   = $path . ".jpg" ;
my $collage = $path . ".cxf" ;

Collage::error("picture does not exist $photo"  ) if ( ! -e $photo     ) ;
Collage::error("collage does not exist $collage") if ( ! -e $collage   ) ;

##
# copy and resample the image
system('cp "' . $photo . '" .') ;
$photo = $name  . ".jpg"        ;
system("sips --resampleWidth $w " . '"' . $photo . '"') ;

##
# get the image properties
# my $image = Image::Magick->new;
#    $image->Read($photo);
   
#$W  = $image->Get( 'columns' ); 
#$H  = $image->Get( 'rows' );
$H = "sips -g pixelHeight $photo | cut -d\':\' -f2";
$W = "sips -g pixelWidth  $photo | cut -d\':\' -f2";
   
Collage::println("W = " . $W) ;
Collage::println("H = " . $H) ;

my @lines = qx($W 2>&1); $W = int($lines[1]);
my @lines = qx($H 2>&1); $H = int($lines[1]);

Collage::println("W = " . $W) ;
Collage::println("H = " . $H) ;

# exit(1);

##
# write the result to file
open (FILE,"> ${name}.shtml")         ;
print FILE fixup(Collage::getShtml()) ;
close(FILE)                           ;

Collage::println("readcollage $collage $W $H > \"${name}.inc\"") ;
my @lines = Collage::read($collage,$W,$H);
open (FILE,"> ${name}.inc")           ;
print FILE fixup(Collage::getHead())  ;
foreach (@lines) {
	print FILE fixup($_)."\n"         ; 
}
print FILE fixup(Collage::getTail())  ;
close(FILE)                           ;

##
# and show it
my      $url = fixup("http://localhost/Homepages/__YEAR__/${name}.shtml");
Collage::println("url = $url"  ) ;
system("open \"$url\"") ;
#
#############################################

# That's all Folks!
##
