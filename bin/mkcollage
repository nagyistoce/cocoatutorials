#!/usr/bin/perl

# use strict;
# use warnings;

##
# public modules
use XML::Parser::Expat;
use File::Basename;
use Math::Trig;
use Imager;
use Cwd;

##
# our module (load from same directory as script)
use lib "$ENV{HOME}/bin";
use Collage;

##
# globals
my $name ; # name of collage
my $title; # title of collage (initially the name)
my $w    ; # width of collage (on the web page)
my $h    ; # height of collage (on the web page)

#############################################
##
# functions and forward declarations
sub syntax
{
	Collage::error("usage: $0 name [Collage|--title str|--width int|--help ]+") ;
	exit(1);
}

##
# fixup: template -> instance conversion
sub fixup
{
	my $s=shift;
	
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime time ;
    
    @WDays  = ( "Sunday" , "Monday"  , "Tuesday"  , "Wednesday", "Thursday", "Friday" , "Saturday") ;
    @Months = ( "January", "February", "March"    , "April"    , "May"     , "June"
              , "July"   , "August"  , "September", "October"  , "November", "December"
              ) ;
    
    $smon  = $Months[$mon] ;
    $wday  = $WDays[$wday] ;
    $year += 1900 if $year < 1900 ;
    $mon++ ;
    
    my $date = "$smon $mday, $year";
    
    my $width = 150;
    my $WIDth = $w - $width;
    
	# http://sunsite.ualberta.ca/Documentation/Misc/perl-5.6.1/pod/perllol.html
	my @P  = ( ['__YEAR__' 				,"$year" ]
	         , ['__DATE__' 				,"$date" ]
	         , ['__DAY__'  				,"$wday" ]
	         , ['__WIDTH__'				,"$w"    ]
	         , ['__WIDth__'				,"$WIDth"]
	         , ['__width__'				,"$width"]
	         , ['__NAME__'              ,"$name" ]
	         , ['__TITLE__'             ,"$title"]
	         , ['/2012/NewYearsDay'    	, '/2011/Christmas/NewYearsDay'] # New Year 2011 correction
	         , ['AppleOffice/IMG_3502' 	, 'Apple']                       # New Year 2011 correction
	         , ["$ENV{PHOTOS}/"        	, '/'    ]
	         );
	for my $i (0 .. $#P) {
		my $p=$P[$i][0];
		my $q=$P[$i][1];
		# http://www.perlmonks.org/?node_id=98357
		my $S = $s;
		$s   =~ s#\Q$p\E#$q#g;
	}

	return $s;
}

sub am # arg,long,short
{
	my $arg    = shift ;
	my $long   = shift ;
	my $short  = shift ;
	my $result = (($arg eq $long) || ($arg eq $short))?1:0;
#	Collage::println("compare $arg $short $long --> result = $result");
	return $result ;
}

#
#############################################

#############################################
# main program

##
# Get the command line arguments
for (my $arg = 0 ; $arg < scalar(@ARGV) ; $arg++ ) {
	my $a = $ARGV[$arg];
	if ( am($a,'--title','-t') ) {
		Collage::println('in --title');
		syntax() if ++$arg >= scalar(@ARGV);
		$title = $ARGV[$arg] ;
	} elsif ( am($a,'--width','-w') ) {
		syntax() if ++$arg >= scalar(@ARGV);
		$w     = Collage::atoi($ARGV[$arg]) ;
	} elsif ( am($ARGV[$arg],'--help' ,'-h') ) {
		syntax() ;
	} else {
		$name = $ARGV[$arg];
		$title= $name;
		$title=~ s/([A-Z])/ $1/g;  # convert Route66Sign to Route66 Sign
		$title=~ s/([0-9]+)/ $1/g; # convert Route66 Sign to Route 66 Sign
		$title=~ s/^ *//g;         # remove leading blanks
	}
}

syntax() if ! $name;
$w    = 550 if !$w ;

##
# Find the photo and collage data
my $home    = $ENV{"HOME"} ;
my $path    = "${home}/Pictures/Picasa/Collages/${name}" ;
my $photo   = $path . ".jpg" ;
my $collage = $path . ".cxf" ;

##
# ask the collage module to say "OK"
Collage::OK($collage);

##
# open and resample the image
my $image = Imager->new(file=>$photo) or die "Cannot load $photo: ", $image->errstr;
my $W =   $image->getwidth;
my $H =   $image->getheight;
   
my $s = $w / $W ;
Collage::println("W = " . $W) ;
Collage::println("H = " . $H) ;
Collage::println("s = " . $s) ;

# Create smaller version
# documented in Imager::Transformations
# Autostretch individual channels
my $thumb = $image->scale(scalefactor=>$s);
   $thumb->filter(type=>'autolevels');
   
$w = $thumb->getwidth;
$h = $thumb->getheight;
Collage::println("w = " . $w) ;
Collage::println("h = " . $h) ;

##
# save thumnail
my $thumbname = $name . '.jpg';
$thumb->write(file=>$thumbname) or die $thumb->errstr;

##
# get the imagemap
Collage::println("readcollage $collage $w $h \"" . $file . '"') ;
my  @lines = Collage::read($collage,$w,$h);

##
# write the files
my   $html = $name . ".shtml";
open (HTML,"> $html") ;
print HTML fixup(Collage::getShtml()) ;
close(HTML) ;


my   $file  = $name . ".inc"  ;
open (FILE,"> $file") ;
print FILE fixup(Collage::getHead())  ;
foreach my $line (@lines) {
	print FILE fixup($line) . "\n";
}
print FILE fixup(Collage::getTail())  ;
close(FILE) ;

##
# and show it
my $url = fixup("http://localhost/Homepages/__YEAR__/$html");
Collage::println("run \"$url\"") ;
system          ("run \"$url\"") ;

#
#############################################

1;
# That's all Folks!
##
