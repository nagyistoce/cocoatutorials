#!/bin/bash

syntaxError()
{
	echo "usage: pings [--opt | server]+ (or set PINGS)"
	echo "opt  : forever | whiledead | untilalive | help | verbose"
	exit 1
}

parseservers()
{
	for ping in $@ ; do
		arg=$ping
		# to lower case if more than 2 characters
		if [ "${#arg}" -gt 2 ]; then
			arg="$(echo $arg|perl -e 'print lc <>;')"
		fi
		# echo arg = "$arg"
		case "$arg" in
		  -f|--forever)       forever=1     ;;
		  -v|--verbose)       verbose=1     ;;
		  -w|--whiledead)     whiledead=1   ;;
		  -u|--untilalive)    whiledead=1   ;;
		  -h|-\?|--help)      syntaxError   ;;
		  --*)                syntaxError   ;;
		  *) 			      servers+=($ping) ;;
		esac
	done
}

##
# defaults
forever=0
verbose=1
whiledead=0
servers=()

##
# parse command line (and PINGS if no servers)
parseservers "$@"
if [[ ${#servers} -eq 0  && ! -z $PINGS ]]; then
	echo using environment string "PINGS=$PINGS"
	parseservers $PINGS
fi

if [ ${#servers} -eq 0 ]; then
	syntaxError
fi

if [ $whiledead == 1 ]; then
	forever=1
fi

if [ $verbose == 1 ]; then
	echo servers= ${servers[@]} forever= $forever whiledead= $whiledead
fi

let count=0
while [[ $((++count)) == 1 || $forever == 1 ]]; do
	for server in ${servers[@]} ; do
		result=DEAD
		ping -c 2 $server 2>/dev/null >/dev/null
		st=$?
		if [ $st -eq 0 ]; then
			result=alive	
		fi
		echo $server is $result
		if [[ $whiledead == 1 && "$result" == "alive" ]]; then
			forever=0
		fi
		sleep 1
	done
done

# That's all Folks!
##
