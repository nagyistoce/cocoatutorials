<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>actions.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>actions_8hpp</filename>
    <includes id="exiv2app_8hpp" name="exiv2app.hpp" local="yes" imported="no">exiv2app.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <class kind="class">Action::Task</class>
    <class kind="class">Action::TaskFactory</class>
    <class kind="class">Action::Print</class>
    <class kind="class">Action::Rename</class>
    <class kind="class">Action::Adjust</class>
    <class kind="class">Action::Erase</class>
    <class kind="class">Action::Extract</class>
    <class kind="class">Action::Insert</class>
    <class kind="class">Action::Modify</class>
    <class kind="class">Action::FixIso</class>
    <class kind="class">Action::FixCom</class>
    <namespace>Exiv2</namespace>
    <namespace>Action</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Action</namespace>
    <member kind="enumeration">
      <type></type>
      <name>TaskType</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a00e371804805d9146fbeabb9dc0ce5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>adjust</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a550cc83ceca7a758bad573c59da8fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>print</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2ada3cf2de066191d6eb61789496ec9290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rename</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a99fae985b4db97fe6e7063d401b02606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>erase</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a3f1769fa50b615eb5ce7be1ec1f3c5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>extract</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2ad5a27eebad5d285072f977fbf6c3d41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>insert</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a851cdc303b25649e04c7e341448e62a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>modify</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a6f9ae0390192b1ee0be518804a836926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fixiso</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2aa4971402cad661c807a4a2d551670230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fixcom</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a0248270c478063da1d7df206bb89e7be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>asfvideo.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>asfvideo_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <class kind="class">Exiv2::AsfVideo</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newAsfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a11290f0338e59bd5b96da1870e493c5c</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAsfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6344a9183a9acb24b8c2bcf44fad8228</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>asf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ad904fece31ef97d4eb4e1ad0a9d78f16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basicio.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>basicio_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::BasicIo</class>
    <class kind="class">Exiv2::IoCloser</class>
    <class kind="class">Exiv2::FileIo</class>
    <class kind="class">Exiv2::MemIo</class>
    <class kind="class">Exiv2::StdinIo</class>
    <class kind="class">Exiv2::BlockMap</class>
    <class kind="class">Exiv2::RemoteIo</class>
    <class kind="class">Exiv2::HttpIo</class>
    <class kind="class">Exiv2::CurlIo</class>
    <class kind="class">Exiv2::SshIo</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>DataBuf</type>
      <name>readFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5c87ddedd63e9ab9aa6f295cda32aebd</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>writeFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a65c0189894e7563da9a932e9c826e761</anchor>
      <arglist>(const DataBuf &amp;buf, const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ReplaceStringInPlace</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a548778abb2cec5c7cfc18d38355c0a0f</anchor>
      <arglist>(std::string subject, const std::string &amp;search, const std::string &amp;replace)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API size_t</type>
      <name>curlWriter</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2dc468104de8f48f9324a9c592eb3bdb</anchor>
      <arglist>(char *data, size_t size, size_t nmemb, std::string *writerData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bmpimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>bmpimage_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::BmpImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newBmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6cb5f6b3d4cf6c6353bf756993dad5b</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a82b3160e1cdce93c1f30c7717d04a4da</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae4d3fc0e08be16ccd0ddfb3c674b5481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>canonmn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>canonmn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::CanonMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="function">
      <type>float</type>
      <name>canonEv</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a98d2248e3f1df52f23cbbdd18b380a88</anchor>
      <arglist>(long val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>convert_8hpp</filename>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>void</type>
      <name>copyExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4194fe13abc45d8b938e0c53eae1ae0e</anchor>
      <arglist>(const ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af299945c10261453f13fc9978dc65f9f</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3aa3a7c410d59611dd8aa929aae0c71b</anchor>
      <arglist>(const XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2821575e2fa7ec58e22af507ea64ce58</anchor>
      <arglist>(XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af6e13fe5c81e44fddbffb3d47baeb23a</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1037a2e2a1e4d75ba7456945d7fa417d</anchor>
      <arglist>(const IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab37063afa8fa710d4c2ad6d266f5230d</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aec16e78c8f6184811c8b031abd0b8e74</anchor>
      <arglist>(const XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>add907b8334920b392291afc75f921546</anchor>
      <arglist>(XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertStringCharset</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aaa666fe01fbcfa969b3e2c648bcf9ae8</anchor>
      <arglist>(std::string &amp;str, const char *from, const char *to)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cr2image.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>cr2image_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Cr2Image</class>
    <class kind="class">Exiv2::Cr2Parser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newCr2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afd05a6d1d7b2db79c38d159b4d6c67a6</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCr2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9762d2176964085e569e969c282cdda9</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>cr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a7956fc605d09bc10e126691f859f1a9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cr2image_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>cr2image__int_8hpp</filename>
    <includes id="tiffimage__int_8hpp" name="tiffimage_int.hpp" local="yes" imported="no">tiffimage_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::Cr2Header</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>crwimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>crwimage_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <class kind="class">Exiv2::CrwImage</class>
    <class kind="class">Exiv2::CrwParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newCrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abee37e251aa0717d1cb8671ff446c705</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a72ae59b54c2052cc1bc6e08880fec280</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>crw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a308214d9c007e1c0f7a5900f4a8ce12d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>crwimage_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>crwimage__int_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <class kind="class">Exiv2::Internal::CiffComponent</class>
    <class kind="class">Exiv2::Internal::CiffEntry</class>
    <class kind="class">Exiv2::Internal::CiffDirectory</class>
    <class kind="class">Exiv2::Internal::CiffHeader</class>
    <class kind="struct">Exiv2::Internal::CrwSubDir</class>
    <class kind="struct">Exiv2::Internal::CrwMapping</class>
    <class kind="class">Exiv2::Internal::CrwMap</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>CrwDecodeFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac4a86faf418d2b629ed97de305b629e2</anchor>
      <arglist>)(const CiffComponent &amp;, const CrwMapping *, Image &amp;, ByteOrder)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>CrwEncodeFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4556cb25102656648c8c4d6a06990b0d</anchor>
      <arglist>)(const Image &amp;, const CrwMapping *, CiffHeader *)</arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; CrwSubDir &gt;</type>
      <name>CrwDirs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa296ba0574089411f0b5f2ab9c8fab27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidDataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9a738b8ff6dde69aab2f8a938f0bd27e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>valueData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9ac2f5ba074114014d76a12f05086d5bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directoryData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9ad6247a83e06b65ccd57d6a6816ed71e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastDataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9a7429d99a774cec584b634c76b0d31bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>packIfdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a410460f90daa87c9a9a16639b2a2b21f</anchor>
      <arglist>(const ExifData &amp;exifData, IfdId ifdId, ByteOrder byteOrder)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>datasets.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>datasets_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <class kind="struct">Exiv2::RecordInfo</class>
    <class kind="struct">Exiv2::DataSet</class>
    <class kind="class">Exiv2::IptcDataSets</class>
    <class kind="class">Exiv2::IptcKey</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8603ccd9a3e9a0ccac6662d363b9ed1f</anchor>
      <arglist>(std::ostream &amp;os, const DataSet &amp;dataSet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doxygen.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/src/</path>
    <filename>doxygen_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>easyaccess.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>easyaccess_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>orientation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ade21436d5ab749937db1de309a880cf3</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>isoSpeed</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8d233d6897570fcd74607c1b545f0039</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>flashBias</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab39a59a35dd77f48149f56c8cb4385ba</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>exposureMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa9c527d75a6c5d9c2efa9a20e6f60ef4</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>sceneMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afa75576b2200b04d726018200257e835</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>macroMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af91ad8038bef1a6d94413c6820396a56</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>imageQuality</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a14e478a9d6f92c9fc33c8e1fdc050230</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>whiteBalance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a13e73621e478d4520fdcf601a1e10593</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>lensName</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a00abed868b1cd46fdeb8ab331af246cd</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>saturation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a63a3451abf49f4f893ed25a70d958117</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>sharpness</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac05ea2a3dea415b5cc2cd64133890947</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>contrast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9e5b5cc3546863a59f0bc5ec2ad6890d</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>sceneCaptureType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a155a970a54be9984c7c081fb3b4cb169</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>meteringMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2c515ec0b9856491c76690282a3b9153</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>make</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3729578ba37d5e96f1aca75e9b9c0570</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>model</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f59ed4d80ac644965de6e550c2fe52d</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac7e474d2eeb791247de17719fc34554c</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>fNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a56e9152260bbca556dc85306eb2edffe</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>subjectDistance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1983a22f694ee672968665fa7e4a24ce</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>serialNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a73382f42b15c8b22c34284a517a8f3b5</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>focalLength</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af7758be6d5c4a9a3d8d1cd784d3d0660</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>afPoint</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0617f292cafcfb4c9c2d1d63b7fd7b85</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>epsimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>epsimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::EpsImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newEpsInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a062c888a872783b52be5d48a32e9cffb</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEpsType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a97ee22daaeaeae27429093f977fe8258</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>eps</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aeb97f777e3c8bf8cfdb89e24ad6adb25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>error.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>error_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::LogMsg</class>
    <class kind="class">Exiv2::AnyError</class>
    <class kind="class">Exiv2::BasicError</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXV_DEBUG</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a824e555382302a4e54e1a0d0ad97279d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_INFO</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a877bab177c7381b262585d6cf5f58224</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_WARNING</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a06ee301360765662f07d822ea005647e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_ERROR</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a3b67d3a20351fe4c1da14ca3f2c6f704</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasicError&lt; char &gt;</type>
      <name>Error</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>accd3e49cafe9db52c1e0e6f648753cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; charT &gt;</type>
      <name>toBasicString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5b5e630a62be27d591d7d6a11464983b</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a984441dbc42706388541913499c48384</anchor>
      <arglist>(std::ostream &amp;os, const AnyError &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errMsg</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a91ac628011b2304dd3c6fa65e7b52051</anchor>
      <arglist>(int code)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exif.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>exif_8hpp</filename>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Exifdatum</class>
    <class kind="class">Exiv2::ExifThumbC</class>
    <class kind="class">Exiv2::ExifThumb</class>
    <class kind="class">Exiv2::ExifData</class>
    <class kind="class">Exiv2::ExifParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::list&lt; Exifdatum &gt;</type>
      <name>ExifMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a93a10b1ca722d594efdf5472464c8ba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exiv2.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>exiv2_8hpp</filename>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="bmpimage_8hpp" name="bmpimage.hpp" local="yes" imported="no">bmpimage.hpp</includes>
    <includes id="convert_8hpp" name="convert.hpp" local="yes" imported="no">convert.hpp</includes>
    <includes id="cr2image_8hpp" name="cr2image.hpp" local="yes" imported="no">cr2image.hpp</includes>
    <includes id="crwimage_8hpp" name="crwimage.hpp" local="yes" imported="no">crwimage.hpp</includes>
    <includes id="datasets_8hpp" name="datasets.hpp" local="yes" imported="no">datasets.hpp</includes>
    <includes id="easyaccess_8hpp" name="easyaccess.hpp" local="yes" imported="no">easyaccess.hpp</includes>
    <includes id="epsimage_8hpp" name="epsimage.hpp" local="yes" imported="no">epsimage.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="futils_8hpp" name="futils.hpp" local="yes" imported="no">futils.hpp</includes>
    <includes id="gifimage_8hpp" name="gifimage.hpp" local="yes" imported="no">gifimage.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="jp2image_8hpp" name="jp2image.hpp" local="yes" imported="no">jp2image.hpp</includes>
    <includes id="jpgimage_8hpp" name="jpgimage.hpp" local="yes" imported="no">jpgimage.hpp</includes>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <includes id="mrwimage_8hpp" name="mrwimage.hpp" local="yes" imported="no">mrwimage.hpp</includes>
    <includes id="orfimage_8hpp" name="orfimage.hpp" local="yes" imported="no">orfimage.hpp</includes>
    <includes id="pgfimage_8hpp" name="pgfimage.hpp" local="yes" imported="no">pgfimage.hpp</includes>
    <includes id="pngimage_8hpp" name="pngimage.hpp" local="yes" imported="no">pngimage.hpp</includes>
    <includes id="preview_8hpp" name="preview.hpp" local="yes" imported="no">preview.hpp</includes>
    <includes id="properties_8hpp" name="properties.hpp" local="yes" imported="no">properties.hpp</includes>
    <includes id="psdimage_8hpp" name="psdimage.hpp" local="yes" imported="no">psdimage.hpp</includes>
    <includes id="rafimage_8hpp" name="rafimage.hpp" local="yes" imported="no">rafimage.hpp</includes>
    <includes id="rw2image_8hpp" name="rw2image.hpp" local="yes" imported="no">rw2image.hpp</includes>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="tgaimage_8hpp" name="tgaimage.hpp" local="yes" imported="no">tgaimage.hpp</includes>
    <includes id="tiffimage_8hpp" name="tiffimage.hpp" local="yes" imported="no">tiffimage.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <includes id="version_8hpp" name="version.hpp" local="yes" imported="no">version.hpp</includes>
    <includes id="xmp_8hpp" name="xmp.hpp" local="yes" imported="no">xmp.hpp</includes>
    <includes id="xmpsidecar_8hpp" name="xmpsidecar.hpp" local="yes" imported="no">xmpsidecar.hpp</includes>
  </compound>
  <compound kind="file">
    <name>exiv2app.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>exiv2app_8hpp</filename>
    <includes id="utils_8hpp" name="utils.hpp" local="yes" imported="no">utils.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="struct">ModifyCmd</class>
    <class kind="struct">CmdIdAndString</class>
    <class kind="class">Params</class>
    <class kind="struct">Params::YodAdjust</class>
    <member kind="typedef">
      <type>std::vector&lt; ModifyCmd &gt;</type>
      <name>ModifyCmds</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a7b6398c7c2e60a17c6aff1ff4b5de4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CmdId</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidCmdId</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567adacabc49d8df3fdd1a46f00455a400fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567a31a1b6ef20ecf273d47c0791816af46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>set</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567a197d54b51efb9c5c39137595485211b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>del</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567a6c72d326f1e8c8f83ce91ccf13f107c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reg</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567ac164a249ef3f65e141db2c0a0c9996d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MetadataId</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a4d2c7e9b6e47d52f540831c5b5c9b2bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidMetadataId</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a4d2c7e9b6e47d52f540831c5b5c9b2bfa4b2f7a586d73e6eb0a614e98a56353fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iptc</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a4d2c7e9b6e47d52f540831c5b5c9b2bfadc2ebf666850e062464a2dfda77f2fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exif</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a4d2c7e9b6e47d52f540831c5b5c9b2bfad5b6663b2b0b3ef3e5981dcef1ba90eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmp</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a4d2c7e9b6e47d52f540831c5b5c9b2bfa74bc973c9f0468dd824b24815451dc5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exv_msvc.h</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>exv__msvc_8h</filename>
  </compound>
  <compound kind="file">
    <name>fujimn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>fujimn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::FujiMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>futils.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>futils_8hpp</filename>
    <class kind="class">Exiv2::Uri</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Protocol</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887a9f70229f89696a35c029e3859e685891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pHttp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887a59043ac1a00ac85629987fcf7d51d555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pFtp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887add4fffedec864225f99602dc54ee01d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pHttps</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887a1c4df51884fdbcb10899673fe1547cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pSftp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887aedbefab0868b805866ea79bb93ea841b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pSsh</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887ab68948a4f92c647ab3bfdf8034a76588</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>base64encode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a41c00f4c281884b7e6adcb32fbf6789b</anchor>
      <arglist>(const void *data_buf, size_t dataLength, char *result, size_t resultSize)</arglist>
    </member>
    <member kind="function">
      <type>Protocol</type>
      <name>fileProtocol</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8fafba026ab8971599f2c2dc7bb4072f</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileExists</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0432df7d3995fa4d2fbc0b3f90265c59</anchor>
      <arglist>(const std::string &amp;path, bool ct=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strError</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a086796c27d01f4618a158a0e56905f72</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gifimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>gifimage_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::GifImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newGifInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a34934ab2ebed29730808fcccc6749765</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGifType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae2b8b0eceeb28acf1bc2a78b18acbfc4</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>gif</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a5a23950c2d3c8805cc7fc7bcd6d00e23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>image.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>image_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="xmp_8hpp" name="xmp.hpp" local="yes" imported="no">xmp.hpp</includes>
    <class kind="struct">Exiv2::NativePreview</class>
    <class kind="class">Exiv2::Image</class>
    <class kind="class">Exiv2::ImageFactory</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="typedef">
      <type>std::vector&lt; NativePreview &gt;</type>
      <name>NativePreviewList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af72182be3e51f30ef8cb55a86dfa8e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::AutoPtr(*</type>
      <name>NewInstanceFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac744f9ab24f7fd0fb9b46b156731aa5a</anchor>
      <arglist>)(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>IsThisTypeFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afdcc4a2285707a4efe2defe8806c3c67</anchor>
      <arglist>)(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a717a4bb844932a834dd109ce2554a2a4</anchor>
      <arglist>(Exiv2::Blob &amp;blob, const byte *buf, uint32_t len)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>none</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a0fa6a19fc7872d83957727f1c1dde0bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iptc.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>iptc_8hpp</filename>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <includes id="datasets_8hpp" name="datasets.hpp" local="yes" imported="no">datasets.hpp</includes>
    <class kind="class">Exiv2::Iptcdatum</class>
    <class kind="class">Exiv2::IptcData</class>
    <class kind="class">Exiv2::IptcParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::vector&lt; Iptcdatum &gt;</type>
      <name>IptcMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5caa9cbded318bf7d22a2d219c3d45f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jp2image.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>jp2image_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Jp2Image</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newJp2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a006be3869186bf1447fa475bdb98f8b3</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJp2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1061485827f94c46921d3e1ceda8ba29</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>jp2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a2d98538b0a8e78b7e53ac19d09491a7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jpgimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>jpgimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="struct">Exiv2::Photoshop</class>
    <class kind="class">Exiv2::JpegBase</class>
    <class kind="class">Exiv2::JpegImage</class>
    <class kind="class">Exiv2::ExvImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newJpegInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac9e504de88a8ce92e13f435aefce7f64</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJpegType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a79d7543e864557d19e67b91bb1843962</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newExvInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac06d892514a860aa84329826395835af</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExvType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae0d08d5f85e7ce057e6ac5c0e5d1d95a</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>jpeg</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a937f63495908470ff8bf7c94e5ea1298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>exv</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a63dc8eee4aa178e786a81b2acbc4da0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>makernote_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>makernote__int_8hpp</filename>
    <includes id="tifffwd__int_8hpp" name="tifffwd_int.hpp" local="yes" imported="no">tifffwd_int.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="struct">Exiv2::Internal::TiffMnRegistry</class>
    <class kind="class">Exiv2::Internal::TiffMnCreator</class>
    <class kind="class">Exiv2::Internal::MnHeader</class>
    <class kind="class">Exiv2::Internal::OlympusMnHeader</class>
    <class kind="class">Exiv2::Internal::Olympus2MnHeader</class>
    <class kind="class">Exiv2::Internal::FujiMnHeader</class>
    <class kind="class">Exiv2::Internal::Nikon2MnHeader</class>
    <class kind="class">Exiv2::Internal::Nikon3MnHeader</class>
    <class kind="class">Exiv2::Internal::PanasonicMnHeader</class>
    <class kind="class">Exiv2::Internal::PentaxDngMnHeader</class>
    <class kind="class">Exiv2::Internal::PentaxMnHeader</class>
    <class kind="class">Exiv2::Internal::SamsungMnHeader</class>
    <class kind="class">Exiv2::Internal::SigmaMnHeader</class>
    <class kind="class">Exiv2::Internal::SonyMnHeader</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="typedef">
      <type>TiffComponent *(*</type>
      <name>NewMnFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade7f78d50eb13bb463763662e70076f0</anchor>
      <arglist>)(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="typedef">
      <type>TiffComponent *(*</type>
      <name>NewMnFct2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a64e0bd936803eec7503ea81f345e98d4</anchor>
      <arglist>)(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newIfdMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af45d0c588ae7fed9a114360ae0d20413</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newIfdMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac644e2b25848c7b08b4e208c977312a3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympusMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae6b8805c882b30f4f992ec3d11691ba2</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympusMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d35675525b7e091fbb9318a51a675ef</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympus2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3abd12b311e188910521ce968129f11f</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newFujiMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a260b34a09cec125f39433614ac11d989</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newFujiMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a41af8e2dfd2746beba18be9f56469720</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikonMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac52719d1e3bb994008772f83f609ff94</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikon2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab4b074daef4d895c73daf9bdb4eee69c</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikon3Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72880d9402840d41f933b1bde32150bf</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPanasonicMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50c93fb52ea46f8ce71a02a47d6a35b3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPanasonicMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1139bcade370b885c3dc8d8e2b316e16</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abce03865a0aa274c91b8203a42e31c13</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe063e35f4659ffb946bb0ba137293d3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxDngMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acccde413ce8bb61feaa3ae33daff4662</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSamsungMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab7c1aa880133b5320e9e784178554fb8</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSamsungMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab9bb0cf4e71868e34b63dcb12edebde5</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSigmaMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a10f30799b5107df59489cb5cad20f961</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSigmaMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a940ba1982bf1b9c949aa44903648abe5</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSonyMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50b1a1d205fa295a3a295634e56f215d</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSony1Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac783235ad92b8c31db4435304aa37c75</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSony2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a34fc25b42a3d42f0c0cdd8ab1e56a60d</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sonyCsSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c259094300986472ea5fb07e4c0cf6a</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nikonSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f2631eb24935814c8f3740cf459de4b</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>nikonCrypt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a793f2472ec54d909cd6032d01fd21dae</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matroskavideo.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>matroskavideo_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <class kind="struct">Exiv2::MatroskaTags</class>
    <class kind="class">Exiv2::MatroskaVideo</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newMkvInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac9885cab607b137052dbb18dbebe2e6e</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMkvType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb9acb098a113c94f4f7f02f930aadca</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>mkv</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a544db195f1b4f4bc3ee4709ed70a2fbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metadatum.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>metadatum_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <class kind="class">Exiv2::Key</class>
    <class kind="class">Exiv2::Metadatum</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa225826fb028de2941da4230b51dfb95</anchor>
      <arglist>(std::ostream &amp;os, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8525be11fc92fcb2bd88e886daa1959a</anchor>
      <arglist>(std::ostream &amp;os, const Metadatum &amp;md)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpMetadataByTag</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afe183940aa386c68b9bb269f3f69b352</anchor>
      <arglist>(const Metadatum &amp;lhs, const Metadatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpMetadataByKey</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab6a6b7174667cb72370cc0a52ad7004d</anchor>
      <arglist>(const Metadatum &amp;lhs, const Metadatum &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minoltamn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>minoltamn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::MinoltaMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyLensID</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30a4a48f32ff30ebd5b2d3f287515fff</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adf85a4e392dd45fe89e49906c674e8f4</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyBoolValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9faad19bdbf5d9570facac8bd15e2a6d</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyBoolInverseValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abf1f8bcb9afd33fe9cac0d921efae23f</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03460091fe8b38f7aaa9706fdf415f05</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyLocalAFAreaPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4941ee5b6907a08ccf3ff5615356a0bd</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyDynamicRangeOptimizerMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9b6b551cc59cd673b13ad3b6fe9e247</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyPrioritySetupShutterRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0e743cbfb656a46cacfd3d0ccd039eb0</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyQualityCs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a313428300476feea2fc74c472cd681c3</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4e274a07692451da226b7eff38fd4f55</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonySceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa70d5d0e1536a569e79a91b6d08b8ab6</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a025316796e05dab3e853021926bc7c1c</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyTeleconverterModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a849385c64f0449f89df16fde5b29b14f</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2c1abc6e530322beb4d094d165406f51</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyZoneMatching</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad842adb2bee340da1b26aeddfd00d3f4</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyFlashExposureComp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f32fc9a16c34eb9c74da36778d88056</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mrwimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>mrwimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::MrwImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newMrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1bb3a02cde292ce110f77ffdc692c0ee</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a49bd48d4c5759f607e7ddaa7a7ce3d3f</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>mrw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a161d087039e63656cff123f4e74071d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nikonmn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>nikonmn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::Nikon1MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon2MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon3MakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>olympusmn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>olympusmn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::OlympusMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>orfimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>orfimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::OrfImage</class>
    <class kind="class">Exiv2::OrfParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newOrfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a51eca2f83f7d21b63e7bd7b1ee9c2e16</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a87cc9dd7270c22d05d95bf695f21d796</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>orf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a69661560b65c410d9419ecce0277080f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>orfimage_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>orfimage__int_8hpp</filename>
    <includes id="tiffimage__int_8hpp" name="tiffimage_int.hpp" local="yes" imported="no">tiffimage_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::OrfHeader</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>panasonicmn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>panasonicmn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::PanasonicMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>pentaxmn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>pentaxmn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::PentaxMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXV_PRINT_COMBITAG</name>
      <anchorfile>pentaxmn__int_8hpp.html</anchorfile>
      <anchor>a979bb5994ea291404e37be0a19d0eb53</anchor>
      <arglist>(array, count, ignoredcount)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_PRINT_COMBITAG_MULTI</name>
      <anchorfile>pentaxmn__int_8hpp.html</anchorfile>
      <anchor>a5c45628b38dea403a93c1baa02af0ae1</anchor>
      <arglist>(array, count, ignoredcount, ignoredcountmax)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCombiTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2d2801b3721349edfac2256fc972ae27</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pgfimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>pgfimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::PgfImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newPgfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a12242bf2733a1c9c88abb7a4318ee3db</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPgfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>addb4cc95dc380c767efbe94584b4df6a</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pgf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aebdc24c77964e499108068a4a0618626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pngchunk_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>pngchunk__int_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::PngChunk</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>pngimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>pngimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::PngImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>EXIV2API Image::AutoPtr</type>
      <name>newPngInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3222339b57a62d96c8ac5b38e2a7ccf1</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isPngType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa8f35a1ff80fbea87aec202f8ddb69c7</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>png</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a97fe878fdc25367e8fe5b832211c9435</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>preview.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>preview_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <class kind="struct">Exiv2::PreviewProperties</class>
    <class kind="class">Exiv2::PreviewImage</class>
    <class kind="class">Exiv2::PreviewManager</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>PreviewId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7cf3033d88acbcf7a808946868f0b239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PreviewProperties &gt;</type>
      <name>PreviewPropertiesList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad46a7838fd620360c753a64922b0d559</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>private.h</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>private_8h</filename>
  </compound>
  <compound kind="file">
    <name>properties.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>properties_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <class kind="struct">Exiv2::XmpPropertyInfo</class>
    <class kind="struct">Exiv2::XmpNsInfo</class>
    <class kind="struct">Exiv2::XmpNsInfo::Prefix</class>
    <class kind="struct">Exiv2::XmpNsInfo::Ns</class>
    <class kind="class">Exiv2::XmpProperties</class>
    <class kind="class">Exiv2::XmpKey</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="enumeration">
      <type></type>
      <name>XmpCategory</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpInternal</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489a0671779060fa65d354b2dc8b95a54a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpExternal</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489a153d389241c1430c23db408427939eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abacaa0596e9c197b99985ca68174a4c0</anchor>
      <arglist>(std::ostream &amp;os, const XmpPropertyInfo &amp;propertyInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>psdimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>psdimage_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::PsdImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newPsdInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a694f2f16c08f41217d0f1b3e0a80cef6</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPsdType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae1922df87be2eb2db5ca64ce1152cd9d</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>psd</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>abd685b7d2282abf733c4469ddd00399b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quicktimevideo.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>quicktimevideo_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <class kind="class">Exiv2::QuickTimeVideo</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newQTimeInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a758f9e92d60d96920e5ce24c136e64d1</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQTimeType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af437212d7fe25ccddc931abb5efcbcdc</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>qtime</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a89d6505d16419290e1c255a245e5190a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rafimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>rafimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::RafImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newRafInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5187e744341921e7c06b8ac494d11570</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRafType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8f90949be425b2396c454eb9084bebbf</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>raf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a0d3c27b9ab28a40ef87994a05ffb946c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rcsid_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>rcsid__int_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_RCSID</name>
      <anchorfile>rcsid__int_8hpp.html</anchorfile>
      <anchor>abae632aff1c04a47d6495db05a7a7e28</anchor>
      <arglist>(id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>riffvideo.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>riffvideo_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <class kind="class">Exiv2::RiffVideo</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newRiffInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a233497b39ee59e7a7bd4b4e7e3829491</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRiffType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9bd5bbc2d1c8a279955910f5674114c1</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>riff</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aa9b22e748096affd4343546c9f4a89ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rw2image.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>rw2image_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Rw2Image</class>
    <class kind="class">Exiv2::Rw2Parser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newRw2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a76129504f3c4a48a9c3eaeb823d302e1</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRw2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a31dc6a983c786692a5a6b100ae58cde3</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>rw2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a2bbdd4b7b9805eb3513917d33297ce7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rw2image_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>rw2image__int_8hpp</filename>
    <includes id="tiffimage__int_8hpp" name="tiffimage_int.hpp" local="yes" imported="no">tiffimage_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::Rw2Header</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>samsungmn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>samsungmn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::Samsung2MakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>sigmamn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>sigmamn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::SigmaMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>sonymn_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>sonymn__int_8hpp</filename>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::SonyMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>tags.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tags_8hpp</filename>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="struct">Exiv2::GroupInfo</class>
    <class kind="struct">Exiv2::GroupInfo</class>
    <class kind="struct">Exiv2::TagInfo</class>
    <class kind="class">Exiv2::ExifTags</class>
    <class kind="class">Exiv2::ExifKey</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::ostream &amp;(*</type>
      <name>PrintFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a66eab57168acb008b5974a414144e1d2</anchor>
      <arglist>)(std::ostream &amp;, const Value &amp;, const ExifData *pExifData)</arglist>
    </member>
    <member kind="typedef">
      <type>const TagInfo *(*</type>
      <name>TagListFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a41e505a05c778aa26cddfc15078563e7</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9708095cd8ecc9e6b8134fa7b85ad8cf</anchor>
      <arglist>(std::ostream &amp;os, const TagInfo &amp;ti)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tags_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tags__int_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="tags_8hpp" name="tags.hpp" local="yes" imported="no">tags.hpp</includes>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <class kind="struct">Exiv2::Internal::SectionInfo</class>
    <class kind="struct">Exiv2::Internal::TagDetails</class>
    <class kind="struct">Exiv2::Internal::TagDetailsBitmask</class>
    <class kind="struct">Exiv2::Internal::TagVocabulary</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXV_PRINT_TAG</name>
      <anchorfile>tags__int_8hpp.html</anchorfile>
      <anchor>ab6b99261179f75e947f178181c8a8134</anchor>
      <arglist>(array)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_PRINT_TAG_BITMASK</name>
      <anchorfile>tags__int_8hpp.html</anchorfile>
      <anchor>a2440c78f2d63cc1a006320775ca37e79</anchor>
      <arglist>(array)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_PRINT_VOCABULARY</name>
      <anchorfile>tags__int_8hpp.html</anchorfile>
      <anchor>ae281f1f2f7f97c42f82e08837f14ace0</anchor>
      <arglist>(array)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IfdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifdIdNotSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5f70acc845d36ed11ec8b8db3ce04944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd0Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab827fd1cd84f808c789a4666ffd439e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a925eae112e9aef20d09e9d4b6bf3cc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0afb28afe4cf828a11a8347a759d83fae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0abacc8b39450ac577b462714e19fa9501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exifId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a70ad04f537de4df5209e97768df1712c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gpsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a911e7900a4892e6645aaaf3a3ef492fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iopId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa210f12e76e96954b4cdcbd12730b99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a94d7630cf5ff34f95c930dce625e5063</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a303393d91127c6790217a6a38fa7c4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a1f80a3befbe170f712b392c3b7036d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae9f7babec97ff302bc07180f420a1de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage5Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a54599b2bcfe6f36e938831e54da736e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage6Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a1dc20f370df30c306cd2378dc053397b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage7Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a161a78a4d43fa40009ac662a6ad44b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage8Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a987fb493b967c50cf7a0901c155240fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage9Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a9c57deb103bfd7db3fea8312db4b3ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subThumb1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a94ea8499c61095d4781a110c83f4a954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>panaRawId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a40a132541fb48b88c6f9579bee83e95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mnId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5f4c334aaee8d4728799b5f0a03554b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a8166b7fc84114b8c7596704ee9598f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonCsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ad3b4a3804b319afa6197a729c662db63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonSiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7306e49d51e83b1918d8e07ea42d09a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonCfId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aae1a86eb516c552f2f1da6f5db183f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonPiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a6319e7aab3cf03ef007a6408e188cd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonPaId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa208ce91aa609ee2fd4866ffb63597a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonFiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a63c17eb2751ad40efb29597164f68e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonPrId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a66d5cb49a32f9990b3ba45024588d253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fujiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a6d8ffec2cd9129ac6ae9296d67c166db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a15b67841852e4e001151695af0a4274f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCs5DId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0adcdf9bf604da65349f5f46035955ff61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCs7DId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a81b0a46a386b9f8f3bcba40b6c61794a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCsOldId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac9e8ef8aa3a42f7d42f8b46dd716aae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCsNewId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab31d3e6b93174b7643326dbb19d9daf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikon1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a973432b24a49e3c26c4a7ad835f243a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikon2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ad4ad28ded34157f0091087649f01763b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikon3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a97d8f7cb473725a394003e1026344abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonPvId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a99ae36c902ddd842575196e35452b837</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonVrId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a859a62c74f84f3eb4f297e90d6d5e2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonPcId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7443e13f66579d22793bbd1d28384601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonWtId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab5c77f21aa5423cb9929a7af9a1ce742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonIiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2d027d593eeb9b47dbbca9b82f1f05b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonAfId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aefc21fec07fc0977978dff1a85d15876</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonAf2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a92ad28a3513b9d25edd3c6fc99ad7cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonAFTId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a81463cf63e367c95c866b354d559638e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a30e23867919262c4d1a4f2b934514948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonMeId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a527eb24ccb5881cce742cc4ea946d672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFl1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab01bdc1ac0b1f1bbdec3aed6322ec10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFl2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5b28f3b10eae56c01ec3209a2dae026b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFl3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa247c8fcfde52a02332ebc96fac6ab1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7f592821888da817d427e0190d71a9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a49e5aadade435e44286122ebfe6a7a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a055a7d5abe19e60be1833a622ff4b01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab4dcae1d12a489829e133194d7561e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi5Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae866a2baff4910a787a39cf05a0cc580</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi6Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a1188bfbd3aa05ef7596f4d4a5d986aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonLd1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0abda20c759d4eb39f4e7c703c06bde797</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonLd2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac4f235b76e3606e5daf82319e87f86d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonLd3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac91de8c72c6592dd507ccb843cdc7d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab36174ea496a18fcc3c07e75cd95255b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aef6193249a30b8fd7ec9d8a2191f4516</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb2aId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab6a2acea43d24765702f8d606072fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb2bId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aef2c1fe9cc17b4c362a187b4cce53385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae6f68cab663e287b4c55d1c9895af6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af3616a6c007b0302c3903dd88b2f0415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af5a69cbb6c3c61ed1a37d476480e715e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympus2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2639815de2634fd17c463e072404b42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusCsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a0ee2db27cfe8e8c681d1ecd72da470bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusEqId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0acd3cc7c1540b453b64ade6bf27e9c385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusRdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a9d4e0f059f501376b09742278d74097d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusRd2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a0d140b6df46f9d9dea8d86e3fe663f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusIpId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a741a1e76f5622d528db4c17816bc8b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a9a76b9389ef8d772249aa01de6afc33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0abd11adf65ec1e72397d68776b5d67a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af41418f4cf3758992fef3b798f1f0543</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a296d800fb87953c8019426da93b166a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae16dbece5aadba3808eed906ee46ff01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe5Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a73a2940f4e635d8a41383e1cae15d8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe6Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a15cc609646b852410d3689813efbabb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe7Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a691571df18cfbf65cfa5f6fef22a6c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe8Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac764f4a864e62e0674d7213e2d80dde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe9Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2273507b0b3c1a0427e8314ffcff5d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusRiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a866e316c8c6df8fc659a0ab63e59598f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>panasonicId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa3f0020531813834566def6a69e7d583</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pentaxId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a0b55b584302e2b1fa97c38f2537d9383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pentaxDngId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aaf66933f5cc84d8df58d2cc4097eacb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samsung2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ad905f7b519f3f1389e1f16d9f5c45ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samsungPvId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a14e0fdd898b459d929cf1f93ccf847b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samsungPwId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a82e02cecd5dc8348b022b3f5f6687596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sigmaId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a3b33313d128a2b8548580c63ffed7429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a897ecc99711785878f1dd2e74f3d606c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a6651833ecbe312c1fb26d679e3578e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sonyMltId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a960ec38afdf69fa3f4c58194afeff9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1CsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a26ed730fa812898311e200d32a76fdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1Cs2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa78d2c5a3b9f0164ab3fc8881412a044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony2CsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab15a443d0061e8459c822cb051064682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony2Cs2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a84643ee8281b4f87d9698e8f8bb4c735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCs7DId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac03553e3be543073dbf08d667e071bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCsOldId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af31dd3265c3991a2dbc27f76b02ee258</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCsNewId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7056044308b37b923475e0f2ef697287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCsA100Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a890c7eb91e523efa69de424831b517d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5061052d02e1d2489538b0498fdd8555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ignoreId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2045e69453fff3e3f02c48b8450c6a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SectionId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sectionIdNotSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037aa4eaa65f8feeb10a4815a108e72f9e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>imgStruct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a56a676cbbb229edde0f6b01356fa1200</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>recOffset</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a4626b45666502b7e9925d8ed560794d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>imgCharacter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a21d61d19dc9b3c476fac58de81f79c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>otherTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037abbaba699dd13bbe162bbff5d1557c1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exifFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a0b1b93faeb3530b449986195a876b6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exifVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037afb8432f347eb9baf6fd47e09e11d6bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>imgConfig</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a495712380135463c834ccecebaab9616</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a0e19b84d6786c4d84a5c217b832bb6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relatedFile</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a82316d113a7d666a2c7ce5026c7d5f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dateTime</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037ad398ca6270548001af66f94a86a78036</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>captureCond</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a3ff3dee457960f027da8e0802a95b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gpsTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a85e98b638c0b4c205747bcdc252f276f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iopTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037af0d5a2eae9bdc8ac9b295ebc6b46ebb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>makerTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a0cfa76b66180670f84022f2fb5fb7742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dngTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037aa79addef841d9ab0cf978110134f2d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>panaRaw</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a9c9fc0041fda20e5dc0532c4a13bc6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffEp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a05a26f082a2ea1320eec0dffcd9ee11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffPm6</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037adf64b85bce698b2bc38501ead77142a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>adobeOpi</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037ac0d9c80523049e81227e4809b64754ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastSectionId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a83861530eb00a310af3d195d9c6e6f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeeed3e68dbb466e97978cb74f0b34e3e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTagBitmask</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a88a9c00bf994e28c5a802f70f5654ec7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTagVocabulary</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f50cfce460d4cbc48d20115d685e666</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>ifdTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab75bb1bee28538bcb081291e8f3b2396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>exifTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab2cb95524a5d466ed5c78690d171d4c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>iopTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5ee3671f4518639ff2bed7731d6c750c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>gpsTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81d1579cf2385261189c76984227959d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>mnTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad473f74392cf835fc7607e2e36736a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>groupId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8d40d5f0bced57d0a6564f7d5bfe9494</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ifdName</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6a14670f47e8b636f0d0e24913638a6f</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>groupName</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02590bedabb5438d17b309363cc9ff2f</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMakerIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a080ea8768c028af335952d166ef3e2e9</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExifIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8ecf0d2152798e13bf5c0b2edebcb78</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>taglist</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c3a170a28ffa4de54e55435e7d95bd0</anchor>
      <arglist>(std::ostream &amp;os, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5173c535856e05763c719329f89c843c</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a741128c1e42e2dd283160b20c43b215f</anchor>
      <arglist>(uint16_t tag, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6989cdf7bf32837cc6bfc455d32b9428</anchor>
      <arglist>(const std::string &amp;tagName, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tagNumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7dce1ef6847f8f14400f3e0ac0eea4ae</anchor>
      <arglist>(const std::string &amp;tagName, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fnumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7de99c06937d5d362fe7a23c7eb466ee</anchor>
      <arglist>(float apertureValue)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a22702f724f37509d0f690eb1c55a708b</anchor>
      <arglist>(float shutterSpeedValue)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac72e915f3de1c90489744aaace1eddb7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af0262ce29f58bb6ef73a72334499dbce</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printFloat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aac98c672ae0e3f36eee77824cba2051b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDegrees</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1549243d106072fc6f8af62d0a4b37be</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printUcs2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0a2a3db205807282b11a0b735737ca4d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printExifUnit</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a480d5b006044c9d2558c189b33bca4ba</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0000</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a85af83520247babc349336ef2585ebe7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0005</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f813b3c092bd23119fcc09468577b4a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0006</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9e8b717cdf9654528cbf302766568edf</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af93755b9a64d16971d1361145b5d22a3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0009</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2841f6212b7438cee4ce47b41fead3a7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x000a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b944bd62989bad256f800c1a997c412</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x000c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30c9cbeea92ecb53a15a1e73173e6a84</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0019</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46573df98727246f120be51f1fd5615a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x001e</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aea2db9942e632eb8e8ef4a7322040a97</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0112</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5f90b4bd2b255db7c26f4a7106be7ca2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0213</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72e024d188015a0bc3c6d3dbf349402f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8298</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9503966b91423d0bb6a1d7b7fd462b24</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x829a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3a8dff2b93a9178e66b69ace34519acb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x829d</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3cfcd55a41b3c4c7fc0cfa000d6aede8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8822</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae63349b8be43ad15b9c565cbfc03bd3a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8827</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1a671418b32e2d6c6a17f13f8572dc4d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9101</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a832a7340403cbc1edb10ed7e28281784</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9201</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a587d0088ba36a9821fef0b5f43961f7a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9202</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13d42c7c19808774dcc797e07948b8ef</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9204</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abc26de089a85c0fff7b0f93c0a8c91b6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9206</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03b7d5be0ced8186b0485bab3c2ea8e9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9207</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af5f36366077efd4e5b4075ed4408016e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9208</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adbfba091a165f12b56916b9e86e7fb18</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x920a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a740f086758e563dada879bdbd170e68f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9286</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c64eb723cca9db8a9623884eaa46fd1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa001</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f81c67c695aeb2b566a23401d35b03f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa217</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2ddba10cc3f5d31bdb2a9925ae4365e3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa300</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f87440df2e6da3f1d443519ce8f52ad</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa301</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af6a9eb4158c2c4a502c3ec2499b754e9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa401</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75be3a1b9d634e16d8cc0f0f684e2563</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa402</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a860b0d1a851f3f5e0d6d4876419d74b2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa403</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4cc305ada96f988fe2c40bdd76e2b48c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa404</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a899fcd1bb10809d69227ee92aa99757a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa405</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02abdb4141bfb8f1081d82b965ad7df9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa406</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac3c504cc957db0023b795b9507144655</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa407</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a036f440ab36f7d70aef356d9df499ff6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa409</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2290911707bdbbd1ab46264ace0733d6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa40c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a33bd654d069342ac6e5deeba6296cfa2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printGPSDirRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f307649b7068ffb93015ad0632dd2b8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printNormalSoftHard</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6d4ba6c9d1b153f58e7fbd76c14c559a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printExifVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a63d73c7d07334a6cd9ed8ad196e6c3f1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printXmpVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a807979bcb0b8df58903e77d6dcdcec7f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printXmpDate</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac068f1a78b0bc4dbe6fe70d05a4aa7e2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgaimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tgaimage_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="iptc_8hpp" name="iptc.hpp" local="yes" imported="no">iptc.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::TgaImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newTgaInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a43b242299ac95dff1a18759ebed87b55</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTgaType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8e28192e762ae5664c12afe6677a2593</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tga</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>abd93d59659be97f034f8b8b6b5b3d2c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiffcomposite_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tiffcomposite__int_8hpp</filename>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <includes id="tifffwd__int_8hpp" name="tifffwd_int.hpp" local="yes" imported="no">tifffwd_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::TiffPathItem</class>
    <class kind="class">Exiv2::Internal::IoWrapper</class>
    <class kind="class">Exiv2::Internal::TiffComponent</class>
    <class kind="struct">Exiv2::Internal::TiffMappingInfo</class>
    <class kind="struct">Exiv2::Internal::TiffMappingInfo::Key</class>
    <class kind="class">Exiv2::Internal::TiffEntryBase</class>
    <class kind="class">Exiv2::Internal::TiffEntry</class>
    <class kind="class">Exiv2::Internal::TiffDataEntryBase</class>
    <class kind="class">Exiv2::Internal::TiffDataEntry</class>
    <class kind="class">Exiv2::Internal::TiffImageEntry</class>
    <class kind="class">Exiv2::Internal::TiffSizeEntry</class>
    <class kind="class">Exiv2::Internal::TiffDirectory</class>
    <class kind="class">Exiv2::Internal::TiffSubIfd</class>
    <class kind="class">Exiv2::Internal::TiffMnEntry</class>
    <class kind="class">Exiv2::Internal::TiffIfdMakernote</class>
    <class kind="struct">Exiv2::Internal::ArrayDef</class>
    <class kind="struct">Exiv2::Internal::ArrayCfg</class>
    <class kind="struct">Exiv2::Internal::ArraySet</class>
    <class kind="class">Exiv2::Internal::TiffBinaryArray</class>
    <class kind="class">Exiv2::Internal::TiffBinaryElement</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2::Internal::Tag</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2::Internal::Tag</namespace>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>TiffType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92e26f19f175769648d77d532e3cbad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CfgSelFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa071cd867a864848b86a3fcc2d22b009</anchor>
      <arglist>)(uint16_t, const byte *, uint32_t, TiffComponent *const)</arglist>
    </member>
    <member kind="typedef">
      <type>DataBuf(*</type>
      <name>CryptFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2ae64d39ee88304c89f1c6e87d81bac</anchor>
      <arglist>)(uint16_t, const byte *, uint32_t, TiffComponent *const)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>toTypeId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac248be2a2f3a3d1218625a2d2e6dd40a</anchor>
      <arglist>(TiffType tiffType, uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffType</type>
      <name>toTiffType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8d23237963473f87eebe4bb10a1d41d</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpTagLt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7124ec69fc3bb353bf854835d318b9e0</anchor>
      <arglist>(TiffComponent const *lhs, TiffComponent const *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpGroupLt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acf7fe96fe3d50cc6b38517981323c3bc</anchor>
      <arglist>(TiffComponent const *lhs, TiffComponent const *rhs)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffEntry</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa1d6043d89dc221f1d50222b15b99b0b</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffMnEntry</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2a925149f6f5e09eb137d72fb614c3f</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryElement</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4de77f0776bda90453c1ccd73d4855f0</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffDirectory</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeec6ade2eae9764629f453777c3ea2a0</anchor>
      <arglist>(uint16_t tag, IfdId)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffSubIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab037109d535a7238c846ea524b9324a9</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryArray0</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab93d6c8c01a4098c8dc5d365c701bbfd</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryArray1</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab529f54a9b9389ef0aaddf4374d678a7</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryArray2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a23601e7f95da87343295bce7c2f90545</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffThumbData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae73cb7cebea292d8cc9f0b7be79bd3d0</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffThumbSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50c3212aa49894c88b860982b3f7db9a</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffImageData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>addab35f66b5c3c69178c8104a41f8031</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab011090a79750d62ea73b39e41a9fc9f</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedByte</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab71efecbf99f9418820c73708a3cf62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttAsciiString</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b5bde30ee6d5c70b7bb097fb9ec2964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedShort</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d20b7b8d431865c5bbb72ece0e82421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2074c61e7cda2b4dae148c2ab281eaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedRational</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a354900bea65845107454abb6775a32f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedByte</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a210fbda6987f7c2812751a85d9b9f298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUndefined</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acffb015c64c008b6f123c06b1522286c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedShort</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e6bcae5c75296a29576af25dbad8c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f8b97b43c3cbc2f3b23e2f7612d0d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedRational</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af85d508a811442ccc864d5fa516c2c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffFloat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a098b9822143ebe072f1efc9669dd8e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffDouble</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a38ee59526e75451a0eef5fa23afb11a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a59beb014bec68a9a262d80dbb35c0318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>none</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a17e6ad3bb3358f906bf837a70130abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>root</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a417152f70ffd99dfe68efd7d5d5264c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>next</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>afd82fb6baa277be5f954f3ec475b6162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>all</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>ae69c008300422213aaece8ee8c730109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>pana</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a3af7db83d7ab02130ca4c7ee7c2c1949</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tifffwd_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tifffwd__int_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="typedef">
      <type>void(TiffDecoder::*</type>
      <name>DecoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afce7181e4775c5fec3c580c08042b1ca</anchor>
      <arglist>)(const TiffEntryBase *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(TiffEncoder::*</type>
      <name>EncoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae1dc6f098c07a468066b0b6c99b8fdd9</anchor>
      <arglist>)(TiffEntryBase *, const Exifdatum *)</arglist>
    </member>
    <member kind="typedef">
      <type>DecoderFct(*</type>
      <name>FindDecoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aecce2cef61ce6f676b6d1ce7c730cd59</anchor>
      <arglist>)(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="typedef">
      <type>EncoderFct(*</type>
      <name>FindEncoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a32b5e2472f7569eefc020ffbea004aea</anchor>
      <arglist>)(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; TiffComponent &gt;(*</type>
      <name>NewTiffCompFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6b299263887e0d87ba8f91b3698e674c</anchor>
      <arglist>)(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; TiffPathItem &gt;</type>
      <name>TiffPath</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab19b0d2996c210036ff4c659eac717eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IfdId &gt;</type>
      <name>PrimaryGroups</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa49f2be6bd01a3d9b1dded02bdc3b487</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiffimage.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tiffimage_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::TiffImage</class>
    <class kind="class">Exiv2::TiffParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newTiffInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2e0cd9bda3298bc22611cb18f672bb92</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTiffType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6f5d5b19b7e5fcd822a1d8ef9eed4ca9</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tiff</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae334f0954e8dec6a0a6a27439dfa256f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>dng</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a5290f8d5984d9100bbafb87359eecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>nef</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a331438c9d97350ab90ff5176ccc7c1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pef</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a28e4c07e3d00fc28b0cba330d8f6b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>arw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aa76ab2055b301995de17b452e8817087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>sr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a6b3114550168aecbff4e9a7f575881e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>srw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a934af38458609f0ebe4d947da3c41f2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiffimage_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tiffimage__int_8hpp</filename>
    <includes id="tifffwd__int_8hpp" name="tifffwd_int.hpp" local="yes" imported="no">tifffwd_int.hpp</includes>
    <includes id="tiffcomposite__int_8hpp" name="tiffcomposite_int.hpp" local="yes" imported="no">tiffcomposite_int.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="tags__int_8hpp" name="tags_int.hpp" local="yes" imported="no">tags_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::TiffHeaderBase</class>
    <class kind="class">Exiv2::Internal::TiffHeader</class>
    <class kind="struct">Exiv2::Internal::TiffImgTagStruct</class>
    <class kind="struct">Exiv2::Internal::TiffImgTagStruct::Key</class>
    <class kind="struct">Exiv2::Internal::TiffGroupStruct</class>
    <class kind="struct">Exiv2::Internal::TiffGroupStruct::Key</class>
    <class kind="struct">Exiv2::Internal::TiffTreeStruct</class>
    <class kind="struct">Exiv2::Internal::TiffTreeStruct::Key</class>
    <class kind="class">Exiv2::Internal::TiffCreator</class>
    <class kind="class">Exiv2::Internal::TiffParserWorker</class>
    <class kind="class">Exiv2::Internal::TiffMapping</class>
    <class kind="class">Exiv2::Internal::OffsetWriter</class>
    <class kind="class">Exiv2::Internal::FindExifdatum</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isTiffImageTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ada054fe3aa5471a1c547503754778613</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiffvisitor_int.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tiffvisitor__int_8hpp</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <includes id="tifffwd__int_8hpp" name="tifffwd_int.hpp" local="yes" imported="no">tifffwd_int.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Internal::TiffVisitor</class>
    <class kind="class">Exiv2::Internal::TiffFinder</class>
    <class kind="class">Exiv2::Internal::TiffCopier</class>
    <class kind="class">Exiv2::Internal::TiffDecoder</class>
    <class kind="class">Exiv2::Internal::TiffEncoder</class>
    <class kind="class">Exiv2::Internal::TiffRwState</class>
    <class kind="class">Exiv2::Internal::TiffReader</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>timegm.h</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>timegm_8h</filename>
  </compound>
  <compound kind="file">
    <name>types.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>types_8hpp</filename>
    <includes id="version_8hpp" name="version.hpp" local="yes" imported="no">version.hpp</includes>
    <class kind="class">Exiv2::TypeInfo</class>
    <class kind="struct">Exiv2::DataBufRef</class>
    <class kind="class">Exiv2::DataBuf</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXV_CALL_MEMBER_FN</name>
      <anchorfile>types_8hpp.html</anchorfile>
      <anchor>a16313404f84067c0eb2b44a5e3c0844a</anchor>
      <arglist>(object, ptrToMember)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_MIN</name>
      <anchorfile>types_8hpp.html</anchorfile>
      <anchor>a795e59751bfd421015b3f7de8246d3d8</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_MAX</name>
      <anchorfile>types_8hpp.html</anchorfile>
      <anchor>a7174f8421524ab2dd7baf1e6e36a9fc9</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_COUNTOF</name>
      <anchorfile>types_8hpp.html</anchorfile>
      <anchor>a26ec01b2862132b64975e59ad89747b5</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>byte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a16f60a5bd4207fe155f6cf93a15efa72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; uint32_t, uint32_t &gt;</type>
      <name>URational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aedcaa9af0563cbd00a19b040d5aa7a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int32_t, int32_t &gt;</type>
      <name>Rational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95756f3f7fa19103f83addf5fa088a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; byte &gt;</type>
      <name>Blob</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e7b9a2ef47caec919b15f1ae6ff4872</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidByteOrder</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6aee908b0d783292eddcbcd2390fdaeb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>littleEndian</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6ab13624c934b4f2bb59900b9541bc6f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bigEndian</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6ab2d85247b1ea0f66540c168c0be2f436</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>asciiBytes</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6a47bfe918cad5b0c53b6a59915cfb4216</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WriteMethod</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wmIntrusive</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7ad95858b598d9582e5616f8fbc6ae0b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wmNonIntrusive</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7afb9dc8562ec0528b92edafa764b7fe59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MetadataId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdNone</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaac3cc81b789450ef744e4f267e8d8c90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaaac8fa1e88366f22f6976d7a2ec33a228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaa0c0a4622c5b3e0768d48eb5738d81e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdComment</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaa5d6fd8733adf30c37d048bb4705b6cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaa183c5af0dcbfec829d00f44396d04c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccessMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amNone</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16caa1b1080b2db63fecc8eb9c8fdc7c7cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amRead</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16ca7b70a0eaac47ff5e0574ff76c114a51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amWrite</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16cae6a6b7728f1bd4b3048f159da003f94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amReadWrite</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16cad8a81eaa1fe46804eca3a13f9591af00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedByte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca6abd8e6e48dddae9bac03019ae907795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>asciiString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca773cf6dde5caaabb3dcf9fb161fa7dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0329efdda8becff3ecf89bfbc816f72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca3b506c0729276e4de3a0ab4d9b2226bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cae450f64413c928b527cfdd73129d6606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedByte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca717f7d50dd484167359361d2c560f83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>undefined</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450caa044ece6f004f519dce91f57319bb6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca4a46f8aa5e64d33468602515f6255b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca501fdf1b61472bff3b4da19b956eabda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0d777a3a2542fbff07ed29563167b3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cabcc0eb22efc41f32ba573c18731b4928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffDouble</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca9b4d2fa208df5c86d24f7d7c41bd09a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffIfd</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cae9896f64a72a68e176f02c1880b19681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>string</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca2d79fb07c9ec891f281968dad43c1e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>date</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0c347d8ddbbad9440f9bb6db8a06fa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>time</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca8526caf002a100bd730312d45808f1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>comment</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca98944819f3c9921109af5f0a39fcfa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directory</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cafc7cbf89ae7c64de808dc3611b2a880f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpText</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca77cea60f60ef2c6f0f986137c5404c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpAlt</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca627dda12626324231bb87883d8efc5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpBag</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450caa5e7700549d4b079db70605d945447af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpSeq</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca969c20e44455272599e3a273471546e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>langAlt</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca52dce1d022dd8927bc651d2e51dc1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidTypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cafc75de7290b703a810102c8a003fc25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastTypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca1d087498b678aa18f77ab6b5c1812921</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getUShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aba0bbd0d82b12d40d7ff78e54b91d9eb</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getULong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ac010ed4daa22c05b792ade639cda07</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>getURational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abd349c39a93e397914cef0e8c511d147</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a034a977f27f32a817d6846160f3723c9</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aaaa13407701ef70800058a760e8be52e</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>getRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4f99d0bb9a8a2d8ae0b85e2a556325d4</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a222c7a2b5ba8f0f195a52231c83fe1eb</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aca1645cade15ccc7979d93c5011b1305</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adc8f28fe68335865a3578c882a168e63</anchor>
      <arglist>(std::ostream &amp;os, const Rational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a24049f1e33ba6a1de401cc6c522e1bd4</anchor>
      <arglist>(std::istream &amp;is, Rational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4c6c1f6ff6967a7ab3dccfdd21f8db71</anchor>
      <arglist>(std::ostream &amp;os, const URational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5f1805e406e626f02bad01d20eb9421d</anchor>
      <arglist>(std::istream &amp;is, URational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>us2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a553bcd11ca439ab9f6783ee594e85bd6</anchor>
      <arglist>(byte *buf, uint16_t s, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>ul2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac40b07808b158c7d196d12d55c677338</anchor>
      <arglist>(byte *buf, uint32_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>ur2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abe4ad1141383dad6aa8bf889c20540cc</anchor>
      <arglist>(byte *buf, URational l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>s2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a23477f61cedcffab169f291d8f9bf635</anchor>
      <arglist>(byte *buf, int16_t s, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>l2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adf5602b3f96554d7eb6fc778abebd8c0</anchor>
      <arglist>(byte *buf, int32_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>r2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae626dcc00cb44f8f00acdbac2da00439</anchor>
      <arglist>(byte *buf, Rational l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>f2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0ce18941bef037f98fe7c119b24da2fa</anchor>
      <arglist>(byte *buf, float f, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>d2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7b84e90717b7fdffc136cff7a99976df</anchor>
      <arglist>(byte *buf, double d, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hexdump</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95c7b79205556288e3c967798a4c5c41</anchor>
      <arglist>(std::ostream &amp;os, const byte *buf, long len, long offset=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acaf961ae77342e4c754b981c51036948</anchor>
      <arglist>(const std::string &amp;str, size_t size=0, const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exifTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abc72b70889b5efd94e92446fc37ae379</anchor>
      <arglist>(const char *buf, struct tm *tm)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>exvGettext</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2b13ac9cb8855334ebe6b4b833e9e311</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>parseLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1409855f9f68490e5d791b1bffc6a708</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>parseFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a61c3bf069dab26d8a8b945de0b546b27</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>parseRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad0c754e9c64ad5daa1f0fc5a32b88e1f</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>floatToRationalCast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6caa281728674d5138df8907be61c00e</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>find</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aea35ee7a596e1d47d1ffbb553cfb688d</anchor>
      <arglist>(T(&amp;src)[N], const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>char(&amp;</type>
      <name>sizer</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a911990ae8d2f4f47554fb493fcf31e25</anchor>
      <arglist>(T(&amp;)[N]))[N]</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb5a1b7e0a14e8671707d5be16cbda24</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stringTo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94f8949fc0e956f239c26489e87c7001</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringTo&lt; bool &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5584318f5a20a6e35420d04d99c60bc3</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>IntType</type>
      <name>gcd</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a36dc44cabbd590c8083ed6eeab81c92d</anchor>
      <arglist>(IntType n, IntType m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tzfile.h</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>tzfile_8h</filename>
    <class kind="struct">tzhead</class>
  </compound>
  <compound kind="file">
    <name>utils.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>utils_8hpp</filename>
    <includes id="futils_8hpp" name="futils.hpp" local="no" imported="no">futils.hpp</includes>
    <class kind="class">Util::Getopt</class>
    <namespace>Util</namespace>
    <namespace>Util</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>dirname</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a2d5eb823f2910e392a04c146c54f9543</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>basename</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a0ec92119bdb7f1269693f1ee94d360ea</anchor>
      <arglist>(const std::string &amp;path, bool delsuffix=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>suffix</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>aa61f770944bfdb930ec8241c529887b8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>strtol</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>ae3760f32ad9aaad800e68917578c7220</anchor>
      <arglist>(const char *nptr, long &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>aac2efa1797a1bd038485be421ca80ca3</anchor>
      <arglist>(std::string &amp;text, const std::string &amp;searchText, const std::string &amp;replaceText)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>value_8hpp</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Value</class>
    <class kind="class">Exiv2::DataValue</class>
    <class kind="class">Exiv2::StringValueBase</class>
    <class kind="class">Exiv2::StringValue</class>
    <class kind="class">Exiv2::AsciiValue</class>
    <class kind="class">Exiv2::CommentValue</class>
    <class kind="struct">Exiv2::CommentValue::CharsetTable</class>
    <class kind="class">Exiv2::CommentValue::CharsetInfo</class>
    <class kind="class">Exiv2::XmpValue</class>
    <class kind="class">Exiv2::XmpTextValue</class>
    <class kind="class">Exiv2::XmpArrayValue</class>
    <class kind="class">Exiv2::LangAltValue</class>
    <class kind="class">Exiv2::DateValue</class>
    <class kind="struct">Exiv2::DateValue::Date</class>
    <class kind="class">Exiv2::TimeValue</class>
    <class kind="struct">Exiv2::TimeValue::Time</class>
    <class kind="class">Exiv2::ValueType</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>ValueType&lt; uint16_t &gt;</type>
      <name>UShortValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3f00bf58d6021c8c297f070d4a761651</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; uint32_t &gt;</type>
      <name>ULongValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab25aa284d2da55e64eba4e8ed0692149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; URational &gt;</type>
      <name>URationalValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a16f4de646ee869927f6246645b142626</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; int16_t &gt;</type>
      <name>ShortValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a67665147cbe2c7bd22af5aed7b7478ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; int32_t &gt;</type>
      <name>LongValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a47f8d64316779977c1869da776c26b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; Rational &gt;</type>
      <name>RationalValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab2a69ae1200f28233d89237bcefe952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; float &gt;</type>
      <name>FloatValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9260b475b138fdc65e6cba9c8c7b02a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; double &gt;</type>
      <name>DoubleValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afc09286d7a62c49ef04cb66c0427518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abe882054db13fc2f4f6f7e8e1261d982</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af0b83a1433a7a18fcf0a09b082714f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; uint16_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95d0279140f957f833817960b2ea5de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; uint32_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4030bbc9f931a5bb0e0e2b89e1b84c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; URational &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6b036b9adbec5f8ba12cd95802aa7e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; int16_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a22bef63bc2a51373348b1d42b8259bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; int32_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0bb321a38aa3b97b8c0cba97109454b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; Rational &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adbbc773aa4c41b1c6238f685ee68e115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; float &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aceb1098a652ad03ba7b5f3cf65e2fea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; double &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ade6101a28515811201e35333b3785029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4901857878dd5ae68afb2f6d075993fc</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a018b02b6bb14db1f15fdc51d18707166</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a81c794910171e9fc803354c1840d658d</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae2d0a94bfc9cfcbf0d7dbc70d6e2d818</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afecdbbe9c009a5f96a5f85ade05bd28e</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3d7355853dc6a1b516eafd9a398c1d5a</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a119c6400314a13c2f7dd5710adb734a1</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af92314aa203ce8a3d30aa52117496dd8</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae4e9a94996ef8406470309bb4cce9ac4</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a59acfb133eebbee93865f1cc07106bca</anchor>
      <arglist>(byte *buf, T t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac70293ab419ea7ebc377c2d7d939f1e2</anchor>
      <arglist>(byte *buf, uint16_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ad3813e1f2ee3b581a0a243532d6525</anchor>
      <arglist>(byte *buf, uint32_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4ca265f73d131bb3172a5e57e5e676f4</anchor>
      <arglist>(byte *buf, URational t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa5f4a2f6a321047f7c350be75f4d25f3</anchor>
      <arglist>(byte *buf, int16_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0daeaacc9cd9455c4f86fd6df8f6c800</anchor>
      <arglist>(byte *buf, int32_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a782c3e4630f01b71d37f71faebef4f11</anchor>
      <arglist>(byte *buf, Rational t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a626f54e7ff31e31350cba021eced7833</anchor>
      <arglist>(byte *buf, float t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a21cdfa085d78f41dcd91364c85fa0056</anchor>
      <arglist>(byte *buf, double t, ByteOrder byteOrder)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>version_8hpp</filename>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_MAJOR_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>a9d7ce36e8573ce08d0d653f6608f5e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_MINOR_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>a0c09c19387473b4cf4139bdab514df45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_PATCH_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>aa4be9dc2030a5a50ecc1461bfb24fa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_MAKE_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>a5d75ce8591ccba90183669df83a9b436</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>afc8ab8239dc3f8fc5e938fe54f48e5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_CHECK_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>ad0ca585932ba389302880cc482ea7d2e</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIV2_TEST_VERSION</name>
      <anchorfile>version_8hpp.html</anchorfile>
      <anchor>a94581cdd2feca9d041e0487c24328dd3</anchor>
      <arglist>(major, minor, patch)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>versionNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>add349cd7b6bc3b9566d00f8d41c08fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>versionString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af7598028a8f244d25959c8c6b6baa64f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>versionNumberHexString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad6e10034c300522d4f9ef232ba46a8ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8bc2141c839d15abc9f1473e8cc701fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testVersion</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad8d8f92acdf4d23b673225584405fba5</anchor>
      <arglist>(int major, int minor, int patch)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>xmp.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>xmp_8hpp</filename>
    <includes id="metadatum_8hpp" name="metadatum.hpp" local="yes" imported="no">metadatum.hpp</includes>
    <includes id="properties_8hpp" name="properties.hpp" local="yes" imported="no">properties.hpp</includes>
    <includes id="value_8hpp" name="value.hpp" local="yes" imported="no">value.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::Xmpdatum</class>
    <class kind="class">Exiv2::XmpData</class>
    <class kind="class">Exiv2::XmpParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::vector&lt; Xmpdatum &gt;</type>
      <name>XmpMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aef92d6c930cf939c01291a526e128677</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>xmpsidecar.hpp</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>xmpsidecar_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="basicio_8hpp" name="basicio.hpp" local="yes" imported="no">basicio.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">Exiv2::XmpSidecar</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newXmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1c23a300c7a8b7e87ff1a5c540b65738</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isXmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb5e294dbd9da3393aa3ceb205409660</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>xmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a04804ec8449a660a8014aa70b68098b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CmdIdAndString</name>
    <filename>structCmdIdAndString.html</filename>
    <member kind="variable">
      <type>CmdId</type>
      <name>cmdId_</name>
      <anchorfile>structCmdIdAndString.html</anchorfile>
      <anchor>aae9c97248475449a855a843b906361f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>cmdString_</name>
      <anchorfile>structCmdIdAndString.html</anchorfile>
      <anchor>afcf01c153fe8502ffa70d713e2685f8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ModifyCmd</name>
    <filename>structModifyCmd.html</filename>
    <member kind="function">
      <type></type>
      <name>ModifyCmd</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a1cba957cfcd4265e43cc33e7b163ba4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CmdId</type>
      <name>cmdId_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a6cca81a436a8675bdf3f375a899a1501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>aa908d1afc78e3c46caca1fd1dcf54f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MetadataId</type>
      <name>metadataId_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>ac969ff380e729e45be295c8c614ce6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Exiv2::TypeId</type>
      <name>typeId_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a4e266f7bd0051d317fc2f331ee44b9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>explicitType_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>ae91aab43f8c6ac7ef84f01b959b20e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a9519fc53399bb4fb35d6b235e44f6129</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>option</name>
    <filename>structoption.html</filename>
  </compound>
  <compound kind="class">
    <name>Params</name>
    <filename>classParams.html</filename>
    <base>Util::Getopt</base>
    <class kind="struct">Params::YodAdjust</class>
    <member kind="enumeration">
      <type></type>
      <name>PrintMode</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac490e98ae38d6ee481c4b3826ddbaceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pmSummary</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac490e98ae38d6ee481c4b3826ddbacebaecc9ea81563385c1105b7d7139778caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pmList</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac490e98ae38d6ee481c4b3826ddbacebaff88310a24853e6cf6a374f1956c480b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pmComment</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac490e98ae38d6ee481c4b3826ddbaceba47082d37beb0943578d265cfa174bc31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pmPreview</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac490e98ae38d6ee481c4b3826ddbaceba8c7e612460549a70b1c45068c3522402</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PrintItem</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prTag</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a06673c94e3ea92e6b72d184a71294caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prGroup</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733ac906a08b621a25ac2f0c91f8eff6b820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prKey</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733ae2932161e4d1f2bfdb226e4d10397507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prName</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a220084c91ec1567607276ff3533cebbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prLabel</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733abcf141eefa7a58eee325c88958750553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prType</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a3b455ab520f29e0d42fab329b8992804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prCount</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a8c2d238d9745589445e06e56bedb23d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prSize</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a93265bc8f4172577f401343de92d9d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prValue</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a9ed402852831d6932876319802eca4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prTrans</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a2fdf1396b480d64312f79b9a875eeb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prHex</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733a0378fe4df57c6d03f27e999bd3990b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CommonTarget</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctExif</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0a1f48aaba725039f8775ec2772e994539</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctIptc</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0a7bf5bd274b39ccd31c03e0e90fc2bda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctComment</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0adcbe67318850870d963f48b895353a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctThumb</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0af11d43166c2bfc0b12d9457b4c83270a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctXmp</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0a384389b9b2323619c0f4fb8b583a2d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctXmpSidecar</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0a5573c045a08e3c082a86ad99853fc7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ctPreview</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0a9e9f15f31e9b3c8e13eaa5394d0f89fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileExistsPolicy</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6904db5cbd6b193b2c1e981f984ba7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overwritePolicy</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6904db5cbd6b193b2c1e981f984ba7efadc948f699e3c3edaee0e9488bb750336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>renamePolicy</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6904db5cbd6b193b2c1e981f984ba7efa03fb9ed0f39730ef03f2794917ef42e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>askPolicy</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6904db5cbd6b193b2c1e981f984ba7efacc9ae307d5f3b06374b43268e5c4c210</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Yod</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a2bd54605371c167586b533e490bc2281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yodYear</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a2bd54605371c167586b533e490bc2281ad8b7d7982df49a9fc4c3a0cc0452110d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yodMonth</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a2bd54605371c167586b533e490bc2281ab3919beeb9c4adc8de691fc8e0c6af63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yodDay</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a2bd54605371c167586b533e490bc2281afbc41e550aada68c70a5f7c97a8dede2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CmdFiles</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3ee16d0a5bc89c6ae3da8420a677554e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CmdLines</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3c0613498451b5729e5b32232a4fa39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Files</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a4760eec97bf28489316873d58a3d9a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; int &gt;</type>
      <name>PreviewNumbers</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a9930450e878547651383abbb09542015</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Keys</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aba293fd5b22f701064f561b194649b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a9482455c09621321d8227bb8c26be28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getopt</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3ba82915162067d66a83b54bca05e241</anchor>
      <arglist>(int argc, char *const argv[])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>option</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a8d28eab356e60994d9bcf6c9c6ff1cdb</anchor>
      <arglist>(int opt, const std::string &amp;optarg, int optopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nonoption</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a00a1171555548b5903e52a12354309b4</anchor>
      <arglist>(const std::string &amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usage</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a89d66afdb73659019d84729d2baa9ef9</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>help</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ae91b9ae6d86aa58ca7d1bc1f7542f22c</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>version</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>abc4a0924dac9598073227b92ec3dde56</anchor>
      <arglist>(bool verbose=false, std::ostream &amp;os=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Getopt</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>ab376b23300a3609929509138b218f91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Getopt</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>a542727221bc93c62f074e9fdb5a3d220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getopt</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>ae0f18bdea00878d0e8a9e83370a0812e</anchor>
      <arglist>(int argc, char *const argv[], const std::string &amp;optstring)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>progname</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>ad9bfd88842108ef3506c3567bc63dec0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>errcnt</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>a504c4af3e01af5466459c03a90bafb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Params &amp;</type>
      <name>instance</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ae7e2ea302e1af9a646a57046850a6fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>help_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>af0c857dcd39182bef8922169a41a9672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>version_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a1f2b048e91a9290b0de832461ad17bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3780008fd167a26f450f86a3d245d0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>force_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a38830685f4165d9bf59e04b63e14f8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>binary_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>af0e20ffd358c9871b48b64911a7bae6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unknown_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6bee2b60bff0fd80302f88bebbe92d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>preserve_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a10b02f6993a205d55e371af9c99ec446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>timestamp_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a9fbb7b41344ee1bd376858c31a498a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>timestampOnly_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac6d6478fc3f9d1257d74981d039f1b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FileExistsPolicy</type>
      <name>fileExistsPolicy_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a976d918d69ed48713e078516c72195ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>adjust_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ad8ff1a0c3297b1660e9efc03ef397dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrintMode</type>
      <name>printMode_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a315817bd4a95fae7e0ce51cbc59d0b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>printItems_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a74076cfc604a52d6aa6ae72005171439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>printTags_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a5f4a5243c5c344d6b700f65155b8c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>action_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>af351636fd581fa9d5d7ba3bb214748b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>target_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a1b0727408a23ae79073ed23899422497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>adjustment_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a65fb87995fc95760133cc5c438f134ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YodAdjust</type>
      <name>yodAdjust_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>adad79422f55ee662b3d4dc6c2775eb18</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>format_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3291726d2fef924dbe75b9f590e2560c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>formatSet_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a57f44672ef8aa311c8645c003dd50a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CmdFiles</type>
      <name>cmdFiles_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a31a9c0fea1eb0f185fdd561bd6bde6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CmdLines</type>
      <name>cmdLines_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a75af62f6f0e1107e75a1aff721361f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModifyCmds</type>
      <name>modifyCmds_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac5dd29cd9646b79992fa6c3ce5038262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jpegComment_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a397459c7ed242ef7151d2a3652dda452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>directory_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a58f1ad0d7dc7f0d43867016694d0ba8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>suffix_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ab3ff04d4edef4e725866f6ca031f7a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Files</type>
      <name>files_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ae35b7af0ea7e9df2245c706783b7329e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PreviewNumbers</type>
      <name>previewNumbers_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3276c4224b059c6d0f11e6111b760516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keys</type>
      <name>keys_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aebdfcb7e2f17d4fd8c93951a9a82b73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>charset_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a04824ae0926eaa88f0b10ac52ebf24c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Params::YodAdjust</name>
    <filename>structParams_1_1YodAdjust.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>flag_</name>
      <anchorfile>structParams_1_1YodAdjust.html</anchorfile>
      <anchor>abb1c56f2beb6ce58b6acc144960dd6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>option_</name>
      <anchorfile>structParams_1_1YodAdjust.html</anchorfile>
      <anchor>a518153c045666829d4d6c48a812c9927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>adjustment_</name>
      <anchorfile>structParams_1_1YodAdjust.html</anchorfile>
      <anchor>a0077a961b108ad40b25a4904553816d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tzhead</name>
    <filename>structtzhead.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Action</name>
    <filename>namespaceAction.html</filename>
    <class kind="class">Action::Task</class>
    <class kind="class">Action::TaskFactory</class>
    <class kind="class">Action::Print</class>
    <class kind="class">Action::Rename</class>
    <class kind="class">Action::Adjust</class>
    <class kind="class">Action::Erase</class>
    <class kind="class">Action::Extract</class>
    <class kind="class">Action::Insert</class>
    <class kind="class">Action::Modify</class>
    <class kind="class">Action::FixIso</class>
    <class kind="class">Action::FixCom</class>
    <member kind="enumeration">
      <type></type>
      <name>TaskType</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a00e371804805d9146fbeabb9dc0ce5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>adjust</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a550cc83ceca7a758bad573c59da8fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>print</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2ada3cf2de066191d6eb61789496ec9290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rename</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a99fae985b4db97fe6e7063d401b02606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>erase</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a3f1769fa50b615eb5ce7be1ec1f3c5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>extract</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2ad5a27eebad5d285072f977fbf6c3d41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>insert</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a851cdc303b25649e04c7e341448e62a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>modify</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a6f9ae0390192b1ee0be518804a836926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fixiso</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2aa4971402cad661c807a4a2d551670230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fixcom</name>
      <anchorfile>namespaceAction.html</anchorfile>
      <anchor>a71af957ce05611bb128a23679e43b3d2a0248270c478063da1d7df206bb89e7be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Task</name>
    <filename>classAction_1_1Task.html</filename>
    <member kind="typedef">
      <type>std::auto_ptr&lt; Task &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classAction_1_1Task.html</anchorfile>
      <anchor>a76329f48810f8e555b233d9f699faadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>classAction_1_1Task.html</anchorfile>
      <anchor>abd561feab89d1045b45002932b8e93c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AutoPtr</type>
      <name>clone</name>
      <anchorfile>classAction_1_1Task.html</anchorfile>
      <anchor>a782c3b402c06625c7982cf4b668ffb4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Task.html</anchorfile>
      <anchor>aa10ce979cdedb8470d36413ec3a57bf2</anchor>
      <arglist>(const std::string &amp;path)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::TaskFactory</name>
    <filename>classAction_1_1TaskFactory.html</filename>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classAction_1_1TaskFactory.html</anchorfile>
      <anchor>aecfc2194d99c852300437ac2e96dc4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Task::AutoPtr</type>
      <name>create</name>
      <anchorfile>classAction_1_1TaskFactory.html</anchorfile>
      <anchor>a55ca06f5a6cf3dff1bb30fd5cad4286b</anchor>
      <arglist>(TaskType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerTask</name>
      <anchorfile>classAction_1_1TaskFactory.html</anchorfile>
      <anchor>a5ea557e379916fb47f0785022a8eab78</anchor>
      <arglist>(TaskType type, Task::AutoPtr task)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskFactory &amp;</type>
      <name>instance</name>
      <anchorfile>classAction_1_1TaskFactory.html</anchorfile>
      <anchor>a27c920b95806b9b18ebb58553d8b4fa4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Print</name>
    <filename>classAction_1_1Print.html</filename>
    <base>Action::Task</base>
    <member kind="typedef">
      <type>Exiv2::ExifData::const_iterator(*</type>
      <name>EasyAccessFct</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a1e873445763f31d06125e1167360497d</anchor>
      <arglist>)(const Exiv2::ExifData &amp;ed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>ac5b21e74a2c628d498c3103a42cc8e21</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printComment</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a05cf9ae1ba5de0d592f1e4bfea4d5e40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printPreviewList</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a9535c2bb898017531c7c85e6df5db96a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printSummary</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>ae75e2afef18405123890fd58be3b90aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printList</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a8ff7b158d0af021b17484872378856db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>grepTag</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a50f6004f19b742e3ee511bf81b055469</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printMetadata</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a528fc356b80db091148be4727b28a4a5</anchor>
      <arglist>(const Exiv2::Image *image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMetadatum</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>ae2cd7252a98bc92ba6dbaa17c2955e8f</anchor>
      <arglist>(const Exiv2::Metadatum &amp;md, const Exiv2::Image *image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printLabel</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>ae6a57a585884520b5d80285122863a21</anchor>
      <arglist>(const std::string &amp;label) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printTag</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>acd5af3af6b2d556b223cdf42ecd8095d</anchor>
      <arglist>(const Exiv2::ExifData &amp;exifData, const std::string &amp;key, const std::string &amp;label=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>printTag</name>
      <anchorfile>classAction_1_1Print.html</anchorfile>
      <anchor>a3c2c851b6cf37a2e4b3a626dbbd1abe6</anchor>
      <arglist>(const Exiv2::ExifData &amp;exifData, EasyAccessFct easyAccessFct, const std::string &amp;label) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Rename</name>
    <filename>classAction_1_1Rename.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Rename.html</anchorfile>
      <anchor>ab2b811ad1f5ae80e882b9b2b903dbfbb</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Adjust</name>
    <filename>classAction_1_1Adjust.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Adjust.html</anchorfile>
      <anchor>a790b327a3dc85d91fddf2684bd93130e</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Erase</name>
    <filename>classAction_1_1Erase.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Erase.html</anchorfile>
      <anchor>a958425244c6b3eba57d6d229b6eebf99</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eraseThumbnail</name>
      <anchorfile>classAction_1_1Erase.html</anchorfile>
      <anchor>aea43759f2a2ee86b40380834ba34d6fe</anchor>
      <arglist>(Exiv2::Image *image) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eraseExifData</name>
      <anchorfile>classAction_1_1Erase.html</anchorfile>
      <anchor>ad696d6e91fd37e0c61587bdadac36a54</anchor>
      <arglist>(Exiv2::Image *image) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eraseIptcData</name>
      <anchorfile>classAction_1_1Erase.html</anchorfile>
      <anchor>a7c2736fc319852955f44ae64ca84ec63</anchor>
      <arglist>(Exiv2::Image *image) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eraseComment</name>
      <anchorfile>classAction_1_1Erase.html</anchorfile>
      <anchor>a440ff50afeea2475514ce743907004c1</anchor>
      <arglist>(Exiv2::Image *image) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eraseXmpData</name>
      <anchorfile>classAction_1_1Erase.html</anchorfile>
      <anchor>ab83281ed24381883a4a1271205308bd9</anchor>
      <arglist>(Exiv2::Image *image) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Extract</name>
    <filename>classAction_1_1Extract.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Extract.html</anchorfile>
      <anchor>ae44bbae8df585733ae162ff978fb0454</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeThumbnail</name>
      <anchorfile>classAction_1_1Extract.html</anchorfile>
      <anchor>adb8ff97d1933f2dcab9fd6457cca6d03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writePreviews</name>
      <anchorfile>classAction_1_1Extract.html</anchorfile>
      <anchor>aaad8e01ae2d18aa6d67eb68b201f7321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePreviewFile</name>
      <anchorfile>classAction_1_1Extract.html</anchorfile>
      <anchor>a8d2822debb35ba23dacdd6c2835c2ce9</anchor>
      <arglist>(const Exiv2::PreviewImage &amp;pvImg, int num) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Insert</name>
    <filename>classAction_1_1Insert.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Insert.html</anchorfile>
      <anchor>a19b222d0125abbcaef71a9797940f40f</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertThumbnail</name>
      <anchorfile>classAction_1_1Insert.html</anchorfile>
      <anchor>af7540acf510da9bddf1fda7481efadb7</anchor>
      <arglist>(const std::string &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertXmpPacket</name>
      <anchorfile>classAction_1_1Insert.html</anchorfile>
      <anchor>aa11ea4476cec1a900e86ee63111ec919</anchor>
      <arglist>(const std::string &amp;path) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::Modify</name>
    <filename>classAction_1_1Modify.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1Modify.html</anchorfile>
      <anchor>aac2ae1f0a022ea315e722d406374231f</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>applyCommands</name>
      <anchorfile>classAction_1_1Modify.html</anchorfile>
      <anchor>a22b402e08bcacfc056faa680e0bfc9df</anchor>
      <arglist>(Exiv2::Image *pImage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::FixIso</name>
    <filename>classAction_1_1FixIso.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1FixIso.html</anchorfile>
      <anchor>a31127eb0657747906d338772b09edd81</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Action::FixCom</name>
    <filename>classAction_1_1FixCom.html</filename>
    <base>Action::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classAction_1_1FixCom.html</anchorfile>
      <anchor>a7830e2b278b1a356ccb6ccd82a8a7b2b</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2</name>
    <filename>namespaceExiv2.html</filename>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2::Internal</namespace>
    <class kind="class">Exiv2::Converter</class>
    <class kind="struct">Exiv2::MimeTypeList</class>
    <class kind="class">Exiv2::AsfVideo</class>
    <class kind="class">Exiv2::BasicIo</class>
    <class kind="class">Exiv2::IoCloser</class>
    <class kind="class">Exiv2::FileIo</class>
    <class kind="class">Exiv2::MemIo</class>
    <class kind="class">Exiv2::StdinIo</class>
    <class kind="class">Exiv2::BlockMap</class>
    <class kind="class">Exiv2::RemoteIo</class>
    <class kind="class">Exiv2::HttpIo</class>
    <class kind="class">Exiv2::CurlIo</class>
    <class kind="class">Exiv2::SshIo</class>
    <class kind="class">Exiv2::BmpImage</class>
    <class kind="class">Exiv2::Cr2Image</class>
    <class kind="class">Exiv2::Cr2Parser</class>
    <class kind="class">Exiv2::CrwImage</class>
    <class kind="class">Exiv2::CrwParser</class>
    <class kind="struct">Exiv2::RecordInfo</class>
    <class kind="struct">Exiv2::DataSet</class>
    <class kind="class">Exiv2::IptcDataSets</class>
    <class kind="class">Exiv2::IptcKey</class>
    <class kind="class">Exiv2::EpsImage</class>
    <class kind="class">Exiv2::LogMsg</class>
    <class kind="class">Exiv2::AnyError</class>
    <class kind="class">Exiv2::BasicError</class>
    <class kind="class">Exiv2::Exifdatum</class>
    <class kind="class">Exiv2::ExifThumbC</class>
    <class kind="class">Exiv2::ExifThumb</class>
    <class kind="class">Exiv2::ExifData</class>
    <class kind="class">Exiv2::ExifParser</class>
    <class kind="class">Exiv2::Uri</class>
    <class kind="class">Exiv2::GifImage</class>
    <class kind="struct">Exiv2::NativePreview</class>
    <class kind="class">Exiv2::Image</class>
    <class kind="class">Exiv2::ImageFactory</class>
    <class kind="class">Exiv2::Iptcdatum</class>
    <class kind="class">Exiv2::IptcData</class>
    <class kind="class">Exiv2::IptcParser</class>
    <class kind="class">Exiv2::Jp2Image</class>
    <class kind="struct">Exiv2::Photoshop</class>
    <class kind="class">Exiv2::JpegBase</class>
    <class kind="class">Exiv2::JpegImage</class>
    <class kind="class">Exiv2::ExvImage</class>
    <class kind="struct">Exiv2::MatroskaTags</class>
    <class kind="class">Exiv2::MatroskaVideo</class>
    <class kind="class">Exiv2::Key</class>
    <class kind="class">Exiv2::Metadatum</class>
    <class kind="class">Exiv2::MrwImage</class>
    <class kind="class">Exiv2::OrfImage</class>
    <class kind="class">Exiv2::OrfParser</class>
    <class kind="class">Exiv2::PgfImage</class>
    <class kind="class">Exiv2::PngImage</class>
    <class kind="struct">Exiv2::PreviewProperties</class>
    <class kind="class">Exiv2::PreviewImage</class>
    <class kind="class">Exiv2::PreviewManager</class>
    <class kind="struct">Exiv2::XmpPropertyInfo</class>
    <class kind="struct">Exiv2::XmpNsInfo</class>
    <class kind="class">Exiv2::XmpProperties</class>
    <class kind="class">Exiv2::XmpKey</class>
    <class kind="class">Exiv2::PsdImage</class>
    <class kind="class">Exiv2::QuickTimeVideo</class>
    <class kind="class">Exiv2::RafImage</class>
    <class kind="class">Exiv2::RiffVideo</class>
    <class kind="class">Exiv2::Rw2Image</class>
    <class kind="class">Exiv2::Rw2Parser</class>
    <class kind="class">Exiv2::SSH</class>
    <class kind="struct">Exiv2::GroupInfo</class>
    <class kind="struct">Exiv2::TagInfo</class>
    <class kind="class">Exiv2::ExifTags</class>
    <class kind="class">Exiv2::ExifKey</class>
    <class kind="class">Exiv2::TgaImage</class>
    <class kind="class">Exiv2::TiffImage</class>
    <class kind="class">Exiv2::TiffParser</class>
    <class kind="class">Exiv2::TypeInfo</class>
    <class kind="struct">Exiv2::DataBufRef</class>
    <class kind="class">Exiv2::DataBuf</class>
    <class kind="class">Exiv2::Value</class>
    <class kind="class">Exiv2::DataValue</class>
    <class kind="class">Exiv2::StringValueBase</class>
    <class kind="class">Exiv2::StringValue</class>
    <class kind="class">Exiv2::AsciiValue</class>
    <class kind="class">Exiv2::CommentValue</class>
    <class kind="class">Exiv2::XmpValue</class>
    <class kind="class">Exiv2::XmpTextValue</class>
    <class kind="class">Exiv2::XmpArrayValue</class>
    <class kind="class">Exiv2::LangAltValue</class>
    <class kind="class">Exiv2::DateValue</class>
    <class kind="class">Exiv2::TimeValue</class>
    <class kind="class">Exiv2::ValueType</class>
    <class kind="class">Exiv2::Xmpdatum</class>
    <class kind="class">Exiv2::XmpData</class>
    <class kind="class">Exiv2::XmpParser</class>
    <class kind="class">Exiv2::XmpSidecar</class>
    <member kind="typedef">
      <type>BasicError&lt; char &gt;</type>
      <name>Error</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>accd3e49cafe9db52c1e0e6f648753cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Exifdatum &gt;</type>
      <name>ExifMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a93a10b1ca722d594efdf5472464c8ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NativePreview &gt;</type>
      <name>NativePreviewList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af72182be3e51f30ef8cb55a86dfa8e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::AutoPtr(*</type>
      <name>NewInstanceFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac744f9ab24f7fd0fb9b46b156731aa5a</anchor>
      <arglist>)(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>IsThisTypeFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afdcc4a2285707a4efe2defe8806c3c67</anchor>
      <arglist>)(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Iptcdatum &gt;</type>
      <name>IptcMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5caa9cbded318bf7d22a2d219c3d45f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>PreviewId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7cf3033d88acbcf7a808946868f0b239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PreviewProperties &gt;</type>
      <name>PreviewPropertiesList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad46a7838fd620360c753a64922b0d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ostream &amp;(*</type>
      <name>PrintFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a66eab57168acb008b5974a414144e1d2</anchor>
      <arglist>)(std::ostream &amp;, const Value &amp;, const ExifData *pExifData)</arglist>
    </member>
    <member kind="typedef">
      <type>const TagInfo *(*</type>
      <name>TagListFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a41e505a05c778aa26cddfc15078563e7</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>byte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a16f60a5bd4207fe155f6cf93a15efa72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; uint32_t, uint32_t &gt;</type>
      <name>URational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aedcaa9af0563cbd00a19b040d5aa7a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int32_t, int32_t &gt;</type>
      <name>Rational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95756f3f7fa19103f83addf5fa088a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; byte &gt;</type>
      <name>Blob</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e7b9a2ef47caec919b15f1ae6ff4872</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; uint16_t &gt;</type>
      <name>UShortValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3f00bf58d6021c8c297f070d4a761651</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; uint32_t &gt;</type>
      <name>ULongValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab25aa284d2da55e64eba4e8ed0692149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; URational &gt;</type>
      <name>URationalValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a16f4de646ee869927f6246645b142626</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; int16_t &gt;</type>
      <name>ShortValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a67665147cbe2c7bd22af5aed7b7478ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; int32_t &gt;</type>
      <name>LongValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a47f8d64316779977c1869da776c26b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; Rational &gt;</type>
      <name>RationalValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab2a69ae1200f28233d89237bcefe952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; float &gt;</type>
      <name>FloatValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9260b475b138fdc65e6cba9c8c7b02a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; double &gt;</type>
      <name>DoubleValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afc09286d7a62c49ef04cb66c0427518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Xmpdatum &gt;</type>
      <name>XmpMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aef92d6c930cf939c01291a526e128677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Protocol</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887a9f70229f89696a35c029e3859e685891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pHttp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887a59043ac1a00ac85629987fcf7d51d555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pFtp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887add4fffedec864225f99602dc54ee01d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pHttps</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887a1c4df51884fdbcb10899673fe1547cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pSftp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887aedbefab0868b805866ea79bb93ea841b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pSsh</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887ab68948a4f92c647ab3bfdf8034a76588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>XmpCategory</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpInternal</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489a0671779060fa65d354b2dc8b95a54a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpExternal</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489a153d389241c1430c23db408427939eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidByteOrder</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6aee908b0d783292eddcbcd2390fdaeb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>littleEndian</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6ab13624c934b4f2bb59900b9541bc6f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bigEndian</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6ab2d85247b1ea0f66540c168c0be2f436</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>asciiBytes</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6a47bfe918cad5b0c53b6a59915cfb4216</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WriteMethod</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wmIntrusive</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7ad95858b598d9582e5616f8fbc6ae0b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wmNonIntrusive</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7afb9dc8562ec0528b92edafa764b7fe59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MetadataId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdNone</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaac3cc81b789450ef744e4f267e8d8c90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaaac8fa1e88366f22f6976d7a2ec33a228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaa0c0a4622c5b3e0768d48eb5738d81e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdComment</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaa5d6fd8733adf30c37d048bb4705b6cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mdXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffcaa183c5af0dcbfec829d00f44396d04c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccessMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amNone</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16caa1b1080b2db63fecc8eb9c8fdc7c7cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amRead</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16ca7b70a0eaac47ff5e0574ff76c114a51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amWrite</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16cae6a6b7728f1bd4b3048f159da003f94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>amReadWrite</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16cad8a81eaa1fe46804eca3a13f9591af00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedByte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca6abd8e6e48dddae9bac03019ae907795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>asciiString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca773cf6dde5caaabb3dcf9fb161fa7dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0329efdda8becff3ecf89bfbc816f72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca3b506c0729276e4de3a0ab4d9b2226bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cae450f64413c928b527cfdd73129d6606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedByte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca717f7d50dd484167359361d2c560f83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>undefined</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450caa044ece6f004f519dce91f57319bb6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca4a46f8aa5e64d33468602515f6255b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca501fdf1b61472bff3b4da19b956eabda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0d777a3a2542fbff07ed29563167b3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cabcc0eb22efc41f32ba573c18731b4928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffDouble</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca9b4d2fa208df5c86d24f7d7c41bd09a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffIfd</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cae9896f64a72a68e176f02c1880b19681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>string</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca2d79fb07c9ec891f281968dad43c1e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>date</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0c347d8ddbbad9440f9bb6db8a06fa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>time</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca8526caf002a100bd730312d45808f1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>comment</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca98944819f3c9921109af5f0a39fcfa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directory</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cafc7cbf89ae7c64de808dc3611b2a880f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpText</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca77cea60f60ef2c6f0f986137c5404c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpAlt</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca627dda12626324231bb87883d8efc5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpBag</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450caa5e7700549d4b079db70605d945447af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpSeq</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca969c20e44455272599e3a273471546e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>langAlt</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca52dce1d022dd8927bc651d2e51dc1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidTypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cafc75de7290b703a810102c8a003fc25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastTypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca1d087498b678aa18f77ab6b5c1812921</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newAsfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a11290f0338e59bd5b96da1870e493c5c</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAsfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6344a9183a9acb24b8c2bcf44fad8228</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>readFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5c87ddedd63e9ab9aa6f295cda32aebd</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>writeFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a65c0189894e7563da9a932e9c826e761</anchor>
      <arglist>(const DataBuf &amp;buf, const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ReplaceStringInPlace</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a548778abb2cec5c7cfc18d38355c0a0f</anchor>
      <arglist>(std::string subject, const std::string &amp;search, const std::string &amp;replace)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newBmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6cb5f6b3d4cf6c6353bf756993dad5b</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a82b3160e1cdce93c1f30c7717d04a4da</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4194fe13abc45d8b938e0c53eae1ae0e</anchor>
      <arglist>(const ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af299945c10261453f13fc9978dc65f9f</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3aa3a7c410d59611dd8aa929aae0c71b</anchor>
      <arglist>(const XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2821575e2fa7ec58e22af507ea64ce58</anchor>
      <arglist>(XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af6e13fe5c81e44fddbffb3d47baeb23a</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1037a2e2a1e4d75ba7456945d7fa417d</anchor>
      <arglist>(const IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab37063afa8fa710d4c2ad6d266f5230d</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aec16e78c8f6184811c8b031abd0b8e74</anchor>
      <arglist>(const XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>add907b8334920b392291afc75f921546</anchor>
      <arglist>(XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertStringCharset</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aaa666fe01fbcfa969b3e2c648bcf9ae8</anchor>
      <arglist>(std::string &amp;str, const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newCr2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afd05a6d1d7b2db79c38d159b4d6c67a6</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCr2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9762d2176964085e569e969c282cdda9</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newCrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abee37e251aa0717d1cb8671ff446c705</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a72ae59b54c2052cc1bc6e08880fec280</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8603ccd9a3e9a0ccac6662d363b9ed1f</anchor>
      <arglist>(std::ostream &amp;os, const DataSet &amp;dataSet)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>orientation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ade21436d5ab749937db1de309a880cf3</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>isoSpeed</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8d233d6897570fcd74607c1b545f0039</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>flashBias</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab39a59a35dd77f48149f56c8cb4385ba</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>exposureMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa9c527d75a6c5d9c2efa9a20e6f60ef4</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>sceneMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afa75576b2200b04d726018200257e835</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>macroMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af91ad8038bef1a6d94413c6820396a56</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>imageQuality</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a14e478a9d6f92c9fc33c8e1fdc050230</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>whiteBalance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a13e73621e478d4520fdcf601a1e10593</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>lensName</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a00abed868b1cd46fdeb8ab331af246cd</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>saturation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a63a3451abf49f4f893ed25a70d958117</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>sharpness</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac05ea2a3dea415b5cc2cd64133890947</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>contrast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9e5b5cc3546863a59f0bc5ec2ad6890d</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>sceneCaptureType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a155a970a54be9984c7c081fb3b4cb169</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>meteringMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2c515ec0b9856491c76690282a3b9153</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>make</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3729578ba37d5e96f1aca75e9b9c0570</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>model</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f59ed4d80ac644965de6e550c2fe52d</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac7e474d2eeb791247de17719fc34554c</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>fNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a56e9152260bbca556dc85306eb2edffe</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>subjectDistance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1983a22f694ee672968665fa7e4a24ce</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>serialNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a73382f42b15c8b22c34284a517a8f3b5</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>focalLength</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af7758be6d5c4a9a3d8d1cd784d3d0660</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>ExifData::const_iterator</type>
      <name>afPoint</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0617f292cafcfb4c9c2d1d63b7fd7b85</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newEpsInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a062c888a872783b52be5d48a32e9cffb</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEpsType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a97ee22daaeaeae27429093f977fe8258</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errMsg</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a91ac628011b2304dd3c6fa65e7b52051</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function">
      <type>Exiv2::Exifdatum &amp;</type>
      <name>setValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5f1576dd000687193c9ebbb672eb7164</anchor>
      <arglist>(Exiv2::Exifdatum &amp;exifDatum, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>base64encode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a41c00f4c281884b7e6adcb32fbf6789b</anchor>
      <arglist>(const void *data_buf, size_t dataLength, char *result, size_t resultSize)</arglist>
    </member>
    <member kind="function">
      <type>Protocol</type>
      <name>fileProtocol</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8fafba026ab8971599f2c2dc7bb4072f</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileExists</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0432df7d3995fa4d2fbc0b3f90265c59</anchor>
      <arglist>(const std::string &amp;path, bool ct=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strError</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a086796c27d01f4618a158a0e56905f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newGifInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a34934ab2ebed29730808fcccc6749765</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGifType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae2b8b0eceeb28acf1bc2a78b18acbfc4</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a717a4bb844932a834dd109ce2554a2a4</anchor>
      <arglist>(Exiv2::Blob &amp;blob, const byte *buf, uint32_t len)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpIptcdataByRecord</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a17b52d6f278c7d098731d0a1d7aa4296</anchor>
      <arglist>(const Iptcdatum &amp;lhs, const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newJp2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a006be3869186bf1447fa475bdb98f8b3</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJp2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1061485827f94c46921d3e1ceda8ba29</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newJpegInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac9e504de88a8ce92e13f435aefce7f64</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJpegType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a79d7543e864557d19e67b91bb1843962</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newExvInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac06d892514a860aa84329826395835af</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExvType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae0d08d5f85e7ce057e6ac5c0e5d1d95a</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newMkvInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac9885cab607b137052dbb18dbebe2e6e</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMkvType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb9acb098a113c94f4f7f02f930aadca</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpMetadataByTag</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afe183940aa386c68b9bb269f3f69b352</anchor>
      <arglist>(const Metadatum &amp;lhs, const Metadatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpMetadataByKey</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab6a6b7174667cb72370cc0a52ad7004d</anchor>
      <arglist>(const Metadatum &amp;lhs, const Metadatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newMrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1bb3a02cde292ce110f77ffdc692c0ee</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a49bd48d4c5759f607e7ddaa7a7ce3d3f</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newOrfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a51eca2f83f7d21b63e7bd7b1ee9c2e16</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a87cc9dd7270c22d05d95bf695f21d796</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newPgfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a12242bf2733a1c9c88abb7a4318ee3db</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPgfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>addb4cc95dc380c767efbe94584b4df6a</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abacaa0596e9c197b99985ca68174a4c0</anchor>
      <arglist>(std::ostream &amp;os, const XmpPropertyInfo &amp;propertyInfo)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newPsdInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a694f2f16c08f41217d0f1b3e0a80cef6</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPsdType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae1922df87be2eb2db5ca64ce1152cd9d</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newQTimeInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a758f9e92d60d96920e5ce24c136e64d1</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQTimeType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af437212d7fe25ccddc931abb5efcbcdc</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newRafInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5187e744341921e7c06b8ac494d11570</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRafType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8f90949be425b2396c454eb9084bebbf</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newRiffInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a233497b39ee59e7a7bd4b4e7e3829491</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRiffType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9bd5bbc2d1c8a279955910f5674114c1</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newRw2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a76129504f3c4a48a9c3eaeb823d302e1</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRw2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a31dc6a983c786692a5a6b100ae58cde3</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9708095cd8ecc9e6b8134fa7b85ad8cf</anchor>
      <arglist>(std::ostream &amp;os, const TagInfo &amp;ti)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newTgaInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a43b242299ac95dff1a18759ebed87b55</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTgaType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8e28192e762ae5664c12afe6677a2593</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newTiffInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2e0cd9bda3298bc22611cb18f672bb92</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTiffType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6f5d5b19b7e5fcd822a1d8ef9eed4ca9</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adc8f28fe68335865a3578c882a168e63</anchor>
      <arglist>(std::ostream &amp;os, const Rational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a24049f1e33ba6a1de401cc6c522e1bd4</anchor>
      <arglist>(std::istream &amp;is, Rational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4c6c1f6ff6967a7ab3dccfdd21f8db71</anchor>
      <arglist>(std::ostream &amp;os, const URational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5f1805e406e626f02bad01d20eb9421d</anchor>
      <arglist>(std::istream &amp;is, URational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getUShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aba0bbd0d82b12d40d7ff78e54b91d9eb</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getULong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ac010ed4daa22c05b792ade639cda07</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>getURational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abd349c39a93e397914cef0e8c511d147</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a034a977f27f32a817d6846160f3723c9</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aaaa13407701ef70800058a760e8be52e</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>getRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4f99d0bb9a8a2d8ae0b85e2a556325d4</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a222c7a2b5ba8f0f195a52231c83fe1eb</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aca1645cade15ccc7979d93c5011b1305</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>us2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a553bcd11ca439ab9f6783ee594e85bd6</anchor>
      <arglist>(byte *buf, uint16_t s, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>ul2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac40b07808b158c7d196d12d55c677338</anchor>
      <arglist>(byte *buf, uint32_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>ur2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abe4ad1141383dad6aa8bf889c20540cc</anchor>
      <arglist>(byte *buf, URational l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>s2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a23477f61cedcffab169f291d8f9bf635</anchor>
      <arglist>(byte *buf, int16_t s, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>l2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adf5602b3f96554d7eb6fc778abebd8c0</anchor>
      <arglist>(byte *buf, int32_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>r2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae626dcc00cb44f8f00acdbac2da00439</anchor>
      <arglist>(byte *buf, Rational l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>f2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0ce18941bef037f98fe7c119b24da2fa</anchor>
      <arglist>(byte *buf, float f, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>d2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7b84e90717b7fdffc136cff7a99976df</anchor>
      <arglist>(byte *buf, double d, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hexdump</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95c7b79205556288e3c967798a4c5c41</anchor>
      <arglist>(std::ostream &amp;os, const byte *buf, long len, long offset=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acaf961ae77342e4c754b981c51036948</anchor>
      <arglist>(const std::string &amp;str, size_t size=0, const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exifTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abc72b70889b5efd94e92446fc37ae379</anchor>
      <arglist>(const char *buf, struct tm *tm)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>exvGettext</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2b13ac9cb8855334ebe6b4b833e9e311</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringTo&lt; bool &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5584318f5a20a6e35420d04d99c60bc3</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>parseLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1409855f9f68490e5d791b1bffc6a708</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>parseFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a61c3bf069dab26d8a8b945de0b546b27</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>parseRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad0c754e9c64ad5daa1f0fc5a32b88e1f</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>floatToRationalCast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6caa281728674d5138df8907be61c00e</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>versionNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>add349cd7b6bc3b9566d00f8d41c08fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>versionString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af7598028a8f244d25959c8c6b6baa64f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>versionNumberHexString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad6e10034c300522d4f9ef232ba46a8ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8bc2141c839d15abc9f1473e8cc701fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testVersion</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad8d8f92acdf4d23b673225584405fba5</anchor>
      <arglist>(int major, int minor, int patch)</arglist>
    </member>
    <member kind="function">
      <type>Image::AutoPtr</type>
      <name>newXmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1c23a300c7a8b7e87ff1a5c540b65738</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isXmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb5e294dbd9da3393aa3ceb205409660</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API size_t</type>
      <name>curlWriter</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2dc468104de8f48f9324a9c592eb3bdb</anchor>
      <arglist>(char *data, size_t size, size_t nmemb, std::string *writerData)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; charT &gt;</type>
      <name>toBasicString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5b5e630a62be27d591d7d6a11464983b</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a984441dbc42706388541913499c48384</anchor>
      <arglist>(std::ostream &amp;os, const AnyError &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa225826fb028de2941da4230b51dfb95</anchor>
      <arglist>(std::ostream &amp;os, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8525be11fc92fcb2bd88e886daa1959a</anchor>
      <arglist>(std::ostream &amp;os, const Metadatum &amp;md)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::AutoPtr</type>
      <name>newPngInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3222339b57a62d96c8ac5b38e2a7ccf1</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isPngType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa8f35a1ff80fbea87aec202f8ddb69c7</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>find</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aea35ee7a596e1d47d1ffbb553cfb688d</anchor>
      <arglist>(T(&amp;src)[N], const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>char(&amp;</type>
      <name>sizer</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a911990ae8d2f4f47554fb493fcf31e25</anchor>
      <arglist>(T(&amp;)[N]))[N]</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb5a1b7e0a14e8671707d5be16cbda24</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stringTo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94f8949fc0e956f239c26489e87c7001</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>IntType</type>
      <name>gcd</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a36dc44cabbd590c8083ed6eeab81c92d</anchor>
      <arglist>(IntType n, IntType m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abe882054db13fc2f4f6f7e8e1261d982</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af0b83a1433a7a18fcf0a09b082714f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; uint16_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95d0279140f957f833817960b2ea5de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; uint32_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4030bbc9f931a5bb0e0e2b89e1b84c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; URational &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6b036b9adbec5f8ba12cd95802aa7e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; int16_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a22bef63bc2a51373348b1d42b8259bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; int32_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0bb321a38aa3b97b8c0cba97109454b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; Rational &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adbbc773aa4c41b1c6238f685ee68e115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; float &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aceb1098a652ad03ba7b5f3cf65e2fea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; double &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ade6101a28515811201e35333b3785029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4901857878dd5ae68afb2f6d075993fc</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a018b02b6bb14db1f15fdc51d18707166</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a81c794910171e9fc803354c1840d658d</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae2d0a94bfc9cfcbf0d7dbc70d6e2d818</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afecdbbe9c009a5f96a5f85ade05bd28e</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3d7355853dc6a1b516eafd9a398c1d5a</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a119c6400314a13c2f7dd5710adb734a1</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af92314aa203ce8a3d30aa52117496dd8</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae4e9a94996ef8406470309bb4cce9ac4</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a59acfb133eebbee93865f1cc07106bca</anchor>
      <arglist>(byte *buf, T t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac70293ab419ea7ebc377c2d7d939f1e2</anchor>
      <arglist>(byte *buf, uint16_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ad3813e1f2ee3b581a0a243532d6525</anchor>
      <arglist>(byte *buf, uint32_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4ca265f73d131bb3172a5e57e5e676f4</anchor>
      <arglist>(byte *buf, URational t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa5f4a2f6a321047f7c350be75f4d25f3</anchor>
      <arglist>(byte *buf, int16_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0daeaacc9cd9455c4f86fd6df8f6c800</anchor>
      <arglist>(byte *buf, int32_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a782c3e4630f01b71d37f71faebef4f11</anchor>
      <arglist>(byte *buf, Rational t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a626f54e7ff31e31350cba021eced7833</anchor>
      <arglist>(byte *buf, float t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a21cdfa085d78f41dcd91364c85fa0056</anchor>
      <arglist>(byte *buf, double t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="variable">
      <type>const GroupInfo</type>
      <name>groupInfo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afa59b81ff2fdb13ee24f5b3a479454c2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const SectionInfo</type>
      <name>sectionInfo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af4879bfd704a610f3fe65e1476df6609</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>MimeTypeList</type>
      <name>mimeTypeList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adda2ec7f698d8dbf322a6152945682ce</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Converter</name>
    <filename>classExiv2_1_1Converter.html</filename>
    <class kind="struct">Exiv2::Converter::Conversion</class>
    <member kind="typedef">
      <type>void(Converter::*</type>
      <name>ConvertFct</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a0396506c13738c31cba4a4b5bed68666</anchor>
      <arglist>)(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a91728580444ea3f734fad7db93283260</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2a3bf312c9069eb7de7066f79ea94ad3</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvToXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a9ff54c47c6a6446bbef4d79e8d4f8060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvFromXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ae5963fe9f0bdd8382de2ce2d50f16d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErase</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a37f93ea473239af2d73be3af50ef2345</anchor>
      <arglist>(bool onoff=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverwrite</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>abac9285398034aacce1531ce6272db63</anchor>
      <arglist>(bool onoff=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ae982c003ead2d1e7e27a6a7d8401ed30</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifComment</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a759b21bb838f846d904c6ce44cce23d6</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifArray</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a3238a397b14b749e274acd38b94c1509</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifDate</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2840545129d3fa365a98ad966215b364</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2859d78ddf45ce2be0f16881ffb2bad9</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifGPSVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a4898bc4a39cee1eedbea7588c4f8b79f</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifFlash</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>afbaf2c45e8b57430c674caed8edde085</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifGPSCoord</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a862d9877fe263e1924959dd4d7e4d32e</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a01fa347250b39e24418e31203cee0a06</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpComment</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>aeda35aa57f60caf68d81603b0c33fe2e</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpArray</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a6c4fe48b02bd5f036a8ce7e1d41a2ea3</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpDate</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a71becb0e5b8f267cc96d9b7f5312c4fc</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a72ec87bd8cd8b0342e199bf144e450c5</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpGPSVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a8c155519d2d5371a7cb3a843828694be</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpFlash</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a3fa6261ccd2aad114811f336da7d65a8</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpGPSCoord</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ab919aa805d435f5da8119fb5ab7272a3</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvIptcValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a214d53f25cf6cedc9e5b18dde9251346</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpValueToIptc</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>aaa7c55b0481e6469d3195b0f99f70d5d</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeExifDigest</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a058c361345d9bac48d392a3c51a184af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a7c2991c94c32b976bf92568a7844bb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a7f94b10c0f08fbe66d66710b67542646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overwrite</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a1e47cac615529ddc882a63c373bf61ac</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Converter::Conversion</name>
    <filename>structExiv2_1_1Converter_1_1Conversion.html</filename>
    <member kind="variable">
      <type>MetadataId</type>
      <name>metadataId_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a2cd7f3ed76954bbd4fe53d7ba47293d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>key1_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a5f660c9f86bfcb4d98aee91c99d39f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>key2_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a12f6c777e40374684e6bda32fcfe55c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConvertFct</type>
      <name>key1ToKey2_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a3e3d9d946dc019807c204144118d7684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConvertFct</type>
      <name>key2ToKey1_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>aaa817fb7dd83e72265d6c545fed61014</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::MimeTypeList</name>
    <filename>structExiv2_1_1MimeTypeList.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1MimeTypeList.html</anchorfile>
      <anchor>a7502cd3e9aed09df0932059f8cf83b9c</anchor>
      <arglist>(int compression) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>compression_</name>
      <anchorfile>structExiv2_1_1MimeTypeList.html</anchorfile>
      <anchor>a41c0c1212ff6e858c2db6fff3c987bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>mimeType_</name>
      <anchorfile>structExiv2_1_1MimeTypeList.html</anchorfile>
      <anchor>a1e58604286304921b4ceb6a834bbabf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::AsfVideo</name>
    <filename>classExiv2_1_1AsfVideo.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>AsfVideo</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>acd2e1b961f0f2abfa207ba41ca414687</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>a6b1f9bd6dc65f99edd2595bccf87e90e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>ac9e9471001bc8feb68d9b2f5c7878812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>aedc684c1044d5038d08fbdbd767cec94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ae11f75b7ba9228b3aec7f6dccc5ea081</anchor>
      <arglist>(int imageType, uint16_t supportedMetadata, BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8320cf3a0e02b4996ccf11b88afb9d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a50787e6b2b88ab4844ed09a6d32d91cd</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearExifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a67cf025df937da851e1f587489c5e6a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a19bfac3c9245ca5c4c471e241bd33606</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearIptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8bb36c698ce3ee89654fe8177c8e962a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8c6aff4701c23158c2d79598c26c18ad</anchor>
      <arglist>(const std::string &amp;xmpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearXmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a797b7909cb55019289f5f1a7fa9086cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5fff5a898432265e656457ac8f7f666b</anchor>
      <arglist>(const XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearXmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a910871299f87e8c075e5c977a37dd943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>af3c4746e941aa39bb7762b7b7da108a8</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearComment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a62891a2c703c2c546e22605d01b1fdab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5374f217a84fadfe4ba97bebf00ae2b3</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afd9153e3fc83f31b4d63b56d530688cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExifData &amp;</type>
      <name>exifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>acc0dd47f87be88458e1c6e18b463a536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IptcData &amp;</type>
      <name>iptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ac68e4cb2fc5eb685a56ea06333fe0e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual XmpData &amp;</type>
      <name>xmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aade24695d8ac332f0402dcb10d601382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>xmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a356eca19190afb6c6cc2fa02aa936cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeXmpFromPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ab64199a4be87a12f81bd111ce4019dfc</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>af1533e0b8d24c49974d0dc59911c330a</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a4d616c94b3d8129a3abcbec2c200feda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a057cb663d5666ca5c0515a3957d15102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a0b13d0604218421d8af6e834031d9f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ac3068eecea5394c4c66ae818eaa0eb81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ExifData &amp;</type>
      <name>exifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a7a554e1ca9eefe79b7aed83c3ac6c52f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IptcData &amp;</type>
      <name>iptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ae27538d548dfd0a06dd6b316bbd16c50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const XmpData &amp;</type>
      <name>xmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9d15c63b1719b6fa6c96fbde3e0cc965</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>comment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aab844df269923ff5ea2b0b5e55e1ea2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>xmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a32198b3933c3e9637eea68b565b17749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BasicIo &amp;</type>
      <name>io</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aefb1351187c3d68cb2f6e45d575ef59d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AccessMode</type>
      <name>checkMode</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aa50060fa3ee369575b26468021858586</anchor>
      <arglist>(MetadataId metadataId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a6faaacb514314528d2a3884a40e6ecc1</anchor>
      <arglist>(MetadataId metadataId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeXmpFromPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ad556f9ffa960f88d80b53cba3421af21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NativePreviewList &amp;</type>
      <name>nativePreviews</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a0ed3ba4bba3428938d35cbc079b902db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decodeBlock</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>ab2b7a6f061b76dac6ce80f3c4de016fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tagDecoder</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>ace31fbced60cec67b999863b8d8cc658</anchor>
      <arglist>(const TagVocabulary *tv, uint64_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fileProperties</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>af240b3ac1ad8234e3fa4d3f24a3770b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>streamProperties</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>aca3525cac4bcfe1e26267cf5974b24f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>codecList</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>ac131d4114cea3e519b7515fc343f26fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>contentDescription</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>aa58d1be6292d01d52f460ba3f2973e62</anchor>
      <arglist>(uint64_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extendedStreamProperties</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>a411954b9765f6f8a250031713e302f72</anchor>
      <arglist>(uint64_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>headerExtension</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>a379cc56fcfbd53da8a8b8f2261700ef9</anchor>
      <arglist>(uint64_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>metadataHandler</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>a0123d3a87ca087363335f6f11951b98d</anchor>
      <arglist>(int meta=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>aspectRatio</name>
      <anchorfile>classExiv2_1_1AsfVideo.html</anchorfile>
      <anchor>a6bd9844b3814f3d9df03b4f738761388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; Image &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a89ad3ffe7a4e8a943d267d77843415fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BasicIo::AutoPtr</type>
      <name>io_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a441d551a7d353e6f440748a486e004e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExifData</type>
      <name>exifData_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aa1a8a72f1faf1b49a980a5050be8f8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IptcData</type>
      <name>iptcData_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ac613777e529af8d8c421cf0138234d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmpData</type>
      <name>xmpData_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afd748b186fc5d731e7943ab38b718168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>comment_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ad908536e7406677e193f6fa75e53d3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>xmpPacket_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ab62dc4efdf1c3ffe94443588e7d7b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pixelWidth_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a114180b5449669339b0cbe3f4078a915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pixelHeight_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a093efd59b753173a50a5c3a2ab881878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NativePreviewList</type>
      <name>nativePreviews_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a7fe1e6f41e5e2e99ce1560f0b5ad36b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BasicIo</name>
    <filename>classExiv2_1_1BasicIo.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Position</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1d23c3bf7618f2ee6ebb5cf033b10911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>beg</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1d23c3bf7618f2ee6ebb5cf033b10911ac872acaeb82af140a69b934f9e7cd25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cur</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1d23c3bf7618f2ee6ebb5cf033b10911af2c924779caed789e398743dbe8e7d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>end</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1d23c3bf7618f2ee6ebb5cf033b10911ae808bd64f8e2927da8bffe60bb880355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; BasicIo &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>af8f989522925b884d8c9d3a257265fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1beff0dcdf03510bad13b6946379c5f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a67ae3ca0f8aece92a7b7749dfb02edde</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ac548d52ef633ac425bd01d17ccd2e7e4</anchor>
      <arglist>(const byte *data, long wcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a31334606e230bbe94d6b8768d3c6d75f</anchor>
      <arglist>(BasicIo &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ad16a1fab0f122c8ca11b86d09b03b9a7</anchor>
      <arglist>(byte data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a8c9e6c7377b642afbb2c14a0e3896917</anchor>
      <arglist>(long rcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aec8cb20c86e72b87577370a28d66a0ca</anchor>
      <arglist>(byte *buf, long rcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a648bc0d9b1a79e34684375074d806534</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>acb964ff603c96da8711baddb66a385a4</anchor>
      <arglist>(BasicIo &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a561221bbe1d215b4d6b5ceceaa2e9a97</anchor>
      <arglist>(long offset, Position pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a8728349cdeb79d569eba6fa6e26d5e74</anchor>
      <arglist>(bool isWriteable=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aad39cb2b01e19b5e648988bbb239fa63</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aeb9673a48a7af7376b7018998fb552e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a01903a1a2310197eb7e3fd41bedc3054</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a17744832ee807c68f9c8d744692d9aaf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ad674727cddbf9cea627423620a8bb3d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a29b826f89a8aac3c83ece6f8f343ed72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a8c4af60d14039fd99d36c73ce8354c15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BasicIo::AutoPtr</type>
      <name>temporary</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aec9dd2dd223ce57650462c74a0770502</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicIo</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a85137a48df4f7503e6197711b6021203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasicIo</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ac726bef377a5da282b0f2cadb5b779be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IoCloser</name>
    <filename>classExiv2_1_1IoCloser.html</filename>
    <member kind="function">
      <type></type>
      <name>IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a72accf64d9ef3d84869f046709ce3a46</anchor>
      <arglist>(BasicIo &amp;bio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a906eb8fa1bcef3b86397c367d8731af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>abf6fd92de40b9371b0df6e52ba63016a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BasicIo &amp;</type>
      <name>bio_</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>aefe0b0d7b2bf97cffac29fa5a388e75b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::FileIo</name>
    <filename>classExiv2_1_1FileIo.html</filename>
    <base>Exiv2::BasicIo</base>
    <class kind="class">Exiv2::FileIo::Impl</class>
    <member kind="function">
      <type></type>
      <name>FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a940ebd4fc3630f31c59adf99a52824c3</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a697adf86c426ab897c85eaaa8494f6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a1793ddca7f8c94619ceae7a127da73c2</anchor>
      <arglist>(const std::string &amp;mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a82a0cd197da227242ad8fcc50a70d29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ae0a881364b273ff14fb90c9375e9378b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a5b3d5f5a5b4b7f9d3d8cec46a4ad95f7</anchor>
      <arglist>(const byte *data, long wcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ad388515b87717088238dca8d71e75470</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a5d982468386b392b34b5ee8142b73396</anchor>
      <arglist>(byte data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a5c7364fbbdc740ec0736da33ad9a82f0</anchor>
      <arglist>(long rcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a23f598a52577e98be9f4292518ba6198</anchor>
      <arglist>(byte *buf, long rcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a7b211213f0c2e3b9153a69f67c15ab47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a7820fe3bdac99ff4a78dccccba1eed10</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>af3f07fc65378860f0b4fe048a398a1bf</anchor>
      <arglist>(long offset, Position pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>abacf2e7547c849c8809d472872c9a3a2</anchor>
      <arglist>(bool isWriteable=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ac23e31007bdcf3d4e7f17bc2b0341759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPath</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a000c027e3e75c2192d6ef537ccf6f6ec</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>abf285ea310f0c53d3107de6ba6e518db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a661e30ac842bbbeedef11aa9e1454f6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>abebb141803e349cdfcd36e8b621fdcb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a6a5ad7cda1dffde07d1a0d37b71011e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a31d22eb7249daef85cafff5f9ab254b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ad4e63c22394f5cc3597a3d175cfbcc58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BasicIo::AutoPtr</type>
      <name>temporary</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>affc1034970489c7734cfefed90b4d8d1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::FileIo::Impl</name>
    <filename>classExiv2_1_1FileIo_1_1Impl.html</filename>
    <class kind="struct">Exiv2::FileIo::Impl::StructStat</class>
    <member kind="enumeration">
      <type></type>
      <name>OpMode</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a393f5d1d8ba1ef27f78661a2b2c1c8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opRead</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a393f5d1d8ba1ef27f78661a2b2c1c8f9a155cdc1270a0ea713638e7ce9af7f471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opWrite</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a393f5d1d8ba1ef27f78661a2b2c1c8f9a40501c2842027e02575f7ba34312a796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opSeek</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a393f5d1d8ba1ef27f78661a2b2c1c8f9ac28271b1ad4ba35b7dd11b005872704d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a943dafec1aab4b7894412224f2becc49</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>switchMode</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a7be38a2e6a5da155aa1d4b6420d15912</anchor>
      <arglist>(OpMode opMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stat</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>adb9024ecce2993f826d02da6957b9415</anchor>
      <arglist>(StructStat &amp;buf) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyXattrFrom</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ae6940aa18a9073470fea5fdc754c48e3</anchor>
      <arglist>(const FileIo &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a5d7c63a21b4d7848e003df9dc4d923f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>openMode_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a2aa93061bb685b73df97da7b011bde7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>fp_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a3a87e5a388cea50de410261fa7d0f53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpMode</type>
      <name>opMode_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ae6ea0ef6708d70983bda651a555ccc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>byte *</type>
      <name>pMappedArea_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a9db9e6ec78e0ed12c1829c8e941bf2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mappedLength_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>aea9c770a4ba090737b31e7b7b00933c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMalloced_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ada7659603d39613151d4d132cccdfdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isWriteable_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a8987d346a621d765a5689da5a279f9a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::FileIo::Impl::StructStat</name>
    <filename>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</filename>
    <member kind="variable">
      <type>mode_t</type>
      <name>st_mode</name>
      <anchorfile>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</anchorfile>
      <anchor>a1961a2c26a57c8c9848022c20f7ff725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>off_t</type>
      <name>st_size</name>
      <anchorfile>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</anchorfile>
      <anchor>a4d16a0ac65419c462580893efb1a6ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nlink_t</type>
      <name>st_nlink</name>
      <anchorfile>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</anchorfile>
      <anchor>a11db88a8966a9bece649989065f5ba42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MemIo</name>
    <filename>classExiv2_1_1MemIo.html</filename>
    <base>Exiv2::BasicIo</base>
    <class kind="class">Exiv2::MemIo::Impl</class>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab2273b64e44e90f6cdbf785b132d9dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ad65869d43163ab8d38484a1d36448f3d</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ae73e710bb84dac0cae62a7eea9f5fd19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a32f5d13aff64550f03dbc93692d27d16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a7c87d3a1b552a4a93fe38255b43d0fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab34c91ef04dd9b8f5faf51d380aa55b9</anchor>
      <arglist>(const byte *data, long wcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a0d22943b9f0f0cc399bd7616dd7dd695</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a2737a46ff783d3e9c66c6f8ce255d913</anchor>
      <arglist>(byte data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab5b0239fe9df1d515e581d318ccceb7c</anchor>
      <arglist>(long rcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a3c4d85990cf914c9c5475466ba522289</anchor>
      <arglist>(byte *buf, long rcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ac3a53ab7bda3678eb813e505bad4e50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ac0c261a78dfeb097eacb51d14552389c</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a550d335e942b1f7d3a3d2c35bd4c443e</anchor>
      <arglist>(long offset, Position pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a9472d3d09a1aebce9fca15f36803caf5</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ac6b4bbc56cd98263494f4c9fab153630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a832a61a8b49b570024068efb54d08955</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a4cba82129b173367e5e987125d2a1635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a33b1a521d7c714e9ddbb7c1e9313f2f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a957ea92ce091518012c30fc637d651c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a5b3fce8483da0b1b27eaa0ed9611384b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>abb384c4f87e0931a6f586163db31e60b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BasicIo::AutoPtr</type>
      <name>temporary</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ac3d6031a13b8a7eae6959178bb1301a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MemIo::Impl</name>
    <filename>classExiv2_1_1MemIo_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a53624883ef5bfd9ba77e5b401878dc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>ae8c85effb3a1b2fce8d81e7950be45a9</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a6f8d94b48bb1247befc376c77192eb37</anchor>
      <arglist>(long wcount)</arglist>
    </member>
    <member kind="variable">
      <type>byte *</type>
      <name>data_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a10b98f28aa6f683b443d92cc97e5a759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>idx_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a724103eb1764b20a4ff46499b6b0b176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>size_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a8e86d7b469b1b94b272df23e85e3f055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>sizeAlloced_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a2cdcd4eed1f4fe98618b1d64800b0d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMalloced_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a343d3ab32885c6a4abe937452d86ac04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>eof_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a099926553b3155d0e6ee8db863e95131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::StdinIo</name>
    <filename>classExiv2_1_1StdinIo.html</filename>
    <base>Exiv2::FileIo</base>
    <member kind="function">
      <type></type>
      <name>StdinIo</name>
      <anchorfile>classExiv2_1_1StdinIo.html</anchorfile>
      <anchor>a4a197ebe658fcbe2a873bdc6bd1a2097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StdinIo</name>
      <anchorfile>classExiv2_1_1StdinIo.html</anchorfile>
      <anchor>a880d6fdd6fd2bcc2907cbbca8796624d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1StdinIo.html</anchorfile>
      <anchor>a1a539983484c7f53d8a05297509c99d0</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>writeStdinToFile</name>
      <anchorfile>classExiv2_1_1StdinIo.html</anchorfile>
      <anchor>ace740088ded933a7e4593a60049160b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>TEMP_FILE_EXT</name>
      <anchorfile>classExiv2_1_1StdinIo.html</anchorfile>
      <anchor>ac83836f981b0305f9c29fcd7c959d55b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GEN_FILE_EXT</name>
      <anchorfile>classExiv2_1_1StdinIo.html</anchorfile>
      <anchor>aa1362f11f54b06075167194231e262ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BlockMap</name>
    <filename>classExiv2_1_1BlockMap.html</filename>
  </compound>
  <compound kind="class">
    <name>Exiv2::RemoteIo</name>
    <filename>classExiv2_1_1RemoteIo.html</filename>
    <base>Exiv2::BasicIo</base>
    <class kind="class">Exiv2::RemoteIo::Impl</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoteIo</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a65ed30e593e5312fb38aa41d8862093c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a2a9cc55c3febe001a19f87be4d029d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a896a3e47aae0fb016fd33bba1a641c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aa6344a09f56c9fff60ba4c8efcc43969</anchor>
      <arglist>(const byte *data, long wcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aa38f2c7059bce5c16c13c7577f043791</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ab0fea8bddcc1ff2b8f58a63803563036</anchor>
      <arglist>(byte data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a8fa1670017a3d48315c0b7094871fc78</anchor>
      <arglist>(long rcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a7af3ba2569caebc9db6f4d56a96e7fae</anchor>
      <arglist>(byte *buf, long rcount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a0c94e47bc3bb618dbc31d0ca0b20a602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>acc1928ea1bdf8ef034b5eeef6995d963</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a6e42773865a680da390e9337084e606a</anchor>
      <arglist>(long offset, Position pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>acb2607af22c27811837b7233d6a80254</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a9df651d7a713608476a61ce26693af56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ae0a9d95313fbac6e34e8931403790f19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a75637d1419735f6add4fd485e13395ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a6d2ddf07896c867231f4dcb7e81170d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a92450127ef009527fbbf9e017a7185fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a0cee1d9a52a24dbc8ea02c381f2260cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a49b6d9299b25b1847d4148081b1c8d6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BasicIo::AutoPtr</type>
      <name>temporary</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a91601e630f713faeb277a10d7c7387ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RemoteIo</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a096f295632a44a555a9de2f06ff4c3d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::RemoteIo::Impl</name>
    <filename>classExiv2_1_1RemoteIo_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a91e32bc5043c7e5b75de931fe0e22817</anchor>
      <arglist>(const std::string &amp;path, size_t blockSize)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>ae30113fd238d5147ccbc1d301a5b5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>blockSize_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>ada2804a9cb82548b7fe0454688f9bbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>af4bb99ed17926a8c7f0a3fb2ca70c3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>idx_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a31088e31234c09f55e1acc11bf206e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMalloced_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a939103a72eb0740b172aa4f3ef0dcd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>eof_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>aa9a9664429368feab8ac75529063b30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Protocol</type>
      <name>protocol_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a133181f3b4048902b4d1837e151f6307</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::HttpIo</name>
    <filename>classExiv2_1_1HttpIo.html</filename>
    <base>Exiv2::RemoteIo</base>
    <class kind="class">Exiv2::HttpIo::HttpImpl</class>
    <member kind="function" protection="protected">
      <type></type>
      <name>HttpIo</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>af91ca419ba5b0940ea0f8b7465eaead1</anchor>
      <arglist>(HttpIo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HttpIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>aa018be555ba313f7013b5abc9ca0e5ac</anchor>
      <arglist>(const HttpIo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~HttpIo</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>a083f7bda0fa73e026abe4bf01e78e1fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::HttpIo::HttpImpl</name>
    <filename>classExiv2_1_1HttpIo_1_1HttpImpl.html</filename>
    <base>Exiv2::RemoteIo::Impl</base>
    <member kind="function">
      <type></type>
      <name>HttpImpl</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a231eff0ba77c9d5611b342518afd5eb3</anchor>
      <arglist>(const std::string &amp;path, size_t blockSize)</arglist>
    </member>
    <member kind="variable">
      <type>dict_t</type>
      <name>hostInfo_</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a599b5cf8596c4414ff636a649a6afc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HttpImpl</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a0828e175cbbc5cb136a4914a6a844217</anchor>
      <arglist>(const HttpImpl &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HttpImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a1f84027a5766ffcd72a21c2674cb1d4f</anchor>
      <arglist>(const HttpImpl &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CurlIo</name>
    <filename>classExiv2_1_1CurlIo.html</filename>
    <base>Exiv2::RemoteIo</base>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1CurlIo.html</anchorfile>
      <anchor>a2ce9d715448537a44a57539c43dd085c</anchor>
      <arglist>(const byte *data, long wcount)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1CurlIo.html</anchorfile>
      <anchor>a8014090383600e423112299e65a61ae3</anchor>
      <arglist>(BasicIo &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CurlIo</name>
      <anchorfile>classExiv2_1_1CurlIo.html</anchorfile>
      <anchor>a7144afa50462171ba3959abc4e39fbcb</anchor>
      <arglist>(CurlIo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CurlIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1CurlIo.html</anchorfile>
      <anchor>a19caadcc57db2336736bcae60f4a40bc</anchor>
      <arglist>(const CurlIo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CurlIo</name>
      <anchorfile>classExiv2_1_1CurlIo.html</anchorfile>
      <anchor>af3603d6da14f06349fb5d5cead63fa24</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::SshIo</name>
    <filename>classExiv2_1_1SshIo.html</filename>
    <base>Exiv2::RemoteIo</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>SshIo</name>
      <anchorfile>classExiv2_1_1SshIo.html</anchorfile>
      <anchor>a5e3969effcedfd747a312d0af4707dd4</anchor>
      <arglist>(SshIo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SshIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1SshIo.html</anchorfile>
      <anchor>ab25275f26df54a909508183ff176222d</anchor>
      <arglist>(const SshIo &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SshIo</name>
      <anchorfile>classExiv2_1_1SshIo.html</anchorfile>
      <anchor>a0ebb75d582bc7294ba9f0fbbdfb06dab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BmpImage</name>
    <filename>classExiv2_1_1BmpImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>BmpImage</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a3b76d2215d9e9883c7cb79b89792dd80</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>af325637dd954988bdd0812705b03ee91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a0deb05581273e6407b686e739fcdcf27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a5d730de9ba18015824a327a93760a83b</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a2e43c241337615a097316f3723dc772d</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a0d9e544f1a384228c3ef26f83eb0aaad</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a3690a8ff1aa1bf27da8beef16cfcc9e0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Cr2Image</name>
    <filename>classExiv2_1_1Cr2Image.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>Cr2Image</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a2738dff7049a703403a93a0ca28fb635</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a9ac07ec115329228cf1eb2afe622feb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a02e43bd63c2b10ce1ee190396d71a1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>ac76dc2d010d3dbb16b7bc3327d60fb03</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a0923aeaf91a8a378ce2fb5b073c2daf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>abe6ae07bb331040e0da77b2e8117a3d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a24ef77c26164146f64dbe1d333608a32</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Cr2Parser</name>
    <filename>classExiv2_1_1Cr2Parser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Cr2Parser.html</anchorfile>
      <anchor>a258fb26e5b7234b669391de9fa395182</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Cr2Parser.html</anchorfile>
      <anchor>abee19aa031e922035aa95129ed6305f9</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CrwImage</name>
    <filename>classExiv2_1_1CrwImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>CrwImage</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>af3fb07db53fa41774b3df4323942e1ed</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a9757cfb64310acf700d51c77ac4d55b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a1ae7b7dbf36f40504152112d67114afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>aaadb20df06a2832e73d75e240f6c2c64</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a7d6c701c0b6049916455a4136510cd62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a5d249f9d954b4008287f53b15a17e9ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a24175808eb8d984b05010268194fcb5f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CrwParser</name>
    <filename>classExiv2_1_1CrwParser.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1CrwParser.html</anchorfile>
      <anchor>a80a0861a3c37e739ef144d425f439079</anchor>
      <arglist>(CrwImage *pCrwImage, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1CrwParser.html</anchorfile>
      <anchor>a315bf9d2eda81fa73580b5c184410edb</anchor>
      <arglist>(Blob &amp;blob, const byte *pData, uint32_t size, const CrwImage *pCrwImage)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::RecordInfo</name>
    <filename>structExiv2_1_1RecordInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>RecordInfo</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>a49365083267fb894995748403381eeb4</anchor>
      <arglist>(uint16_t recordId, const char *name, const char *desc)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>recordId_</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>a71fd4b561cf49a78bf8bf7f1f9b0031c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>a47f007869517298a0286198f7b71bccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>ac429789d68ad77b2364ee13d943da26a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::DataSet</name>
    <filename>structExiv2_1_1DataSet.html</filename>
    <member kind="function">
      <type></type>
      <name>DataSet</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a9f61d2aad9766c22dfb31dda52be7eb7</anchor>
      <arglist>(uint16_t number, const char *name, const char *title, const char *desc, bool mandatory, bool repeatable, uint32_t minbytes, uint32_t maxbytes, TypeId type, uint16_t recordId, const char *photoshop)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>number_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>ae0fc1aca97dccadc825a0112d196cd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a4996dc18811843f754c0cb5b976e586b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>title_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a8b89d6e49ac3ad4fdc5e2f2138352a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>af62ed9aa5fcc9f6563c7c385d3739a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mandatory_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a0639d1bb04976221cd28ff6b6190cb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>repeatable_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a820e53b3b6ed93bfa7d8a50f9f3d1851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>minbytes_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a1c36827d01f39d661c7f1683ce8da7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>maxbytes_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a4241e9ca17787260d8275783b7f6a4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeId</type>
      <name>type_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>aac5e57bace39890e7a5a63367436ce26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>recordId_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a426dd3405de78233c4e323f2c1424382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>photoshop_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a330b945cf363899d0dd2f6ff9e054c8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcDataSets</name>
    <filename>classExiv2_1_1IptcDataSets.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>dataSetName</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>acf9da9675f32e0aa7ed1ba7477b5fa0f</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>dataSetTitle</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>adb1e57213642811fbe364e622a39430b</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>dataSetDesc</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>abb3e47ab12bde848111a228fcd4b8dc2</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>dataSetPsName</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a7775528ce0f2b50c062c90bc41bd5899</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>dataSetRepeatable</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>aec65e226142ca1cc42d500d2975339f7</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>dataSet</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>ae870d879dd1480ea7df3deb00d046b96</anchor>
      <arglist>(const std::string &amp;dataSetName, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>dataSetType</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>ab2cecf57fcd655b8c497a68ce39bfa38</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a3b8106845031d532466282d26f1dd9fb</anchor>
      <arglist>(uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>recordDesc</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a451b18150c3628d3761fc08950cf1975</anchor>
      <arglist>(uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>recordId</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a36ca205824a1b8f8c251e4150de1a9a9</anchor>
      <arglist>(const std::string &amp;recordName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DataSet *</type>
      <name>envelopeRecordList</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a2eb656d824099840e99692eb9817f9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DataSet *</type>
      <name>application2RecordList</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>aad8d636d503f49c914007b2a3727ccb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dataSetList</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a234bd6223e95d18aa67fbc357b7a0e9b</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcKey</name>
    <filename>classExiv2_1_1IptcKey.html</filename>
    <base>Exiv2::Key</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; IptcKey &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a66ec551c992d622b05ce5831c5a17adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; Key &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a9bf9953294ceb8d272908a0680aeade8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a988e8e6f9ce6686fd15cd1cc2e1156e5</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a97fe8f71498b1e412894ed2475657101</anchor>
      <arglist>(uint16_t tag, uint16_t record)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>aea7dcce2b8a20888e3dfa518d79f1b14</anchor>
      <arglist>(const IptcKey &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>ac273dbcd7ff32549b0d1e52c868586f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>ad686bbb7f5bc4d6e4d3f4f4002bd5d27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a03fe9cd33e8c0f56dc33ef8962be97dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a9ef503c67b2f7239b0e68a322eb8cf55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a581c712f48d62199e33831337290f0ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>ad2d8575942460cb27bf7fbfc8d30830a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a8750e2ce7d30c6d4d5b99766d08fec39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a10c0f0c028a88cde3d38449f0c512f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>record</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a9aa405be7c02ac674eabc0ed6ae2dde7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Key</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a574f73b95eb37cfa7ad509b0b1c26b61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AutoPtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a9f7e6d66e806bb9e80f35ca77d12062c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>adc70aa4f962abd267e2d4f98f89538b5</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>IptcKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a5fa127b91597f4ac6b5ccd74315a98c4</anchor>
      <arglist>(const IptcKey &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makeKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>af90cd2fd735f773145046bce37240a05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decomposeKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a90c5328803dc9aaf89cc91ff6f0fc92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Key &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a25d4c3b768148728e8b03fa47d4206cc</anchor>
      <arglist>(const Key &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::EpsImage</name>
    <filename>classExiv2_1_1EpsImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>EpsImage</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>ac685a10da19553291be0a2448a5be6c6</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a18a8c0284898635b301e63d8a14effc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a0043b000b9213e8f816db5170f558619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>afabaf3de204925f341394134d38a66b0</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a34c29b1779e4d346067aa0b4dcc88076</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::LogMsg</name>
    <filename>classExiv2_1_1LogMsg.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Level</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>debug</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70a0667b3b4005c2142a1a445b9e31818c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>info</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70a25da5ea3b0d899d3cd2c6de1aed12995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>warn</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70a24519fbf184e86b4c8d9397634613ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>error</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70a059605451badfc142b3b597629862678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mute</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70a560e58ad022ecf6b2f0cf93ea66054df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Handler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a823343c6f2c95067ae68566a293d5451</anchor>
      <arglist>)(int, const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>aef46b169c328eecf0b83886ef8b9ea9f</anchor>
      <arglist>(Level msgType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>aedeb7bc7577e6c82e002f03017ce2f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostringstream &amp;</type>
      <name>os</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a0e84e1ddf83bf19ef9c83a420518e8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLevel</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a3d044a62ace539813d255283a4c41782</anchor>
      <arglist>(Level level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHandler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a782d9c817b49f3b503c5a85f418319be</anchor>
      <arglist>(Handler handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Level</type>
      <name>level</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>ac2bf90efb62ec69439f6c71ca1498cc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handler</type>
      <name>handler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>abe4cfbb3b6aaff49f4b793f2711adaa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultHandler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>afd27d3e454319fa258a97e51406a9a81</anchor>
      <arglist>(int level, const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::AnyError</name>
    <filename>classExiv2_1_1AnyError.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnyError</name>
      <anchorfile>classExiv2_1_1AnyError.html</anchorfile>
      <anchor>ab9521c18bbbd98900aa4cf582fb4b707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1AnyError.html</anchorfile>
      <anchor>a8a2233d7b05aefb467a54a6dca8d6a2e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BasicError</name>
    <filename>classExiv2_1_1BasicError.html</filename>
    <templarg></templarg>
    <base>Exiv2::AnyError</base>
    <member kind="function">
      <type>EXV_DLLLOCAL</type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>af7a590c18625f189f69e4c96c43e5d1e</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function">
      <type>EXV_DLLLOCAL</type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a81cbddfe2829daec79941080bd95e641</anchor>
      <arglist>(int code, const A &amp;arg1)</arglist>
    </member>
    <member kind="function">
      <type>EXV_DLLLOCAL</type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a994e6b560381ea107657db939e828034</anchor>
      <arglist>(int code, const A &amp;arg1, const B &amp;arg2)</arglist>
    </member>
    <member kind="function">
      <type>EXV_DLLLOCAL</type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a2efb7f62b5a69ac9533b1e8d53817e80</anchor>
      <arglist>(int code, const A &amp;arg1, const B &amp;arg2, const C &amp;arg3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EXV_DLLLOCAL</type>
      <name>~BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a51b9db8a3231f00aadc9054bd454d0d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EXV_DLLLOCAL int</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>acb71e5b684361b0c6a06a08fec0ea2cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EXV_DLLLOCAL const char *</type>
      <name>what</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a72e9f29e45d6f59125fa3de232641504</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Exifdatum</name>
    <filename>classExiv2_1_1Exifdatum.html</filename>
    <base>Exiv2::Metadatum</base>
    <member kind="function">
      <type></type>
      <name>Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a1cf84038e3ead29592469bd756144de7</anchor>
      <arglist>(const ExifKey &amp;key, const Value *pValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a742963f5494cc749bd90ad1b6d9e737f</anchor>
      <arglist>(const Exifdatum &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ac65d802d3ff0951ec7b93d3d703ccc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aab7eab62ed82f33e12cd8d88ffa9a5d9</anchor>
      <arglist>(const Exifdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad29bb9ce35e4b7be8ea67d26738bed65</anchor>
      <arglist>(const uint16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a36d15c86f69d419135bbca96aace313f</anchor>
      <arglist>(const uint32_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a7ba36dfab4b35ce63ddba8a709bc9a60</anchor>
      <arglist>(const URational &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad57bfe66904fec5a5dee0ddb771dfc1f</anchor>
      <arglist>(const int16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8c2554feadba5d32c506eb3440906ef6</anchor>
      <arglist>(const int32_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a2a78b171519e1d8f2dd4fa81f850a9fc</anchor>
      <arglist>(const Rational &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa27c6cb13826a42651d1d2e42c73f3bd</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a9ea0ff4062fc55ed0c28a353a5affe4c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a211bad1b193debd1789d7c16ece26b38</anchor>
      <arglist>(const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a0fc1f52444c8d7026265f6b327197c47</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa229bf86f961689cf9051bc603a64c9e</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a6651602de3d217dd622d33ab67289c11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>adddcc29223d25d016ee53d1f83589eef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a5c26a6a6a091a7907569fc0aeca911a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a130c6051bc6cf94aafa98a3d63148f60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>af1026cd809ee9a03475d30db60eb9824</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ae75e9a656877bf62b3575e67da13df16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ifdId</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a53d8e735e5238e2120acc63b5c28361a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ifdName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a4b153240122e09fa0b2c5922d8577959</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a9cc9253e83d3ce70f8159773fcc40871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a28391f10f14d66cabeb8042853e311cd</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a2ba934f8a9fb3a93ae71e605bc85c921</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=0) const </arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a4f0f8b292fc3c80c0708d20159567e0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a2d05145ef9213a6e4dcd2a699f66ded7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aeab615faeb373eeabae3d1d89a954f93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a72cd8dd5a63bd7a6e4ef73615479031f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ab77162e139896a971c16e01402acebb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a73d1e5346411c2adf520fec405f2e536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a1e08d7b1108dad35dad40481b49c8fb9</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a9d25f4c4580ddee1d280d8fbb05a4638</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>af5d6b1fbea425e67db4904c28b80cd59</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a689c5419c35293f83e11bdd4fc3cefdf</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>Value::AutoPtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a69fee053db7f4e55295f7ff1c4d34566</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a44d8261179011b2f68075d805e565866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>sizeDataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ac2095867822a76236cf00fc98105f7cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>dataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a57436744bd949d97e4ae4b9995e61152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a1d7ef6f699dc1448ddf37c5e8938808a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aa4b96033393a69d1382570f638d7243b</anchor>
      <arglist>(const Metadatum &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a707ffcc6121daf24e5b191eb55181b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a554fbe4c9641f72939fdfc3802220090</anchor>
      <arglist>(const ExifData *pMetadata=0) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend Exifdatum &amp;</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8e1c4b0d24e694e91ebc3f8517365bcd</anchor>
      <arglist>(Exifdatum &amp;, const T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Metadatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>acb23718131525db38ad4d94f43c73792</anchor>
      <arglist>(const Metadatum &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifThumbC</name>
    <filename>classExiv2_1_1ExifThumbC.html</filename>
    <member kind="function">
      <type></type>
      <name>ExifThumbC</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a47c5170242743d1dfd32a6d03527f7b7</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a525866c326d9a6ef37e70a2bb644b207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>writeFile</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a28a632e5ca0be46d1348aec33d77d1ae</anchor>
      <arglist>(const std::string &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a1f28b40a8187381efdae3134e32b0c69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>extension</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>ab3f2980afb5524095ec39e6506119140</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifThumb</name>
    <filename>classExiv2_1_1ExifThumb.html</filename>
    <base>Exiv2::ExifThumbC</base>
    <member kind="function">
      <type></type>
      <name>ExifThumb</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a2c81742f577443a41c1b184406093c68</anchor>
      <arglist>(ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a90e5155ba60dae3af4066f80464c788d</anchor>
      <arglist>(const std::string &amp;path, URational xres, URational yres, uint16_t unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>aa29789f0a658d53066e0b55bb2b1acb2</anchor>
      <arglist>(const byte *buf, long size, URational xres, URational yres, uint16_t unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>af5578e157a1e60b295d703aecec242b8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>af8cf3725b3d9d6fa08055ea4809bf77f</anchor>
      <arglist>(const byte *buf, long size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a5239338ade638043bf66337fd9d4e3f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifData</name>
    <filename>classExiv2_1_1ExifData.html</filename>
    <member kind="typedef">
      <type>ExifMetadata::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a02e2a2acb4cfeb0f7755c1a45f94106f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExifMetadata::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a2b8ac7a474d6527c0f3f6a0a9cebef77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a5c56fca27e6c2c3700d6138e8401f39e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a91d231cd1b9fefc311c5166e30ab66eb</anchor>
      <arglist>(const ExifKey &amp;key, const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>ad809ad2a4689a15a899d1ddba954ae2b</anchor>
      <arglist>(const Exifdatum &amp;exifdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a13b24f0ee2a3f585cf714b9418b75edd</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a3d630c776ed6275671a637a1b21e2bd1</anchor>
      <arglist>(iterator beg, iterator end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a1d8ccafb025f9d5800686903b6250f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9a52cead52e69e79252ffd7ee5bc8818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByTag</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a1495692d4d076247380549214cbf0cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a53bce2980ee060fc2da5fe6751f51db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9c15177b03489e3d4bb81e9acc1165fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9700e579aef8fd1845dd5da59b608773</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a97cf11fcf9dcaf7469becac408414f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>ac0782f9bee7ddad3cf9f74f30a961d6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>adb57edad9a63385cb0be74bdfe3d01b6</anchor>
      <arglist>(const ExifKey &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a4993c68fbb50731014c307852875c731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a5feeccc886934b66e1b5b1ec9128ef28</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifParser</name>
    <filename>classExiv2_1_1ExifParser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1ExifParser.html</anchorfile>
      <anchor>a0a1965f73e968b9b9b26ba254585f0de</anchor>
      <arglist>(ExifData &amp;exifData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1ExifParser.html</anchorfile>
      <anchor>aadab9ea4fdff24670cd8a973aa0690f8</anchor>
      <arglist>(Blob &amp;blob, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1ExifParser.html</anchorfile>
      <anchor>a2109bba0b2b538470d3f0c2f25dd471a</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder, const ExifData &amp;exifData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Uri</name>
    <filename>classExiv2_1_1Uri.html</filename>
  </compound>
  <compound kind="class">
    <name>Exiv2::GifImage</name>
    <filename>classExiv2_1_1GifImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>GifImage</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>abe20d0de18aaf9907a99a92c17d24963</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a6ce1509b24dfed94bede077e328a315a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>ade01838d801beb44968b806eaf469ef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>ae98b140069acda271a7a3e0cbef6c640</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>aa9b15e6dca4e2b26d33c0aaeb587ab0b</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a4cd492b4d311bfc6ba202c56599dfedf</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a3d92f84493fb88a679fdac9a17fb4dfd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::NativePreview</name>
    <filename>structExiv2_1_1NativePreview.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>position_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>ace41cff23edb5322229647da766b482d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>a76f008dd10a7cff654682db8ee82ab89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>width_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>a3d625e3121491a8abb1989783a442a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>height_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>ab7e910bedd3385b914972142f8e93895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filter_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>a38b8d3338ca4c49611c53460cb64ac71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mimeType_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>ab3ba8fee304dcf8e9076056a002b3fe2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Image</name>
    <filename>classExiv2_1_1Image.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a198b8d5924d6441748aa162130c96a5f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>af9f7e86aac2f656473e456e16550ab58</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5c517b500586613595e2e1b62601657a</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ImageFactory</name>
    <filename>classExiv2_1_1ImageFactory.html</filename>
    <member kind="function" static="yes">
      <type>static BasicIo::AutoPtr</type>
      <name>createIo</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>acce2152e7215854736f0902c51e9d247</anchor>
      <arglist>(const std::string &amp;path, bool useCurl=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::AutoPtr</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a151579cacfd36dfc3d56abd9c6e26d3b</anchor>
      <arglist>(const std::string &amp;path, bool useCurl=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::AutoPtr</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a5130bcd72fdcd2765ac40dfec3060c06</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::AutoPtr</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>ab5634be654818fe1ad9d9911ef04ffe3</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::AutoPtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a66e3b04ee1e62cd0f978995def1fd495</anchor>
      <arglist>(int type, const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::AutoPtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a436ea4f6d7f213d389e3e9ec10264a83</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::AutoPtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a047254c8b06726cc0c3733e066a0bc97</anchor>
      <arglist>(int type, BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a93387c43470e70c700e1addb92907c40</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a5b0f62579f4a9945f525f952cb86619e</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>abd5d3ab76420ec7db45cc2105f4e5907</anchor>
      <arglist>(BasicIo &amp;io)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AccessMode</type>
      <name>checkMode</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a2953661dfbe37cf916e4fdeb5ef5c519</anchor>
      <arglist>(int type, MetadataId metadataId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>af9aa6dad41f17eb012d8d18e291d19f9</anchor>
      <arglist>(int type, BasicIo &amp;io, bool advance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Iptcdatum</name>
    <filename>classExiv2_1_1Iptcdatum.html</filename>
    <base>Exiv2::Metadatum</base>
    <member kind="function">
      <type></type>
      <name>Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ae6f0b4aaeffdb3f4666f23fdbb4b4f8d</anchor>
      <arglist>(const IptcKey &amp;key, const Value *pValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a9b4348e0e20b4c32e6eac8462596c2f7</anchor>
      <arglist>(const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a37b56fdf8d3b27d9d6e3462c299a34f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a884f0bbe277f0211ef2acd06bd397466</anchor>
      <arglist>(const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a548fd455cc034cc0a65c0a9eaa41011e</anchor>
      <arglist>(const uint16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>aab56a297ea27b7dd31be8cc282e4772f</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2d5cd4a80e6379d78010f8b18e6811c8</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ad8f2accfb610841d6cbea0ab7c27ef7c</anchor>
      <arglist>(const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ae588d1dbbd038445e69015f66e277a66</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>afef33191871750f8b1c760d46f553c51</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a200b7d5d6f0e49e3c29d631f561c879f</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=0) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>adb8183876183516239f842d405980b43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a596ec3daf2df643d2a625a525ebaedbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>record</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ae0c9a888c38f17689e14b38baef0fe9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a7a97fdd3f2314224066b45f482304f47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a8b19ed1dc21284af2dca91497c515c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a7e630890c95ee311a0774f5ba77da0cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a66ec20a5834c6d2eb5fade695badd316</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2b3bc419980b4a9375a1c225e3851b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a72b0cc6aef6cc888f26f503558cd9420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a3f7b541b2ba8028139728178a4fd20ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a3c6dec212e90dc540bf9de1ae7d7c591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a9cfa3dec36e338ce8e33165549d2fa46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a99c790bb20a41c4cac8ac033c4b7914f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a7a5aceca1fe5f2898bdf802ed32e07af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a4f8525c6fbd53c2746178970e9806bd0</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a51d4cb0a76fd01df683f3e7131ff8330</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a94dad5f2dec67835f259c6438620a7dc</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a176df79dece844e2d71980693b937af3</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>Value::AutoPtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>adde9e41e4fda8d1cd9e5947e44cbf40a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a799184a3a000bda2432a0b7366c2dfb2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcData</name>
    <filename>classExiv2_1_1IptcData.html</filename>
    <member kind="typedef">
      <type>IptcMetadata::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a0d53776cd2f36e63fff78c8f142a7caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IptcMetadata::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a683257be46a446865ca5f4e81b8e88d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ab2b58c6eda595eee09ac5f61e93070f7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a6c209bd981fc5073ae5effaa56d07310</anchor>
      <arglist>(const IptcKey &amp;key, Value *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a2d843afb1f9c0978b8845c741148ed27</anchor>
      <arglist>(const Iptcdatum &amp;iptcdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a56782cedd228be37bf5d1c3df77b6435</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>aee7392b0585be4916c56f08e3c9e7be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a3db828436ee87c6d4d1d4a450b0c3c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByTag</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a622ff967f192b898e05920dfbc63aabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a03385c128b29d262ade837093fddc0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a6753e8a713ab2b42a3bdc7b3d9eab401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ae53fdfabd295de29b971e51cd1fa9347</anchor>
      <arglist>(const IptcKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findId</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a3218fa1e8cc6a8f6c75982f3fd554507</anchor>
      <arglist>(uint16_t dataset, uint16_t record=IptcDataSets::application2)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>aeee89e2ea157cb1e3739ccbbf239cce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ac209f133796a4811776e3fe85b432506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>acf7cb48fe542d615efaedd3175d5e541</anchor>
      <arglist>(const IptcKey &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findId</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>af56ada8ee4ab77c6f5a1b0924ee85be6</anchor>
      <arglist>(uint16_t dataset, uint16_t record=IptcDataSets::application2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>afda626e27ebecd599005c68022db9c1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ab0b73759b3483b94deec4dac32e1a591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a96def22b723dfabe9ec5decfdae8574e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>detectCharset</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a1119fc7d0dbec8ea03fa34204672ace9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcParser</name>
    <filename>classExiv2_1_1IptcParser.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1IptcParser.html</anchorfile>
      <anchor>a5284a756c97571f0fd1de6c59f5cc2ac</anchor>
      <arglist>(IptcData &amp;iptcData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1IptcParser.html</anchorfile>
      <anchor>ade6b61bc6ce95b24c2c0b47575f1c20a</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Jp2Image</name>
    <filename>classExiv2_1_1Jp2Image.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>Jp2Image</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a1344669523f6ea29ebd5e7626af4b52c</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a4bf3d9ed94a4be4e5d931a812c6d58bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>afebe3c6b1ca88d58922e41b55ce36139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a2209338ee4a18a815ac95115a5eecaf5</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a42d834b31a1760cd045a6f63ad3d0523</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Photoshop</name>
    <filename>structExiv2_1_1Photoshop.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a9d27ff53500548ec78953a40e743b287</anchor>
      <arglist>(const byte *pPsData, long sizePsData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a2e7bcd67a6ff6a47b628d813ae8cf437</anchor>
      <arglist>(const byte *pPsData, long sizePsData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a31fe5a20fe69912e2bb2f87b40c116c6</anchor>
      <arglist>(const byte *pPsData, long sizePsData, uint16_t psTag, const byte **record, uint32_t *const sizeHdr, uint32_t *const sizeData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateIptcIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>ac34205eee36512a0626bddbb462a0620</anchor>
      <arglist>(const byte *pPsData, long sizePsData, const byte **record, uint32_t *const sizeHdr, uint32_t *const sizeData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locatePreviewIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a98e277e6b49a095bf931952a6cecf16f</anchor>
      <arglist>(const byte *pPsData, long sizePsData, const byte **record, uint32_t *const sizeHdr, uint32_t *const sizeData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>setIptcIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a21b12dcbcd05f3c32b49c2121b77068e</anchor>
      <arglist>(const byte *pPsData, long sizePsData, const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>ps3Id_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>ae593bf6546da454526229645e3114cbc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>irbId_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a61ebfa82dfbf5eb5417bf4fdf548e007</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>bimId_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a78d00352aa18ac7bf6144e830856ea6b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>iptc_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a1f901d93824440438f7a015cb2738bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>preview_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a41722f55a99aaafa4cf2015068e7924c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::JpegBase</name>
    <filename>classExiv2_1_1JpegBase.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a35dd08286566bfd0527b04fa1579b414</anchor>
      <arglist>(int type, BasicIo::AutoPtr io, bool create, const byte initData[], long dataSize)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sos_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ab8438f038796a4098cfac9f455af4cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>eoi_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>aef78301f5a5c1eb10ede0a0aed95dd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app0_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a10bf3ed1d94e6eb152e224bcf68a2817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app1_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a82f4bb5005543aa0ebe1c74ef739bdb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app13_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>af7702e1a0b0077f037d69d90a25c47d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>com_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a19f8416e44728f5dc7a18a5a1e847386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof0_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ab37130a8c38dc3ce30b51de26b9dfc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof1_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a94921b4e807fbd0cdbe10fd35d4f29d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof2_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a3389b84d079d41a27cfb05988f2db5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof3_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ac3437dcf59de33c9d66666102753861c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof5_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ae6d4b42dc2910c993200dba4aaea9b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof6_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a6f811b0f72b17b5c71db4f99bb68e159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof7_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a580a03b91a5a43681dd3b1a1a90b1418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof9_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a5cb7616a508b5bce1e5e090c64c56f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof10_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ad4341259e4217a9c816090c8c7371141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof11_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a9c89886640ef38209fc820044a297632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof13_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a63d981aaea56d3f50afe053c26af6b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof14_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a4583c9618dfbc4d57dfeec4f0d8cd151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof15_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a7e2ecc78c3933f13e331c8505c92b51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>exifId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a973fc83e77fc1a20d3ebe014a7659a5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>jfifId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a06f050f91fac7a06b93550d2992e4511</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>xmpId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a7ab52581c651d0610efb44ebb060c6df</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ad6e281a6e5e863c93fbb123f0b38bc4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a5e17357e701288db323db2bb5c9db1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a17bc2fe8a8e2562ae18d220e695cf2bf</anchor>
      <arglist>(BasicIo &amp;oIo) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>isThisType</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>aad464a055fd28f2f0e9f99af3967f208</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::JpegImage</name>
    <filename>classExiv2_1_1JpegImage.html</filename>
    <base>Exiv2::JpegBase</base>
    <member kind="function">
      <type></type>
      <name>JpegImage</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a3b477e95800ba50d5f231a36236596bf</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a8a3082eb94f566db8b52ae5dfd80754d</anchor>
      <arglist>(BasicIo &amp;oIo) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend EXIV2API bool</type>
      <name>isJpegType</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>ae19b36616ee5d8202ab703922fd38278</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a2613112f484b6bd091d599991c38aeef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isThisType</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a5a1d72c08c64f28afd557500c6f78f0a</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExvImage</name>
    <filename>classExiv2_1_1ExvImage.html</filename>
    <base>Exiv2::JpegBase</base>
    <member kind="function">
      <type></type>
      <name>ExvImage</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>ad5491d94dada45a88e26df873bd4ad4b</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>ac8d38bdde6a43d90e9c5d8ec1eacc7b0</anchor>
      <arglist>(BasicIo &amp;oIo) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend EXIV2API bool</type>
      <name>isExvType</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>a5e9a3ffa89d4c0f6332aa12460f948be</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>ad8487cabb12622b8c44257c64697f6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isThisType</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>a480b16cd980735218d8fb8c4e7ad19c6</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::MatroskaTags</name>
    <filename>structExiv2_1_1MatroskaTags.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1MatroskaTags.html</anchorfile>
      <anchor>a56460bd0bb8c34c6ca43202dcb2b9c2d</anchor>
      <arglist>(uint64_t key) const </arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>val_</name>
      <anchorfile>structExiv2_1_1MatroskaTags.html</anchorfile>
      <anchor>a11caf36ef7eaeae4b3b8a7c35549ffe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1MatroskaTags.html</anchorfile>
      <anchor>aca49b41e2e5970e5aaa336b564ec4cf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MatroskaVideo</name>
    <filename>classExiv2_1_1MatroskaVideo.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>MatroskaVideo</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>ac84a2788bdabc573f16da14612371cd3</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>ac5f3d04f8243b8f6c15b37d503210694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>aa8b7f91b635b5da885fd10580ba41972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>a536d8f130e27056efc3d90655c425963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>findBlockSize</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>af93d03c47512481d1b89f4e1af9aac07</anchor>
      <arglist>(byte b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decodeBlock</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>a84bbfe45f7ce0bb1b78b28346a3262ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>contentManagement</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>a4f6303ad384986bc092513d4f82d26be</anchor>
      <arglist>(const MatroskaTags *mt, const byte *buf, long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>aspectRatio</name>
      <anchorfile>classExiv2_1_1MatroskaVideo.html</anchorfile>
      <anchor>ad9610378aff00861e39ec004f3aadf33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Key</name>
    <filename>classExiv2_1_1Key.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a272fe50e38e5af51bc3fa54e32cd7931</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>aebbef8a4d9e11459ecd30d1497911d90</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a23dab45ff9d7151b484b90e686e833fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>af6bccc6d5552d2c3324d28099554b5c0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a3593df05b735beb63ec263ee00f37e37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a7a04f9c117d0373661b982ac63a9ce84</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Metadatum</name>
    <filename>classExiv2_1_1Metadatum.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a24bda0168b0655ccbbc8b870b583f1da</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a63c2b87249ba96679c29e01218169124</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>af9d30791ac19ecd4a80cd9214f3d1495</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a8383c39e2ee4e67afdb9f7180bd728e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a880644b1b92788c59b4457ca9d692c55</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a828306096c0575ffc5d02c73c3b6ff53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a58cd8a22d1debd0e3f8cd2407587ed31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a39ee5937edab29d199f3d318bb55eace</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a0f4c5f021786e0e7abc3ae25b984f4e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>ac3fc08927500d7fe227bc34583815dfe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a1a77c33ee0ba24127dff478e26ba8fa7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a75740ff36685a69d617e0b9548fcf2b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a05e186d6189b44ac428b7d21a8dbc762</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a8617d2efd0c1a241e96e853b7f00f077</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a25cbb22ddf9597cfd4002dafb8713cfd</anchor>
      <arglist>(long n) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a66148c73f1b565885b4ee51358ae4308</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aa70af228d888327badd2333020256ac2</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aea1935014f316b7a2eabc12be92ca7c9</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value::AutoPtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a1f3f53ab9df8c213ade42012a7e89ab3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a67ab8d2752f951b70a8188341df9c7e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>af4dd21ad1c59ae0bbe521651951615f3</anchor>
      <arglist>(const Value *pValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a246b60cc8cca54ce6a6e97eeb4ef84bc</anchor>
      <arglist>(const std::string &amp;buf)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MrwImage</name>
    <filename>classExiv2_1_1MrwImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>MrwImage</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a0759d819c6f7ff2fc36e289b4cdddb52</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>af57371ca9869cd8c5a009afcd0d62e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a35b5e31b5d4500d71a724813dc0c57cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a8ec357197271583008b7a207651eb6fd</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>ab0c4bce2836217c490c7deda5c114925</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a034a0e0e888474dfa8cd6a24a0e73d19</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a411bd0cf7504ad7582021942de5c4dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a8d1b2cd3a8a75cee7d99657a01b24950</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>aa73b70e56d5a87be4982bf9a15015d5c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::OrfImage</name>
    <filename>classExiv2_1_1OrfImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>OrfImage</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a5b6c3f8b601b75485b85162404d290bc</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a52b0c6a1661b2d68e2432268735ac563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>acfbb361e4af39171546fb1491a6df085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a1a2baa722020f3c5a6472c1f95bda4f6</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a29799aa9f63196f12138f819f04e3534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>ac8fa04c7893f366a9d3f909aded35d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>aa8db48b5e6c5765a9fcb471388521038</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::OrfParser</name>
    <filename>classExiv2_1_1OrfParser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1OrfParser.html</anchorfile>
      <anchor>a12abbc35fbb4744386fdca23c4c3ac24</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1OrfParser.html</anchorfile>
      <anchor>a65695cea60bcd31f6136419ed72b9cfe</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PgfImage</name>
    <filename>classExiv2_1_1PgfImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>PgfImage</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a99771957086af7fe41364b907ccd8cea</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a5af0948267616b7954d5f95c84441e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a253b1c6cb48747420a3fa7813310d95d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a2f1d030a499e4cbab5ff5ba1590a40f9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PngImage</name>
    <filename>classExiv2_1_1PngImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>PngImage</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a5d30a3b6cee27c2c98249eee52fced29</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a2a0f0ed945a729104c01a851094150e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a4a82a4143b70e11a59f4e9a56255f6a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a82339d89ca695c24e2491e0d084bd03f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::PreviewProperties</name>
    <filename>structExiv2_1_1PreviewProperties.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>mimeType_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>ab32f9721c47d556fd7f91113d72f7796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>extension_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a23ec6b06fe598f94899bd2d9e563b61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a19b26f29bbb63bd917b9fa64a9881069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>width_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a592860d7a998f25ac9714c9b6e37a73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>height_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a411d95bac020e1023831b201353c4579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PreviewId</type>
      <name>id_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a62c48b5507740d5dda73bf4c0a534da0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PreviewImage</name>
    <filename>classExiv2_1_1PreviewImage.html</filename>
    <member kind="function">
      <type></type>
      <name>PreviewImage</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ae4f6c4e04848cd2c6c8c0a620f5d2e0a</anchor>
      <arglist>(const PreviewImage &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PreviewImage</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a71460066a87c31bc58ab45d7dcc613f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PreviewImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a5703cae6a354bce921a015951876eed5</anchor>
      <arglist>(const PreviewImage &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>aa8e2c771194f2166b7b0d9fa02fb11fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a7645ca6beab18da69fdf3a4c4b752fd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ad80d769929c6da3acaad1b04805cac6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>writeFile</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>acb74c09c1a6d44565bfeb8ef8a5134e0</anchor>
      <arglist>(const std::string &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a8d77a6d848d4fa0ee7ba04f43c93b93c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extension</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a5b9f40d486bb709ddfb1971937124d5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>width</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>af203bb45d60b5dcca43e8bf945e55708</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>height</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ac6dd4231eea7ea1166b5605dafceba23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PreviewId</type>
      <name>id</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a1c7e62a0c27413ec9dfcbe00d3ee2e9d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PreviewManager</name>
    <filename>classExiv2_1_1PreviewManager.html</filename>
    <member kind="function">
      <type></type>
      <name>PreviewManager</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>a0edb9d34d5cc76037151dcaab7317e1b</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>PreviewPropertiesList</type>
      <name>getPreviewProperties</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>a5d559473330c88effb88dca1496d7c19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PreviewImage</type>
      <name>getPreviewImage</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>a160334cce785eeaac5f8986a5184d471</anchor>
      <arglist>(const PreviewProperties &amp;properties) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpPropertyInfo</name>
    <filename>structExiv2_1_1XmpPropertyInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>aa46ea38b4968a3ad8ebf027b5a321908</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a0517e72a3bbeb94e13f7abcf75a90d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>title_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a354f9269b7d5a0426c687b0eadcfca97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>xmpValueType_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>ac780029912d0496e1d44ec73a9474244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeId</type>
      <name>typeId_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>ae2b77c54dc7fa216247871ffc28f85c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmpCategory</type>
      <name>xmpCategory_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>aa70ca984710b60dcc91708649b4f065e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a21bcc233145be39b394eca6d0105abe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpNsInfo</name>
    <filename>structExiv2_1_1XmpNsInfo.html</filename>
    <class kind="struct">Exiv2::XmpNsInfo::Ns</class>
    <class kind="struct">Exiv2::XmpNsInfo::Prefix</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>ac8fdc4c6154fbc2f306783a2d59ff7d6</anchor>
      <arglist>(const Ns &amp;ns) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>a44e9d2086ab7c94c1afd9e71b7a5ee35</anchor>
      <arglist>(const Prefix &amp;prefix) const </arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ns_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>aa33883d7e619d9031ec4ffb8fa131684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>prefix_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>aa10b74c591fbaf4d94245c2906b49fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const XmpPropertyInfo *</type>
      <name>xmpPropertyInfo_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>a4c97da9c5d14545904736de8b0e914c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>a904a242a6bbd52506ec68d2a5b62eba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpNsInfo::Ns</name>
    <filename>structExiv2_1_1XmpNsInfo_1_1Ns.html</filename>
    <member kind="function">
      <type></type>
      <name>Ns</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Ns.html</anchorfile>
      <anchor>a1094a58798d7e74b34ee3bfe0410f503</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ns_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Ns.html</anchorfile>
      <anchor>a9a184d2bc761ac5a34424e989ed7680e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpNsInfo::Prefix</name>
    <filename>structExiv2_1_1XmpNsInfo_1_1Prefix.html</filename>
    <member kind="function">
      <type></type>
      <name>Prefix</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Prefix.html</anchorfile>
      <anchor>afda7b3100da3814260cd83e73b721f51</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>prefix_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Prefix.html</anchorfile>
      <anchor>a3aab2fdb7069a5655e19ea37320e3808</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpProperties</name>
    <filename>classExiv2_1_1XmpProperties.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, XmpNsInfo &gt;</type>
      <name>NsRegistry</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ac1ee044e04366db5028c3baa02c511be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>propertyTitle</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ace720866dca9064dbd34a545f8869b6a</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>propertyDesc</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ab5a86c7d0e8fb3517f47588a6a262598</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>propertyType</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a1afe108a735f91f0f1afb5e0baffc06f</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpPropertyInfo *</type>
      <name>propertyInfo</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a92d7405a277af2f52c1707b5ac5533c3</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ns</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a6b558be19460be890e68d93faa77fac1</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>nsDesc</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a9377197dc487aa7053a9b8d8f19e7230</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpPropertyInfo *</type>
      <name>propertyList</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ae280a62dd2f58da353cdc4dede298103</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpNsInfo *</type>
      <name>nsInfo</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a88167c117a38bde4d9b52ba996e6f029</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>prefix</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a9242436f9f9475216b21ea0c4643c357</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printProperties</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a9b7e72de6863587e9c18157f7ea527e4</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printProperty</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a406a3bada810fc6f720a2c3a989e09e4</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;key, const Value &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerNs</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ae58ee081625b7924563e93a1ba184fec</anchor>
      <arglist>(const std::string &amp;ns, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregisterNs</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a82d620dbdbc671a635c7b4d8a11c694f</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregisterNs</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a6758ab102c4b9d1330c184971fe56962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpNsInfo *</type>
      <name>lookupNsRegistry</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a899a34dc5d27750e7e6ece0a249d1bcc</anchor>
      <arglist>(const XmpNsInfo::Prefix &amp;prefix)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NsRegistry</type>
      <name>nsRegistry_</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a5184fa01ff867af9a3d65848b95b1994</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpKey</name>
    <filename>classExiv2_1_1XmpKey.html</filename>
    <base>Exiv2::Key</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; XmpKey &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a97d99b13a5cd576248be94bc858da7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ac4bd973f85090565e0f1d7328ad4fbbc</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ad744de9a95d3adfeeb8134f9492ff9f7</anchor>
      <arglist>(const std::string &amp;prefix, const std::string &amp;property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a47466bceb7f5c7f02661b4ec29408ec7</anchor>
      <arglist>(const XmpKey &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a593797b60cacf457055d7b61fed7ad4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmpKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ab1f2654141f42259632027d34a5c8f15</anchor>
      <arglist>(const XmpKey &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ae7e40bdc4c5dd580308ab6cca6a0c6c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>adc3a6fac6a9323fbd02de86495f143c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a23aacfa5e504fa7b9cb4b58900485436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ab12232f30942081f258c22ab4019495e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>aeec51e06fd148b31e44c6cb8c3aa2765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a6e2cf85d802aa9d8f3fa1936d766ab1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ns</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a3e6ffb93ddae44f44563b329ecfba0cb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PsdImage</name>
    <filename>classExiv2_1_1PsdImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>PsdImage</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a141d27c9519ec7fef455306555f0a38b</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>ae9bb61fa8016a76aa01718990c52dd3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>abb47f0e2bcff7e326e6bf09ada06ceae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a05f5b0a54a0acf646da8cb08195757b3</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a1d3d1edde46a6b9e60a660624d096abb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::QuickTimeVideo</name>
    <filename>classExiv2_1_1QuickTimeVideo.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>QuickTimeVideo</name>
      <anchorfile>classExiv2_1_1QuickTimeVideo.html</anchorfile>
      <anchor>a9ed0546172111810b363eb758acad655</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1QuickTimeVideo.html</anchorfile>
      <anchor>aa0191ddc065a76551537efa4755c4a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1QuickTimeVideo.html</anchorfile>
      <anchor>a9d39c61bf9e07042cb8b05539de739b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1QuickTimeVideo.html</anchorfile>
      <anchor>a11624b26611ad8b17ba9eacd4a2a8683</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decodeBlock</name>
      <anchorfile>classExiv2_1_1QuickTimeVideo.html</anchorfile>
      <anchor>ab6e5bf3f1351bb7d70b23891f5564b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tagDecoder</name>
      <anchorfile>classExiv2_1_1QuickTimeVideo.html</anchorfile>
      <anchor>a2d034e6fbfaf1c5dc95d7a728f71e6c3</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, unsigned long size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::RafImage</name>
    <filename>classExiv2_1_1RafImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>RafImage</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a9042d1c8dc0290a69b1d968eafeaf503</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a53a5fa808a06b133f72cf6ccdacebc76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a3337927b7f39bef4dce153556a4b77a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a0dc6b6ba3c57272e8d8abdad2741e1c9</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>ad95a749faed5962eccb5ca46ccf059d7</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a86777f8cdd42ae89677e13561e48a9f6</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>af8fdbff12c99b3bfac10d29f24931300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a3a86d2af1b0c156512809336e4a173d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a650ce49f0b3ce166b68f2860fdb986ab</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::RiffVideo</name>
    <filename>classExiv2_1_1RiffVideo.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>RiffVideo</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a74974d4695d1ddd9acdeb6e6011d7b19</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a95289b6b1f94b621a1254eb2dd8d23dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a6617d31a182f5f4bfb76ff3b21fa35d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a20fd8d4b8acce7c32ed3946eaad73459</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decodeBlock</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>af03fd3465544ed11495ce74cd2924196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tagDecoder</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a247225ad3a3001d7150b3cee38ea6dd0</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, unsigned long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>junkHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a660563a8363896c71076467ca393f788</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>streamHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>ada57480f9a3fb46d42c6bb013e08b095</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>streamFormatHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a157a30b3aacd4da9ab6f5ce60328b48d</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>aviHeaderTagsHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a0ddaf8cc685df5721df1ea7c4eb202a2</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>listHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a17e7e982c4133f27658a1419c272a31c</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>streamDataTagHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>add09f7bda28b9e7db72d8f2cace7c00a</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>infoTagsHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>ae020c8e690366d44e6df026ef0546647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nikonTagsHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a541245537e624c8f281766c4ecbed1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>odmlTagsHandler</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a5e6f0640a67e8106929366ef24991af6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>skipListData</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a0696a88e696b05129e6fc1915054220d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dateTimeOriginal</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a618aa28bed263c7be1e19ea44daa6311</anchor>
      <arglist>(long size, int i=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>returnSampleRate</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>ac4cdc14fd4038c9ac28c101ea9cd9185</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, long divisor=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillAspectRatio</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a8620a45dd4e28a8a89b9fda9d6a71298</anchor>
      <arglist>(long width=1, long height=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillDuration</name>
      <anchorfile>classExiv2_1_1RiffVideo.html</anchorfile>
      <anchor>a1ce14cc762fb8827ac4c4bb93864940d</anchor>
      <arglist>(double frame_rate, long frame_count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Rw2Image</name>
    <filename>classExiv2_1_1Rw2Image.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>Rw2Image</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a2d091ecf4583d3f972bb8cacf3889e69</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a207a0726d40c8aa9456bb39ab13fd435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ae71368a7c97550651d131152b31e38ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a2c99da5914c50a9fd40e21ff1f3da392</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a7c815fe540dac720e784a215d480415b</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a4e4694f9b04d86482607e4df7d6769f5</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a8711f4d5c7904e476fc6ac5adcc7d1ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a49b89d1b5a0e17f0918e54ec2f6cadea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>aec47f0afec5fb7574fb3fd2f3503072d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Rw2Parser</name>
    <filename>classExiv2_1_1Rw2Parser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Rw2Parser.html</anchorfile>
      <anchor>a374b0e0b9d6b0713ac472164e9473ee2</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::SSH</name>
    <filename>classExiv2_1_1SSH.html</filename>
  </compound>
  <compound kind="struct">
    <name>Exiv2::GroupInfo</name>
    <filename>structExiv2_1_1GroupInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a2420b34b0d06454ed43919c25a0a1362</anchor>
      <arglist>(int ifdId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a720ddaaebc93ad6ef416c753978c68fb</anchor>
      <arglist>(const GroupName &amp;groupName) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GroupName</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a7c2f497e8b149700a04513c185af75d6</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a16f5047a1e6d5e49e212cbbbd69e554e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ifdName_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a53e480f2a6c880394ad3f41b5a8b3d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>groupName_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a8906db17b5b163382647c998512c158a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TagListFct</type>
      <name>tagList_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a4a1b4b61eecebb651ae415e867c98c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a1800290b7f417c05ab921730e6f01657</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::TagInfo</name>
    <filename>structExiv2_1_1TagInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>TagInfo</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a81de1c0041286477253d26c071c86f2b</anchor>
      <arglist>(uint16_t tag, const char *name, const char *title, const char *desc, int ifdId, int sectionId, TypeId typeId, int16_t count, PrintFct printFct)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a291383d59e6a7f82e4a877f3e386cfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>af821ebc91a9fd1d8c2eced26af005f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>title_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>abfa8eeca7df313f229fab2d95ecf7fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>abccdbeda3069c3bd046c8cb40eaa338d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>ab2e85247276b0422e6f62d3581b160fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sectionId_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a6820c97793afabfe503a1d72c41c576e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeId</type>
      <name>typeId_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>aa0358a82b290c8a5a351a646e39f3b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>count_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a97d02a1591e052d5d6f094eea0d71c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrintFct</type>
      <name>printFct_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>adfaabfd557743ec3129d2667f1edf3c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifTags</name>
    <filename>classExiv2_1_1ExifTags.html</filename>
    <member kind="function" static="yes">
      <type>static const GroupInfo *</type>
      <name>groupList</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a5d71adffd6eb252b4478181f4862b647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ab8daef767ee7ec0d126b46b3b9104536</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>taglist</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ac8741d3b5757722e5fdbf702463293f9</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>taglist</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a4e49849331e9bbc14b670d6638a4d7eb</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>sectionName</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ab1f99d9f94c3953e0dd29da28cf2df0b</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>defaultCount</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a4c7e1ea79e5e63a559b7dddf164895c8</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ifdName</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a67f47ab2677def885dff551f41e0a6df</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMakerGroup</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ae49f3872a2b0f12a0bebf2ce5ab82cb4</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isExifGroup</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a3ad909719ca3aeadb1d61bedf4cb540a</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifKey</name>
    <filename>classExiv2_1_1ExifKey.html</filename>
    <base>Exiv2::Key</base>
    <class kind="struct">Exiv2::ExifKey::Impl</class>
    <member kind="typedef">
      <type>std::auto_ptr&lt; ExifKey &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a88f3c3ee83cc5c342ab72c777d5e12ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a0874f4846012c3c0b67690ebb3fe9f9a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a8def2fe4560de6a5d470230df6539e47</anchor>
      <arglist>(uint16_t tag, const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a3c8df38c1a6d76b1533d9b3ae32f083d</anchor>
      <arglist>(const TagInfo &amp;ti)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a60c87fdaf37922883f415a7ba244a968</anchor>
      <arglist>(const ExifKey &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a5c9a1458c1aedf11ee44c1564375a2e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExifKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a3827a71a5647f0163660bdf6d3733fbb</anchor>
      <arglist>(const ExifKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdx</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>adea5f86a54e3f9fd336fa3a2ec8bbc1b</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a7afe667bb54e7f04cf60e577d1ccc39a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>ae366a66496a84b4f766e677d6ce289ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a1a4d15bf196111ecc01ad3574bd56eb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ifdId</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a2790786f043fac57dbfe971ee9dae42f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>ac07b3698bb118ee22fa6989b5807c562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a69d85de3523c02b683c2b2cfe0817473</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a0db5806c2e85bf63609573f80f418a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagDesc</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a1ed16f1d4b3bdadf1aef81eebd97a570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>defaultTypeId</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a483892a376d7cb58d2a02a037b8f4c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>ad7c5de10de9b6734b060e3433118926b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::ExifKey::Impl</name>
    <filename>structExiv2_1_1ExifKey_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a4041931e75dcf31a18720fcca5d2f5e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeKey</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a950fbe85d36bc8677619c12f531e61fc</anchor>
      <arglist>(uint16_t tag, IfdId ifdId, const TagInfo *tagInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decomposeKey</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ae806dc4eb7794447f5889c2883b37003</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ae4dc1e331f765d9a06808bf362968635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const TagInfo *</type>
      <name>tagInfo_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ad12223b387627eb84e6cccc1af9f2d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>acd643ac92a5c640414b747c2ac8cffc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a7125aa50441d563cc0184259b1174e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>abdfed8384444ea9bab3df604b6e4764f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>groupName_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a888861e3e239676cea5afd6e7429fb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a19ad969958fdabf840f540bd53ede686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>familyName_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a44d24e9394306228a990645af5dfb05b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TgaImage</name>
    <filename>classExiv2_1_1TgaImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>TgaImage</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a6301826559a9df27076ab35c353c1b13</anchor>
      <arglist>(BasicIo::AutoPtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>acd57243b467e0f21fa52214bf2831552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>af20e745446d742b47753eb9b9698a941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>af8a076bffc4451c69f4836cd846a07c6</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>ad8a17682396f8d0e6f55ab8dbfed6c47</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>abce4a71d8f652c89a1645f6e63720cb5</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a0992bda8dbe84c0801bdaebc693d8558</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TiffImage</name>
    <filename>classExiv2_1_1TiffImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>TiffImage</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ac304d73256f3406c0a63d18edc98be39</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ac0965fb8aea437062775da11bece20ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ab4d6dcbd915abe2254bfef751a3f1da7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ac204968b22d3098c974551e0d2067650</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ac756bdc09ffb0ab6acf005058b2ac032</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a245fc531ba26fc4c285436adc1d5175d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ab76aa5235a07a6da6563ccc6955b8675</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TiffParser</name>
    <filename>classExiv2_1_1TiffParser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1TiffParser.html</anchorfile>
      <anchor>ab0ec8b956507f84e8bda0125d02e5069</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1TiffParser.html</anchorfile>
      <anchor>a97f2e818b8f6cf41fb9236b9385e1064</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TypeInfo</name>
    <filename>classExiv2_1_1TypeInfo.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>a774ccbf72e5a93ff104d27cf9969b095</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>a01bebc7e74dbe0de31301f9335f03f00</anchor>
      <arglist>(const std::string &amp;typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>abda613af50ccdddcad9a7bb75fcb2338</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::DataBufRef</name>
    <filename>structExiv2_1_1DataBufRef.html</filename>
    <member kind="function">
      <type></type>
      <name>DataBufRef</name>
      <anchorfile>structExiv2_1_1DataBufRef.html</anchorfile>
      <anchor>a49de4c5a497a0f51ec8ce2e7dfd3c226</anchor>
      <arglist>(std::pair&lt; byte *, long &gt; rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::pair&lt; byte *, long &gt;</type>
      <name>p</name>
      <anchorfile>structExiv2_1_1DataBufRef.html</anchorfile>
      <anchor>ac0e9d8ea16129fdb184d43d91d68ed6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::DataBuf</name>
    <filename>classExiv2_1_1DataBuf.html</filename>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a7acbb6dd1dc8ba1cfded52cafffe1da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa7f5e919eddab5d8623cebbc6af91328</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa0a63b749954741d5516dd58265b2e5c</anchor>
      <arglist>(const byte *pData, long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>af94cfd1ae0f844d5facfb93a0d0a061e</anchor>
      <arglist>(DataBuf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataBuf</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ab5ee5eefc2521158847edeb0ff12ac6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataBuf &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a064e231bd57cea71fdee957a1dac3ab5</anchor>
      <arglist>(DataBuf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alloc</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>abe06b478dee2d020c4bde3f974bdeb90</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; byte *, long &gt;</type>
      <name>release</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a2fb958d6820e3790d14ab143159f50b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ac553cc3082d217d4b139dfca83602076</anchor>
      <arglist>(std::pair&lt; byte *, long &gt;=std::make_pair((byte *)(0), long(0)))</arglist>
    </member>
    <member kind="variable">
      <type>byte *</type>
      <name>pData_</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a9a00173081c913d3add58854d9ad2c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>size_</name>
      <anchorfile>classExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a5e6028d5cdae2e149749667cf66c3e91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Value</name>
    <filename>classExiv2_1_1Value.html</filename>
    <member kind="typedef">
      <type>std::auto_ptr&lt; Value &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a0f62e585b82c97738858b743e60dff21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ab475b1680c6fa36a092c4584f70a8027</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Value</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a22a8e3314aad989671aedeee1c7ef375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>acc8870f802ebcdf9d4e081816ad8956e</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a2864378d7572310aa5f4cf4127365862</anchor>
      <arglist>(const std::string &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a6e8f3c20bf5d09f34371660a6cf50af3</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a1a56299aad4e614c4f0225d97530c038</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AutoPtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a84db34d85bac0f5e159d67a1e10c7976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a3bf4f9c2eda4f7850a390de98668ce15</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ae046b0b081c2be1cf160db595c66fe6d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a2929f67840fb0565b868993b140ed0ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a2518f5ba09fc8c00785c57a119892c4c</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a0b07106aa570a506f4211c7bfa605fb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a856b1a10a7081540484ce62e8f75e389</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a4530a3fc3e2305cf994de5476f46f953</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a22d257caa6c1ffe6416ce02de7bd8c1c</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a595a4cb549bec8c19d290ca3e95a2678</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>sizeDataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a0105d81baf07d531cc6de2d2bb4a7bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>dataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a9d96b057ecc6e9f09e2c65b46a0688e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a161550b3ef31b3a14b1d75149ba9ba71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutoPtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a7a6c027316e3dec0f7e79430f104c137</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>aa2a9041cbd30d86260820b818cdf232e</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ok_</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a4dc3a689b4bc1819290525cac491c1a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::DataValue</name>
    <filename>classExiv2_1_1DataValue.html</filename>
    <base>Exiv2::Value</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; DataValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a46b580e6be9aa7708a75eed270f5c89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; byte &gt;</type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>aa99856ccc6fc7bf3978b7f49d97b0e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataValue</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>aecfbbc2bc400abbbdd2d4282356a0ddd</anchor>
      <arglist>(TypeId typeId=undefined)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataValue</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a614ccfa52204af130091f7b1d7d27ea7</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder, TypeId typeId=undefined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataValue</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>aaa177a85787da59fbc29ac368ac4cee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a927fef988688e4b33d4fcaffb51679dc</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>afb8d9321e3b80c239b3a8df9b1ca4083</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>ad96c8ded5036c82f33d9eb214ed12587</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a1ffc722677c75ba8e55da29bd15cac72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a09524728bded980d22d93e3d95331dea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>aaabdc32e781b5d1ad83d5db6ce68c340</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a55001725fa8ce26fbac833c3192fa74f</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a0bea375d6f15bf5866af59e2efb2db8f</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>ac9d9928ebae3d72b43421818a9ebfc3d</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>add912d022aaee80ecf3ea6565036e946</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a78ba17db5467af7e38fee8c815b2eaee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::StringValueBase</name>
    <filename>classExiv2_1_1StringValueBase.html</filename>
    <base>Exiv2::Value</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; StringValueBase &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a690234b43e80adc70a6c7ee5106e5326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a5787c8e04b3cec1870b3abd95d15ea6b</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a837785dfc0f3561c939c2a9b4224ceb0</anchor>
      <arglist>(TypeId typeId, const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>adba0f1f9e5ca8e2873d0b2815786f99e</anchor>
      <arglist>(const StringValueBase &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a8cb9d50601175eed2ee81a5d5395be02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a7e1a2e4e99a63eb1ef815317f012c57b</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ab43f48f366770175d7a07ad229ebbd2d</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a68503471612daaf314f4b70e2216ef3b</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ad2b4138c3457bf9194c629051514db42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a893d78447a12cc30f1a2e5da2b1c9e7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>adb3bb38ee2d2d5e51539317c44b5492e</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ab414d7d6cfdf5bfa7b00884f6d7a20f5</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a3899565eca4f0a0b590d2fde6a2c2023</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>acd6e46c7dbd429b137494ef0329d7335</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a64379351d8550e054f871067e4fecfb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StringValueBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a63dbdd58d31e39e7803445931f18d701</anchor>
      <arglist>(const StringValueBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual StringValueBase *</type>
      <name>clone_</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>abcaab81321b73e00ae6062e0dee93e81</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::StringValue</name>
    <filename>classExiv2_1_1StringValue.html</filename>
    <base>Exiv2::StringValueBase</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; StringValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>a984d2bf3d0be2ee6472081124266c652</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>ac9c7091aad2def3f845d5a2aa5ee9509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>a78c21b549e4ddb9b8bbbf62f54cc287f</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>a47c816c9b053c47c39fcec7edc789b28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::AsciiValue</name>
    <filename>classExiv2_1_1AsciiValue.html</filename>
    <base>Exiv2::StringValueBase</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; AsciiValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a8803e92f5f58283d8e30984c769cab15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a105b0e3b58bda8517aaf4deee1f67054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a69ed02512af72c5d9a1082d6c9c16def</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a050859d509395726b199ca2f0e501506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a8dba62825094109881aa7dc37492a2a3</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a7392754687bce9b9ae5fd0f54d2e1ca8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CommentValue</name>
    <filename>classExiv2_1_1CommentValue.html</filename>
    <base>Exiv2::StringValueBase</base>
    <class kind="class">Exiv2::CommentValue::CharsetInfo</class>
    <class kind="struct">Exiv2::CommentValue::CharsetTable</class>
    <member kind="enumeration">
      <type></type>
      <name>CharsetId</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ascii</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2af2fdc3a84e9d8a8d93b1bfcfb1225ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>jis</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2acc509d4cca7762e20d4b538d882fbc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unicode</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2ad1f067ed38c6c34f5c721c673375b8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>undefined</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2ab35065873211fa857caa6476f4fa1bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidCharsetId</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2abb43fe17435f0ded9cc650054fd76256</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastCharsetId</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2a5fab9c891a539fdaf71acec7247cf64c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; CommentValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ada887f6b7f7554599f672e6ebc06fd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a78b03cf4b841577f41e10ae51962b710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a4305d98b7eef38ca055f4bc1a3ddb96e</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ac592ffa49f00535cea595829ca1acaee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a0dc1a2489912d18b05ba25881ed172c3</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a4210d47fa2e7e8a24d8ad89328996e3b</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a1318730b8a15f2f043b1d99390092181</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a313468dff47849581ae4f654aa314816</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>comment</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae8ccc714149ff42cc6e7993fc8177ed9</anchor>
      <arglist>(const char *encoding=0) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>detectCharset</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a34da753521da501cc1015a7c1cc04eb3</anchor>
      <arglist>(std::string &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>CharsetId</type>
      <name>charsetId</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>afe98d1bbc93dd695e39cd4f719b54d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>ByteOrder</type>
      <name>byteOrder_</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ab3199a8019d5799c21ff584112c113bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CommentValue::CharsetInfo</name>
    <filename>classExiv2_1_1CommentValue_1_1CharsetInfo.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a01262330f3440a341734757f142d3fa0</anchor>
      <arglist>(CharsetId charsetId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a035235c0f0e7b8deada2e8ef111b480e</anchor>
      <arglist>(CharsetId charsetId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharsetId</type>
      <name>charsetIdByName</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a11c99bba8c8529cb1d437497c69faa51</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharsetId</type>
      <name>charsetIdByCode</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>ac9bbeb2bd3f4143bed7aab6e6515f3b6</anchor>
      <arglist>(const std::string &amp;code)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::CommentValue::CharsetTable</name>
    <filename>structExiv2_1_1CommentValue_1_1CharsetTable.html</filename>
    <member kind="function">
      <type></type>
      <name>CharsetTable</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>a6d4548ab85ad7e5cb73937d3c809a95b</anchor>
      <arglist>(CharsetId charsetId, const char *name, const char *code)</arglist>
    </member>
    <member kind="variable">
      <type>CharsetId</type>
      <name>charsetId_</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>a41723a676c46bf69c8b7376392db0066</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>a7dafa39d67bf1a442fd5c8350a1487b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>code_</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>ac9404e0866cb85b5966ddf5c91304d14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpValue</name>
    <filename>classExiv2_1_1XmpValue.html</filename>
    <base>Exiv2::Value</base>
    <member kind="enumeration">
      <type></type>
      <name>XmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>adcef489707e5b72735cccb7bee57cf5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xaNone</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>adcef489707e5b72735cccb7bee57cf5cada59bf15321e63f5b675bd1c476d52e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xaAlt</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>adcef489707e5b72735cccb7bee57cf5ca078dd99ba268c33122e3779afae7731d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xaBag</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>adcef489707e5b72735cccb7bee57cf5cacaa5c9a63bad9d2c6a3edefc94954c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xaSeq</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>adcef489707e5b72735cccb7bee57cf5cadc46f9580e179288f2e6d359a5e91bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>XmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a417c4392d9251b143df126fa9e9d1025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xsNone</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a417c4392d9251b143df126fa9e9d1025abe388f530034cbfc3922aaed0f453544</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xsStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a417c4392d9251b143df126fa9e9d1025a11352f0da30e364b30ebd3243b2a3362</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; XmpValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a0559bb270b4d2ebc0d784b807c3af44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>XmpArrayType</type>
      <name>xmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>afa940e92a938b8350edf0b41912db2b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmpStruct</type>
      <name>xmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a179ee99bb4cde4d8f91786de9625f13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a3f81d8c587380f37df5b5740e09fdbac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a1417a259ba1ae7f2285ca0131a7d3438</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>af9ca857d5c130ac36996d6a0519369df</anchor>
      <arglist>(XmpArrayType xmpArrayType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>ac3b98fc15a65051d546ff5d1f73487ed</anchor>
      <arglist>(XmpStruct xmpStruct=xsStruct)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a411b3b510f1b9ca49f1784ea9535d185</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a7c357e0bee86bd3c6eee197711472821</anchor>
      <arglist>(const std::string &amp;buf)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmpArrayType</type>
      <name>xmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a1388aadb7adca555160c9deb7961d666</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>XmpValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a097a9c5135a011827dde5faa0fdeaf80</anchor>
      <arglist>(const XmpValue &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpTextValue</name>
    <filename>classExiv2_1_1XmpTextValue.html</filename>
    <base>Exiv2::XmpValue</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; XmpTextValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>acc84736acca75059f54d022d6a2df0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpTextValue</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a52258246de480683ba8c26331729cb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpTextValue</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ab3fad8cf98fdf1f898d60f81be8419e1</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>abddc014ee1b2dee79d219b362c26b2bb</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a746a16b23d4c2980f3f31cb9def9a345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ab7cb478cf373b98987dd9fad9f84a221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ab84a3e6f634f39deab22f182880fdcdd</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a6c2a64ebd906041827b005a6dca1f5ce</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ae1b09db38ddece02c314e6562457efd0</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a86722bcc1e0167748b91f93e4dafd58b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>adeadb1227704c657d32183af5da010a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpArrayValue</name>
    <filename>classExiv2_1_1XmpArrayValue.html</filename>
    <base>Exiv2::XmpValue</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; XmpArrayValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a0780ad0c5878c196bc0a626f8c82b60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a041168d33176d58939620810a6c0334c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpArrayValue</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a0cf60defd39cf0801569c8351e02f4a7</anchor>
      <arglist>(TypeId typeId=xmpBag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a17608cac7377fffdc25cbf4fdb4e5eed</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a810f8ec93446cf673a50c1e88f2442e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>abe26b2f8bd8f956b290171afb5c993c0</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a41a3387f5c5697df4033fefbef8b8b1e</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a6ea92652ac312c5fecdb57217176ac3a</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a4f3c3a818f243b039694973a9c2a96c6</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>adb23ca07fc6059398d9fabd24b1954fb</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a620cf5acd40bea72c7b3cdb3894fea6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::LangAltValue</name>
    <filename>classExiv2_1_1LangAltValue.html</filename>
    <base>Exiv2::XmpValue</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; LangAltValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a18b73e897cc64099315ce0acb1dbc191</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a274c05cd21a217178a9901463f58539d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LangAltValue</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>aa6e57338d68ad7a79567e7d4271ce74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LangAltValue</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>abf8c25b7c35adcd521ec83bacd0b09fd</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>af666af4cc5c56d520afca81e62676904</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>acc729a7e7812576c5a0a6b4a4bae3f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a074582d188dffad1c933f122fdc72bbc</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>affa315745ded92e9d3800badfa869e24</anchor>
      <arglist>(const std::string &amp;qualifier) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a8acb0c87ff7416c6b30c782c14ed2471</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a28e85381507d52c02a8fe318106460d9</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a8adde7e716306b7aa84b03a8c9cdad8c</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>aa85d8dd8fd1fab61e123819545879533</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>ae466310e854d707c1e5f5a44730a27c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::DateValue</name>
    <filename>classExiv2_1_1DateValue.html</filename>
    <base>Exiv2::Value</base>
    <class kind="struct">Exiv2::DateValue::Date</class>
    <member kind="typedef">
      <type>std::auto_ptr&lt; DateValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>aeb4c3309897e696326e9cb55a8f6cb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>ac64871fa22e0b3af3819838d65dcc7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>af337f8a13ff9656ff610398091d271cd</anchor>
      <arglist>(int year, int month, int day)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>af8b4fd85a11bd9ae31def086a5b227ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>acb8fa5f6fcd5383b5fddce094a251961</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a6eba2be86bf4744bc947b0909aa0c6f2</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDate</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>adfb7f12fa25958b6d7ff3ca5912616ab</anchor>
      <arglist>(const Date &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>ab058c2ba2c53659564a8adfa3a751cd1</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Date &amp;</type>
      <name>getDate</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a6d802ff024ecc84c2673945ac016a478</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a060478a53687b9319f6d5a3d7a609ef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>afb2c24dffd2d7ad0d9079854eeb063c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a15e73dd1a8a9016ccfd18c75086ec108</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a80ca3538d96fa26f9f196e9db9ff0c43</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a870154948d26bb25025d3212bceb4b4c</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a07f499e6f90425513b1bee5b5098ab99</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::DateValue::Date</name>
    <filename>structExiv2_1_1DateValue_1_1Date.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>year</name>
      <anchorfile>structExiv2_1_1DateValue_1_1Date.html</anchorfile>
      <anchor>a04752d59b976cf190d1434f213948e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>month</name>
      <anchorfile>structExiv2_1_1DateValue_1_1Date.html</anchorfile>
      <anchor>a22759f4cb5c8137777ee3b155adad7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>day</name>
      <anchorfile>structExiv2_1_1DateValue_1_1Date.html</anchorfile>
      <anchor>a3e1ac15589c5a534485fc02fe6cd2383</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TimeValue</name>
    <filename>classExiv2_1_1TimeValue.html</filename>
    <base>Exiv2::Value</base>
    <class kind="struct">Exiv2::TimeValue::Time</class>
    <member kind="typedef">
      <type>std::auto_ptr&lt; TimeValue &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a05ddb56ba600d4376bacdc6eb055622f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>acd668c3a1f1448a660de9711fda583f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a42e19776bf304b8deb415389355d9b29</anchor>
      <arglist>(int hour, int minute, int second=0, int tzHour=0, int tzMinute=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>acbc324fd892a3d153aad878d05e0a655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a083325ce2c9ff4a693ccc586c5785f5e</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a8160552dd6b05d970151b2622aa09459</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a67dac1417b5ec818d90229e7f0a38058</anchor>
      <arglist>(const Time &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a198a39cf744c504de9b3d215988bab9d</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Time &amp;</type>
      <name>getTime</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>ae31884236f40ef2cae307a9e890d04bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a0e89ff064815d12f14f738488d636a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a62423ce3d83bedd1a8285e0768cb5e2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a56a40c028e565e35c964e046c1e843ed</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a49250d1f63c75c40b89f1e06860b1ffc</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>ac3143b2e165f6e8200b444836055f78d</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a955966f12668e41c3445119fc8cb3b4e</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::TimeValue::Time</name>
    <filename>structExiv2_1_1TimeValue_1_1Time.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>hour</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>a80487f4ac17dbffdd1ea3906d2029ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minute</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>a547e3eecf0cc16048ee0fbe35dcd50f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>second</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>a7c306e9e553573ab50358205b3cc4ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tzHour</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>adb120971d558865b750fdba73cc25734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tzMinute</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>aee6b75534a63f9a88f77246628658547</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ValueType</name>
    <filename>classExiv2_1_1ValueType.html</filename>
    <templarg>T</templarg>
    <base>Exiv2::Value</base>
    <member kind="typedef">
      <type>std::auto_ptr&lt; ValueType&lt; T &gt; &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a0c76c512468a47f6eac463f4af278a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>ValueList</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a88ed5f3e8f59a9cf00eee8c6027e9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a38d2c3d37e48bd5b3c00f3693e493ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ab13bcf1ea775648daac65bc13817235d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a647fe7bad8b9fd92d29f6d6ad16f28a0</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a1d7083471cf9e61c9c27785f2a70721d</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>add531529e862d86deca7eea4c76f5c4d</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a23f797186d8e93284a90bb9a9b215b1f</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a517dba8c00607833f4e06194603c73c6</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a81719ee8a0892aae5765d66d00b77dfc</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>aed8ff3edec29000ce609e1f756ff7742</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>af1da49c1d89dcc35f2dd74a0c73e5e0d</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a8c61467a7dd9a7ecf79a72e26e329ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a6710435c5371f8bb650a0d563992c78a</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a191f1d8f864f169d40202e32dd59a0f2</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder, TypeId typeId=getType&lt; T &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a168b70cf24a0d7839174d65a8046f0b7</anchor>
      <arglist>(const T &amp;val, TypeId typeId=getType&lt; T &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a70608f4c0740f6b8413f684a5dd256b6</anchor>
      <arglist>(const ValueType&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a4f7a81b12f6bd8ec4e0d45f16a75ef35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a0bd0a1b7695e49e7ea4fd8fe449be2bf</anchor>
      <arglist>(const ValueType&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a725c88fdf395b0dba55c13794b458b69</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>af66d05b6e6cf774f58f5110b5976a329</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a360e7872cfcb434d60bdc09dd243958e</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a106239c4587a27ce53b6a59b63d7b348</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ab9b4ae316a03e0406ba5b0ed0b448696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>adb029a314e342525bf6a5e3132cd5848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ab96e357d3c5dee6cab416cafa8da7e4a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ad00be1b465398f9187296d1cd8462601</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a3dea33fa6bb1b9d3bdd1d0a05f0abad0</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a550fc71135aa8491fa7a90f0f682c94d</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a20632832dbb186f6ad287456c1b6b92b</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>sizeDataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a7441666b57cdcc6df0486516e80b8866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>dataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ab30d2836320975c3ad60312bf0a5133d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>ValueList</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ae5daa362d42b7b728cf795258650a35c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Xmpdatum</name>
    <filename>classExiv2_1_1Xmpdatum.html</filename>
    <base>Exiv2::Metadatum</base>
    <class kind="struct">Exiv2::Xmpdatum::Impl</class>
    <member kind="function">
      <type></type>
      <name>Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>abd992e7c9ed7233458ccf7be0b3e5d9c</anchor>
      <arglist>(const XmpKey &amp;key, const Value *pValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab66bc7df5fd4cc769562fe30661c94db</anchor>
      <arglist>(const Xmpdatum &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aee068210c7e92357bf4496bbbd73254d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a534ca3b3750c9824960c53a53d2fd29c</anchor>
      <arglist>(const Xmpdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab8f567325bc1c681cb80bbb53bc98bb7</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a2651103ef9d64a7172b59307a4d2a7c0</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a7ff7d6540c3e857222b1a8d3c8abd31c</anchor>
      <arglist>(const bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a60e6b17f5acaedf322533e3509c5e51b</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>af08f7f56cedbf1f1db8f4bb3c99372ae</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ae7647893d4f7a5577232ffe0c55efd47</anchor>
      <arglist>(const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>af8a422ab0e7e02f5526860e201e89e80</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a2ba6162b1c5baac944b208f1401c9690</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a5ba9818ed2cb6ac4726eed20d8b590a0</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=0) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a35c2e7412443f4ca59923d69541b5c48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a76bc1a21f77b753972f1e15469d31609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a9aa101dff70329bf7decc9cdb4d48b80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a931c5fb7a66e98ae2c8f79ac3e97d6f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a0eb73ab392c7365c9346b2856f1d5ee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a6aeb0d22c53ef6ead4268a9cb4326d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aaae019e4292ba327aaa54fd1f029157b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab49d1fb15f9c14a86a29d1db4553f105</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a660bafc8f7cb0bb78098c032f16c88e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a8986932860a664aa65d24538bb4c3458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aa7ec013772d33edbed3a979fb3a41055</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a6bdc9723ebe7d9d4eee9cbc2a8a79c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a9faa9d7df363f71a80987c1c8aa7733d</anchor>
      <arglist>(long n) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ae7045b67bc522474b8426b09319407f5</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a370555c1183fc05401d6bbdafae53280</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a4f408695fcc5bdf498dbb661d9e0dd59</anchor>
      <arglist>(long n=0) const </arglist>
    </member>
    <member kind="function">
      <type>Value::AutoPtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ad18588a7058cabea035cad3568293ecb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a7eadf7ef0bd9be2436c4376196815dcc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Xmpdatum::Impl</name>
    <filename>structExiv2_1_1Xmpdatum_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>af7c3b3febfd3b16e9dbb28dda364b274</anchor>
      <arglist>(const XmpKey &amp;key, const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>a1be31ac7b8a49cbf934a01a3683e9696</anchor>
      <arglist>(const Impl &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>operator=</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>a17a7f80194e7b7eb2a6a7fee34bac68b</anchor>
      <arglist>(const Impl &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>XmpKey::AutoPtr</type>
      <name>key_</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>ad74ab26ba329a4f39022c8b0b680b69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value::AutoPtr</type>
      <name>value_</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>acd5e115f5d13704f4b24997e3d75cd5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpData</name>
    <filename>classExiv2_1_1XmpData.html</filename>
    <member kind="typedef">
      <type>XmpMetadata::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a6ad054efbea675843895e3f74c3c1923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>XmpMetadata::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a9c0a6575296f3da8bfc200091da40f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>aea04017bc03a315d2c8045f889233d54</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a8ce28ae5c68a30b8e646c7ddfed75843</anchor>
      <arglist>(const XmpKey &amp;key, const Value *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a23383a89960ba5b9c6c753b4b0b83198</anchor>
      <arglist>(const Xmpdatum &amp;xmpdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a6c7f21d38928596ead01c988ea3e62d2</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab7e69abc3ee547aacb45893aa8d83051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>aafa3be4e1c7056450d6448a9b5240e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab79f31eb811252976d01f2e69fa063a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a232b8897f5d90a6bc087d7d010e80b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a91864d348037f21fedb7c0591180b37d</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a081f1eb67488b3a156c7dd8161b7e9d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a3b7f699ba39823b8c1d714e15afc1fcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a9dfdeaa1a297d63a721fb7249ab00e12</anchor>
      <arglist>(const XmpKey &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a43064f07800d084d5c4f9413c704f298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a65b24c7bef3d7e9f2b58edfc19571753</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpParser</name>
    <filename>classExiv2_1_1XmpParser.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>XmpFormatFlags</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>omitPacketWrapper</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da6a8855eddec8e25389a823040a5d2898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnlyPacket</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da7b51cd5b22e4cabd4eac877547e16c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useCompactFormat</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dad1d601f10197dfbb8d3c3ed6a340f9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>includeThumbnailPad</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dac2a833c27e0ab665c40063331f00b14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exactPacketLength</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dac515307dd36921ff42e07a079a33f582</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>writeAliasComments</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da4a0fa937b6711ee5d158a58a20a713c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>omitAllFormatting</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da42e71c96b16e0ba40f193e2e5724da40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>XmpLockFct</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a9563fed47019b19b5a291b58d9b43883</anchor>
      <arglist>)(void *pLockData, bool lockUnlock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a53995152072367fba238ceadfacbaff0</anchor>
      <arglist>(XmpData &amp;xmpData, const std::string &amp;xmpPacket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a39ca42868bff6886b42cf322fb40e7c8</anchor>
      <arglist>(std::string &amp;xmpPacket, const XmpData &amp;xmpData, uint16_t formatFlags=useCompactFormat, uint32_t padding=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a18bee575f3e2c24ef465e4bc513d2b09</anchor>
      <arglist>(XmpParser::XmpLockFct xmpLockFct=0, void *pLockData=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>terminate</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae6c0f4a9eeef2aed456346a206981b4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpSidecar</name>
    <filename>classExiv2_1_1XmpSidecar.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>XmpSidecar</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a3bc91bcc86ea795ff15fe13e9adae867</anchor>
      <arglist>(BasicIo::AutoPtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>afaacbbda6639f45f89d967f2c3bcc76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>ac19b2de60b6af08602da62ef3f937ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a500e5d1a2a314d1613bcd5244eb7c728</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a8e8b416654a71a2165e0cf74c3232aee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2::ImageType</name>
    <filename>namespaceExiv2_1_1ImageType.html</filename>
    <member kind="variable">
      <type>const int</type>
      <name>asf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ad904fece31ef97d4eb4e1ad0a9d78f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae4d3fc0e08be16ccd0ddfb3c674b5481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>cr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a7956fc605d09bc10e126691f859f1a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>crw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a308214d9c007e1c0f7a5900f4a8ce12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>eps</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aeb97f777e3c8bf8cfdb89e24ad6adb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>gif</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a5a23950c2d3c8805cc7fc7bcd6d00e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>none</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a0fa6a19fc7872d83957727f1c1dde0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>jp2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a2d98538b0a8e78b7e53ac19d09491a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>jpeg</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a937f63495908470ff8bf7c94e5ea1298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>exv</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a63dc8eee4aa178e786a81b2acbc4da0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>mkv</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a544db195f1b4f4bc3ee4709ed70a2fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>mrw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a161d087039e63656cff123f4e74071d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>orf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a69661560b65c410d9419ecce0277080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pgf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aebdc24c77964e499108068a4a0618626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>png</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a97fe878fdc25367e8fe5b832211c9435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>psd</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>abd685b7d2282abf733c4469ddd00399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>qtime</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a89d6505d16419290e1c255a245e5190a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>raf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a0d3c27b9ab28a40ef87994a05ffb946c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>riff</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aa9b22e748096affd4343546c9f4a89ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>rw2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a2bbdd4b7b9805eb3513917d33297ce7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tga</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>abd93d59659be97f034f8b8b6b5b3d2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tiff</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae334f0954e8dec6a0a6a27439dfa256f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>dng</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a5290f8d5984d9100bbafb87359eecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>nef</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a331438c9d97350ab90ff5176ccc7c1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pef</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a28e4c07e3d00fc28b0cba330d8f6b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>arw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aa76ab2055b301995de17b452e8817087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>sr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a6b3114550168aecbff4e9a7f575881e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>srw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a934af38458609f0ebe4d947da3c41f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>xmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a04804ec8449a660a8014aa70b68098b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2::Internal</name>
    <filename>namespaceExiv2_1_1Internal.html</filename>
    <namespace>Exiv2::Internal::Tag</namespace>
    <class kind="struct">Exiv2::Internal::LensIdFct</class>
    <class kind="struct">Exiv2::Internal::LensTypeAndFocalLengthAndMaxAperture</class>
    <class kind="struct">Exiv2::Internal::NikonArrayIdx</class>
    <class kind="class">Exiv2::Internal::DummyTiffHeader</class>
    <class kind="class">Exiv2::Internal::CanonMakerNote</class>
    <class kind="class">Exiv2::Internal::Cr2Header</class>
    <class kind="class">Exiv2::Internal::CiffComponent</class>
    <class kind="class">Exiv2::Internal::CiffEntry</class>
    <class kind="class">Exiv2::Internal::CiffDirectory</class>
    <class kind="class">Exiv2::Internal::CiffHeader</class>
    <class kind="struct">Exiv2::Internal::CrwSubDir</class>
    <class kind="struct">Exiv2::Internal::CrwMapping</class>
    <class kind="class">Exiv2::Internal::CrwMap</class>
    <class kind="class">Exiv2::Internal::FujiMakerNote</class>
    <class kind="struct">Exiv2::Internal::TiffMnRegistry</class>
    <class kind="class">Exiv2::Internal::TiffMnCreator</class>
    <class kind="class">Exiv2::Internal::MnHeader</class>
    <class kind="class">Exiv2::Internal::OlympusMnHeader</class>
    <class kind="class">Exiv2::Internal::Olympus2MnHeader</class>
    <class kind="class">Exiv2::Internal::FujiMnHeader</class>
    <class kind="class">Exiv2::Internal::Nikon2MnHeader</class>
    <class kind="class">Exiv2::Internal::Nikon3MnHeader</class>
    <class kind="class">Exiv2::Internal::PanasonicMnHeader</class>
    <class kind="class">Exiv2::Internal::PentaxDngMnHeader</class>
    <class kind="class">Exiv2::Internal::PentaxMnHeader</class>
    <class kind="class">Exiv2::Internal::SamsungMnHeader</class>
    <class kind="class">Exiv2::Internal::SigmaMnHeader</class>
    <class kind="class">Exiv2::Internal::SonyMnHeader</class>
    <class kind="class">Exiv2::Internal::MinoltaMakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon1MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon2MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon3MakerNote</class>
    <class kind="class">Exiv2::Internal::OlympusMakerNote</class>
    <class kind="class">Exiv2::Internal::OrfHeader</class>
    <class kind="class">Exiv2::Internal::PanasonicMakerNote</class>
    <class kind="class">Exiv2::Internal::PentaxMakerNote</class>
    <class kind="class">Exiv2::Internal::PngChunk</class>
    <class kind="class">Exiv2::Internal::Rw2Header</class>
    <class kind="class">Exiv2::Internal::Samsung2MakerNote</class>
    <class kind="class">Exiv2::Internal::SigmaMakerNote</class>
    <class kind="class">Exiv2::Internal::SonyMakerNote</class>
    <class kind="struct">Exiv2::Internal::SectionInfo</class>
    <class kind="struct">Exiv2::Internal::TagDetails</class>
    <class kind="struct">Exiv2::Internal::TagDetailsBitmask</class>
    <class kind="struct">Exiv2::Internal::TagVocabulary</class>
    <class kind="class">Exiv2::Internal::TiffPathItem</class>
    <class kind="class">Exiv2::Internal::IoWrapper</class>
    <class kind="class">Exiv2::Internal::TiffComponent</class>
    <class kind="struct">Exiv2::Internal::TiffMappingInfo</class>
    <class kind="class">Exiv2::Internal::TiffEntryBase</class>
    <class kind="class">Exiv2::Internal::TiffEntry</class>
    <class kind="class">Exiv2::Internal::TiffDataEntryBase</class>
    <class kind="class">Exiv2::Internal::TiffDataEntry</class>
    <class kind="class">Exiv2::Internal::TiffImageEntry</class>
    <class kind="class">Exiv2::Internal::TiffSizeEntry</class>
    <class kind="class">Exiv2::Internal::TiffDirectory</class>
    <class kind="class">Exiv2::Internal::TiffSubIfd</class>
    <class kind="class">Exiv2::Internal::TiffMnEntry</class>
    <class kind="class">Exiv2::Internal::TiffIfdMakernote</class>
    <class kind="struct">Exiv2::Internal::ArrayDef</class>
    <class kind="struct">Exiv2::Internal::ArrayCfg</class>
    <class kind="struct">Exiv2::Internal::ArraySet</class>
    <class kind="class">Exiv2::Internal::TiffBinaryArray</class>
    <class kind="class">Exiv2::Internal::TiffBinaryElement</class>
    <class kind="class">Exiv2::Internal::TiffHeaderBase</class>
    <class kind="class">Exiv2::Internal::TiffHeader</class>
    <class kind="struct">Exiv2::Internal::TiffImgTagStruct</class>
    <class kind="struct">Exiv2::Internal::TiffGroupStruct</class>
    <class kind="struct">Exiv2::Internal::TiffTreeStruct</class>
    <class kind="class">Exiv2::Internal::TiffCreator</class>
    <class kind="class">Exiv2::Internal::TiffParserWorker</class>
    <class kind="class">Exiv2::Internal::TiffMapping</class>
    <class kind="class">Exiv2::Internal::OffsetWriter</class>
    <class kind="class">Exiv2::Internal::FindExifdatum</class>
    <class kind="class">Exiv2::Internal::TiffVisitor</class>
    <class kind="class">Exiv2::Internal::TiffFinder</class>
    <class kind="class">Exiv2::Internal::TiffCopier</class>
    <class kind="class">Exiv2::Internal::TiffDecoder</class>
    <class kind="class">Exiv2::Internal::TiffEncoder</class>
    <class kind="class">Exiv2::Internal::TiffRwState</class>
    <class kind="class">Exiv2::Internal::TiffReader</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>CrwDecodeFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac4a86faf418d2b629ed97de305b629e2</anchor>
      <arglist>)(const CiffComponent &amp;, const CrwMapping *, Image &amp;, ByteOrder)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>CrwEncodeFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4556cb25102656648c8c4d6a06990b0d</anchor>
      <arglist>)(const Image &amp;, const CrwMapping *, CiffHeader *)</arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; CrwSubDir &gt;</type>
      <name>CrwDirs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa296ba0574089411f0b5f2ab9c8fab27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TiffComponent *(*</type>
      <name>NewMnFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade7f78d50eb13bb463763662e70076f0</anchor>
      <arglist>)(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="typedef">
      <type>TiffComponent *(*</type>
      <name>NewMnFct2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a64e0bd936803eec7503ea81f345e98d4</anchor>
      <arglist>)(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>TiffType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92e26f19f175769648d77d532e3cbad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CfgSelFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa071cd867a864848b86a3fcc2d22b009</anchor>
      <arglist>)(uint16_t, const byte *, uint32_t, TiffComponent *const)</arglist>
    </member>
    <member kind="typedef">
      <type>DataBuf(*</type>
      <name>CryptFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2ae64d39ee88304c89f1c6e87d81bac</anchor>
      <arglist>)(uint16_t, const byte *, uint32_t, TiffComponent *const)</arglist>
    </member>
    <member kind="typedef">
      <type>void(TiffDecoder::*</type>
      <name>DecoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afce7181e4775c5fec3c580c08042b1ca</anchor>
      <arglist>)(const TiffEntryBase *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(TiffEncoder::*</type>
      <name>EncoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae1dc6f098c07a468066b0b6c99b8fdd9</anchor>
      <arglist>)(TiffEntryBase *, const Exifdatum *)</arglist>
    </member>
    <member kind="typedef">
      <type>DecoderFct(*</type>
      <name>FindDecoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aecce2cef61ce6f676b6d1ce7c730cd59</anchor>
      <arglist>)(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="typedef">
      <type>EncoderFct(*</type>
      <name>FindEncoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a32b5e2472f7569eefc020ffbea004aea</anchor>
      <arglist>)(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="typedef">
      <type>std::auto_ptr&lt; TiffComponent &gt;(*</type>
      <name>NewTiffCompFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6b299263887e0d87ba8f91b3698e674c</anchor>
      <arglist>)(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; TiffPathItem &gt;</type>
      <name>TiffPath</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab19b0d2996c210036ff4c659eac717eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IfdId &gt;</type>
      <name>PrimaryGroups</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa49f2be6bd01a3d9b1dded02bdc3b487</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidDataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9a738b8ff6dde69aab2f8a938f0bd27e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>valueData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9ac2f5ba074114014d76a12f05086d5bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directoryData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9ad6247a83e06b65ccd57d6a6816ed71e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastDataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9a7429d99a774cec584b634c76b0d31bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IfdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifdIdNotSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5f70acc845d36ed11ec8b8db3ce04944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd0Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab827fd1cd84f808c789a4666ffd439e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a925eae112e9aef20d09e9d4b6bf3cc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0afb28afe4cf828a11a8347a759d83fae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ifd3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0abacc8b39450ac577b462714e19fa9501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exifId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a70ad04f537de4df5209e97768df1712c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gpsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a911e7900a4892e6645aaaf3a3ef492fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iopId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa210f12e76e96954b4cdcbd12730b99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a94d7630cf5ff34f95c930dce625e5063</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a303393d91127c6790217a6a38fa7c4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a1f80a3befbe170f712b392c3b7036d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae9f7babec97ff302bc07180f420a1de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage5Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a54599b2bcfe6f36e938831e54da736e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage6Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a1dc20f370df30c306cd2378dc053397b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage7Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a161a78a4d43fa40009ac662a6ad44b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage8Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a987fb493b967c50cf7a0901c155240fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subImage9Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a9c57deb103bfd7db3fea8312db4b3ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subThumb1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a94ea8499c61095d4781a110c83f4a954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>panaRawId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a40a132541fb48b88c6f9579bee83e95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mnId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5f4c334aaee8d4728799b5f0a03554b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a8166b7fc84114b8c7596704ee9598f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonCsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ad3b4a3804b319afa6197a729c662db63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonSiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7306e49d51e83b1918d8e07ea42d09a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonCfId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aae1a86eb516c552f2f1da6f5db183f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonPiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a6319e7aab3cf03ef007a6408e188cd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonPaId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa208ce91aa609ee2fd4866ffb63597a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonFiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a63c17eb2751ad40efb29597164f68e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>canonPrId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a66d5cb49a32f9990b3ba45024588d253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fujiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a6d8ffec2cd9129ac6ae9296d67c166db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a15b67841852e4e001151695af0a4274f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCs5DId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0adcdf9bf604da65349f5f46035955ff61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCs7DId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a81b0a46a386b9f8f3bcba40b6c61794a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCsOldId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac9e8ef8aa3a42f7d42f8b46dd716aae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minoltaCsNewId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab31d3e6b93174b7643326dbb19d9daf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikon1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a973432b24a49e3c26c4a7ad835f243a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikon2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ad4ad28ded34157f0091087649f01763b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikon3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a97d8f7cb473725a394003e1026344abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonPvId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a99ae36c902ddd842575196e35452b837</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonVrId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a859a62c74f84f3eb4f297e90d6d5e2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonPcId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7443e13f66579d22793bbd1d28384601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonWtId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab5c77f21aa5423cb9929a7af9a1ce742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonIiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2d027d593eeb9b47dbbca9b82f1f05b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonAfId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aefc21fec07fc0977978dff1a85d15876</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonAf2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a92ad28a3513b9d25edd3c6fc99ad7cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonAFTId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a81463cf63e367c95c866b354d559638e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a30e23867919262c4d1a4f2b934514948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonMeId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a527eb24ccb5881cce742cc4ea946d672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFl1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab01bdc1ac0b1f1bbdec3aed6322ec10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFl2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5b28f3b10eae56c01ec3209a2dae026b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonFl3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa247c8fcfde52a02332ebc96fac6ab1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7f592821888da817d427e0190d71a9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a49e5aadade435e44286122ebfe6a7a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a055a7d5abe19e60be1833a622ff4b01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab4dcae1d12a489829e133194d7561e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi5Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae866a2baff4910a787a39cf05a0cc580</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonSi6Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a1188bfbd3aa05ef7596f4d4a5d986aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonLd1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0abda20c759d4eb39f4e7c703c06bde797</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonLd2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac4f235b76e3606e5daf82319e87f86d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonLd3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac91de8c72c6592dd507ccb843cdc7d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab36174ea496a18fcc3c07e75cd95255b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aef6193249a30b8fd7ec9d8a2191f4516</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb2aId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab6a2acea43d24765702f8d606072fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb2bId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aef2c1fe9cc17b4c362a187b4cce53385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae6f68cab663e287b4c55d1c9895af6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nikonCb4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af3616a6c007b0302c3903dd88b2f0415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af5a69cbb6c3c61ed1a37d476480e715e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympus2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2639815de2634fd17c463e072404b42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusCsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a0ee2db27cfe8e8c681d1ecd72da470bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusEqId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0acd3cc7c1540b453b64ade6bf27e9c385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusRdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a9d4e0f059f501376b09742278d74097d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusRd2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a0d140b6df46f9d9dea8d86e3fe663f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusIpId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a741a1e76f5622d528db4c17816bc8b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a9a76b9389ef8d772249aa01de6afc33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0abd11adf65ec1e72397d68776b5d67a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af41418f4cf3758992fef3b798f1f0543</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe3Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a296d800fb87953c8019426da93b166a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe4Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ae16dbece5aadba3808eed906ee46ff01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe5Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a73a2940f4e635d8a41383e1cae15d8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe6Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a15cc609646b852410d3689813efbabb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe7Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a691571df18cfbf65cfa5f6fef22a6c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe8Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac764f4a864e62e0674d7213e2d80dde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusFe9Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2273507b0b3c1a0427e8314ffcff5d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>olympusRiId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a866e316c8c6df8fc659a0ab63e59598f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>panasonicId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa3f0020531813834566def6a69e7d583</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pentaxId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a0b55b584302e2b1fa97c38f2537d9383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pentaxDngId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aaf66933f5cc84d8df58d2cc4097eacb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samsung2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ad905f7b519f3f1389e1f16d9f5c45ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samsungPvId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a14e0fdd898b459d929cf1f93ccf847b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>samsungPwId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a82e02cecd5dc8348b022b3f5f6687596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sigmaId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a3b33313d128a2b8548580c63ffed7429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a897ecc99711785878f1dd2e74f3d606c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a6651833ecbe312c1fb26d679e3578e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sonyMltId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a960ec38afdf69fa3f4c58194afeff9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1CsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a26ed730fa812898311e200d32a76fdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1Cs2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0aa78d2c5a3b9f0164ab3fc8881412a044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony2CsId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ab15a443d0061e8459c822cb051064682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony2Cs2Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a84643ee8281b4f87d9698e8f8bb4c735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCs7DId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0ac03553e3be543073dbf08d667e071bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCsOldId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0af31dd3265c3991a2dbc27f76b02ee258</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCsNewId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a7056044308b37b923475e0f2ef697287</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sony1MltCsA100Id</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a890c7eb91e523efa69de424831b517d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a5061052d02e1d2489538b0498fdd8555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ignoreId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0a2045e69453fff3e3f02c48b8450c6a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SectionId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sectionIdNotSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037aa4eaa65f8feeb10a4815a108e72f9e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>imgStruct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a56a676cbbb229edde0f6b01356fa1200</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>recOffset</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a4626b45666502b7e9925d8ed560794d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>imgCharacter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a21d61d19dc9b3c476fac58de81f79c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>otherTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037abbaba699dd13bbe162bbff5d1557c1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exifFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a0b1b93faeb3530b449986195a876b6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exifVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037afb8432f347eb9baf6fd47e09e11d6bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>imgConfig</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a495712380135463c834ccecebaab9616</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a0e19b84d6786c4d84a5c217b832bb6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relatedFile</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a82316d113a7d666a2c7ce5026c7d5f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dateTime</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037ad398ca6270548001af66f94a86a78036</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>captureCond</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a3ff3dee457960f027da8e0802a95b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gpsTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a85e98b638c0b4c205747bcdc252f276f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iopTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037af0d5a2eae9bdc8ac9b295ebc6b46ebb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>makerTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a0cfa76b66180670f84022f2fb5fb7742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dngTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037aa79addef841d9ab0cf978110134f2d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>panaRaw</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a9c9fc0041fda20e5dc0532c4a13bc6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffEp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a05a26f082a2ea1320eec0dffcd9ee11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffPm6</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037adf64b85bce698b2bc38501ead77142a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>adobeOpi</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037ac0d9c80523049e81227e4809b64754ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastSectionId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037a83861530eb00a310af3d195d9c6e6f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString16</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a273d283e51c9ea3ff582b0c11b239997</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aebe98371d3ec9e0f49f524a195312b6e</anchor>
      <arglist>(const char *str1, const char *str2)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>returnHEX</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a86dcde538eed0cbc387123f3690df2d1</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGUID</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a87712a5fa0e08b6da73e453c5a8e2ddb</anchor>
      <arglist>(byte buf[], char GUID[])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isASFType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a680b6f58536004e932fd41e1690bd909</anchor>
      <arglist>(byte buf[])</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getUint64_t</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab7b76ce22f1a5dec9d41cda3875ccb51</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCsLensByFocalLengthAndMaxAperture</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a44720406696b4212b31d6e5550e4f2ca</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aea3ff9e44495fcbbbdfd56e8a8b5dd42</anchor>
      <arglist>(const TagDetails &amp;td, const LensTypeAndFocalLengthAndMaxAperture &amp;ltfl)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>canonEv</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a98d2248e3f1df52f23cbbdd18b380a88</anchor>
      <arglist>(long val)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>packIfdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a410460f90daa87c9a9a16639b2a2b21f</anchor>
      <arglist>(const ExifData &amp;exifData, IfdId ifdId, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newIfdMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af45d0c588ae7fed9a114360ae0d20413</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newIfdMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac644e2b25848c7b08b4e208c977312a3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympusMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae6b8805c882b30f4f992ec3d11691ba2</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympusMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d35675525b7e091fbb9318a51a675ef</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympus2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3abd12b311e188910521ce968129f11f</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newFujiMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a260b34a09cec125f39433614ac11d989</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newFujiMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a41af8e2dfd2746beba18be9f56469720</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikonMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac52719d1e3bb994008772f83f609ff94</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikon2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab4b074daef4d895c73daf9bdb4eee69c</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikon3Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72880d9402840d41f933b1bde32150bf</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPanasonicMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50c93fb52ea46f8ce71a02a47d6a35b3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPanasonicMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1139bcade370b885c3dc8d8e2b316e16</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abce03865a0aa274c91b8203a42e31c13</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe063e35f4659ffb946bb0ba137293d3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxDngMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acccde413ce8bb61feaa3ae33daff4662</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSamsungMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab7c1aa880133b5320e9e784178554fb8</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSamsungMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab9bb0cf4e71868e34b63dcb12edebde5</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSigmaMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a10f30799b5107df59489cb5cad20f961</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSigmaMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a940ba1982bf1b9c949aa44903648abe5</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSonyMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50b1a1d205fa295a3a295634e56f215d</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSony1Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac783235ad92b8c31db4435304aa37c75</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSony2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a34fc25b42a3d42f0c0cdd8ab1e56a60d</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nikonSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f2631eb24935814c8f3740cf459de4b</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>nikonCrypt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a793f2472ec54d909cd6032d01fd21dae</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sonyCsSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c259094300986472ea5fb07e4c0cf6a</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>returnTagValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7756d7b0bef2d0ea467325773bd596d0</anchor>
      <arglist>(const byte *buf, long size)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>returnValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0085f842ffb7e436d93141f14a2e2b83</anchor>
      <arglist>(const byte *buf, long size)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyLensID</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30a4a48f32ff30ebd5b2d3f287515fff</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adf85a4e392dd45fe89e49906c674e8f4</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyBoolValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9faad19bdbf5d9570facac8bd15e2a6d</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyBoolInverseValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abf1f8bcb9afd33fe9cac0d921efae23f</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03460091fe8b38f7aaa9706fdf415f05</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyLocalAFAreaPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4941ee5b6907a08ccf3ff5615356a0bd</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyDynamicRangeOptimizerMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9b6b551cc59cd673b13ad3b6fe9e247</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyPrioritySetupShutterRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0e743cbfb656a46cacfd3d0ccd039eb0</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyQualityCs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a313428300476feea2fc74c472cd681c3</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4e274a07692451da226b7eff38fd4f55</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonySceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa70d5d0e1536a569e79a91b6d08b8ab6</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a025316796e05dab3e853021926bc7c1c</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyTeleconverterModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a849385c64f0449f89df16fde5b29b14f</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2c1abc6e530322beb4d094d165406f51</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyZoneMatching</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad842adb2bee340da1b26aeddfd00d3f4</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyFlashExposureComp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f32fc9a16c34eb9c74da36778d88056</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsQTimeTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8cff4d3c70203a7d60a8eadbe4e29d94</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ignoreList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a44a83e250db3d5ed946eff7d41975639</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataIgnoreList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6e372a21122dd64af04183a691fc1ac8</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>returnBufValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2603d9777e29f6ab0927b3c0a8b86549</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, int n=4)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>returnUnsignedBufValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af2762d3eb6ae34fe8ff3d98e51cfc90c</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, int n=4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuickTimeType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b934fa146cf69592b8e29f8159c4379</anchor>
      <arglist>(char a, char b, char c, char d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsRiffTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a29c1e783acac8faa95f447c8fe38af6b</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCameraTemperature</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a67fdbeec45f0dd13eb85357e4684607f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printFocalLength35</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acbda9f0e064153ea573edeaf2579b656</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printValueMinus4</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad04151bdc12b9027e7edc3fe65517e9a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>ifdTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab75bb1bee28538bcb081291e8f3b2396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>exifTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab2cb95524a5d466ed5c78690d171d4c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>gpsTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81d1579cf2385261189c76984227959d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>iopTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5ee3671f4518639ff2bed7731d6c750c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>mnTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad473f74392cf835fc7607e2e36736a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>groupId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8d40d5f0bced57d0a6564f7d5bfe9494</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ifdName</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6a14670f47e8b636f0d0e24913638a6f</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>groupName</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02590bedabb5438d17b309363cc9ff2f</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMakerIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a080ea8768c028af335952d166ef3e2e9</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExifIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8ecf0d2152798e13bf5c0b2edebcb78</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>taglist</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c3a170a28ffa4de54e55435e7d95bd0</anchor>
      <arglist>(std::ostream &amp;os, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5173c535856e05763c719329f89c843c</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a741128c1e42e2dd283160b20c43b215f</anchor>
      <arglist>(uint16_t tag, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6989cdf7bf32837cc6bfc455d32b9428</anchor>
      <arglist>(const std::string &amp;tagName, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tagNumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7dce1ef6847f8f14400f3e0ac0eea4ae</anchor>
      <arglist>(const std::string &amp;tagName, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fnumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7de99c06937d5d362fe7a23c7eb466ee</anchor>
      <arglist>(float apertureValue)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a22702f724f37509d0f690eb1c55a708b</anchor>
      <arglist>(float shutterSpeedValue)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>toTypeId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac248be2a2f3a3d1218625a2d2e6dd40a</anchor>
      <arglist>(TiffType tiffType, uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffType</type>
      <name>toTiffType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8d23237963473f87eebe4bb10a1d41d</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpTagLt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7124ec69fc3bb353bf854835d318b9e0</anchor>
      <arglist>(TiffComponent const *lhs, TiffComponent const *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpGroupLt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acf7fe96fe3d50cc6b38517981323c3bc</anchor>
      <arglist>(TiffComponent const *lhs, TiffComponent const *rhs)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffEntry</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa1d6043d89dc221f1d50222b15b99b0b</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffMnEntry</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2a925149f6f5e09eb137d72fb614c3f</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryElement</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4de77f0776bda90453c1ccd73d4855f0</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTiffImageTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ada054fe3aa5471a1c547503754778613</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCombiTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2d2801b3721349edfac2256fc972ae27</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeeed3e68dbb466e97978cb74f0b34e3e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTagBitmask</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a88a9c00bf994e28c5a802f70f5654ec7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTagVocabulary</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f50cfce460d4cbc48d20115d685e666</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffDirectory</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeec6ade2eae9764629f453777c3ea2a0</anchor>
      <arglist>(uint16_t tag, IfdId)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffSubIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab037109d535a7238c846ea524b9324a9</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryArray0</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab93d6c8c01a4098c8dc5d365c701bbfd</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryArray1</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab529f54a9b9389ef0aaddf4374d678a7</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffBinaryArray2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a23601e7f95da87343295bce7c2f90545</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffThumbData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae73cb7cebea292d8cc9f0b7be79bd3d0</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffThumbSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50c3212aa49894c88b860982b3f7db9a</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffImageData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>addab35f66b5c3c69178c8104a41f8031</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::AutoPtr</type>
      <name>newTiffImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab011090a79750d62ea73b39e41a9fc9f</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="variable">
      <type>const TagVocabulary</type>
      <name>GUIDReferenceTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f3d9d8a5974f3c7048f46a06d837b52</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>audioCodec</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad270a34b5a2ea1556f0bca5296b07824</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a44b3118109c8af7de07ffe7cb4399436</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonModelId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aad31e4154b4bb03421663f2f4150feb1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonSerialNumberFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a678e4ed253900edba11c4cb872634f02</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonSuperMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaefac13a1fdc1bf9a0e04d56e2be2af5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d0022beb52d048e75057a4f4a5cb018</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acd8dbcded227c3e558bea8261b9e0fc2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2f931e2dc8391a03fdad0430b2a23a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a04de16fc89fca07066b779d7e1852d6b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsDriveMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a171771d8b544f3174fdecd9f737effdd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6f93f27c32bfd19bbf3d7a8254e230c2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a31103aead1a0cba1a8706fc89f496d37</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsEasyMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81261b3ae67fb2989c925ec9883c99b3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsDigitalZoom</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a37e2ebb756b4e8f9005aae04845e05d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsLnh</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a503d29a4c9353e460e50cf937a3b0065</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsISOSpeed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a722c8d2572f9b695ed651cfbe7a6f649</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8ae1de132cbf08cde471611fa37ad280</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsFocusType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1cbe1acbdb48fd5d281448440a57c31b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsAfPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adfb962fe3b794cd8f3e9e007819d1831</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsExposureProgram</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a116758b367b3acac5227919f1207b971</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a9b0892554d64d9f960e25bf309c75f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const LensIdFct</type>
      <name>lensIdFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2048bd650f56ac2703af1ef80854f7d3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsFlashActivity</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a833e83496f5df5eba60e2a2e1f541b5e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>canonCsFlashDetails</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab9e5c1fb5594ccf13cc8ab90604e3e45</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsFocusContinuous</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8270a998eeedc70a81c7e1ef8edd325</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsAESetting</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0104be0da453eb15283718cd98147dcf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsImageStabilization</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab185b162cc41f7ecbd4be61cf54c1513</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsSpotMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a55c5dfdef7c5f3c76df6adfa1bec21c5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsPhotoEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e6c3797440af4ae4a5af99debdea844</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsManualFlashOutput</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1267b8f87667be01705a4c51186cda11</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonCsSRAWQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af56b8c8bf86a8519ca7cf93e66f59633</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonSiWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a608d49bb606177d33b7d934c9afab874</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>canonSiAFPointUsed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5133cab9688a35ea56db829a5614e232</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonSiFlashBias</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2020e38236f861a0c41a8570a759f5c5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonPaDirection</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4e4d32ddf4f860912cb33bc85447f297</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>canonPiAFPointsUsed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab934ff57b88b5a940f756b4bc5c9ebe7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>canonPiAFPointsUsed20D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a64be2bd73b20efb93e31d91818a7e4b6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonBracketMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad17cd5326b99a0548df036d6faa39f87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonRawJpgSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a78821343fb03954b03efdf2f5938c523</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83bb09cf04f08b953ad408bfbe1bd7bb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonWBBracketMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad66ac5a7f5106e9a65b20ed0b4989d99</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonFilterEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2b6b7813875962b1d52f068bd7140d13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonToningEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a10e54c93c283b7ab038b294fd20765</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonToneCurve</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5ed6d4d1ba7bfe0ed31c68db72214a6a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonSharpnessFrequency</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2dd2d54c73babb16bacf97b54d9b9055</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>canonPictureStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeab0172a988fad6a5c14591b3bf03cbd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac9668038671aa7c6dba2dc9ed72d06de</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1f2e783225d917e10cd75e1ef7bf4de9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0630702062756abd6e35658624d1c563</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiColor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a64befc1b43ef4e3b16a810034b18f155</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afae6ab976c573c3d0998d59a26259e92</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa6e886af07ce022631c2a647a2e231da</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a11f1ee5f2306c119629ac6dcaba69ce3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiPictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30029e15108b5991fd6e2eb31d5042e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiContinuous</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad110a405f9f9a8eac0858c986682475a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiFinePixColor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac756f8f0611ab55d820e656c74c6a2be</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiDynamicRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a791d1f6edd89fd8400afbfae6b182761</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiFilmMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aededf4c1fc08dc659c2e25cde2592748</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>fujiDynamicRangeSetting</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83145338b94aed20e9636a2fdd322bff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const NikonArrayIdx</type>
      <name>nikonArrayIdx</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aae254f29ec9d28deac2f859677a2da1a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>compositeTagsList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af58d88481e80bf779c7d16a9afb9c496</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>ignoredTagsList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afdc7043114b212f72d5993f2ae90c5cc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const MatroskaTags</type>
      <name>matroskaTags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a05ee5fa927d21ec7f079a74577d10485</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a48126c41c15e8676abbdb1695e7cc95e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a636b19873c8b1f16b1e23fd03076258c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageStabilization</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2ea50e81e1eaa3b9581e28b92a7d6ad7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaExposureModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad9631e7e1a811c988c1acfb9651bb41d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFlashModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a39efe809e17f5a33950cffd371bfd031</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7fbe088a76ea2b71cae9b121b39dae71</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageSizeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02200ea46c74bd2ccb237db0ea35d64f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageQualityStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a31b095baf7d51000ef822473735f0a67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaDriveModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a78fe9f5da54916d875c54dc2cb324e9c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaMeteringModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a38dd49fcacce0f3d219e41d532e6a374</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaDigitalZoomStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2e9c9f341a35b7e467e16e0c8c28ba9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaBracketStepStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b1553c260043e879ba4af79f1a9ae84</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaAFPointsStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aae7c9f25f06fa24eda995d9ef1278dce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFlashFired</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a181344832e5b2692de67a9479c54dd03</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSharpnessStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2818d677e494f0d4e782c948ac9b503d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSubjectProgramStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abb64b61536e4f129753d7848fc385dc6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaISOSettingStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>addab23815b32097ed82b3ea43107ee0b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaModelStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab8e1d3c8432c51298c2f89fbee9900f3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaIntervalModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aadf982774dad187efe32ec637ce108a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFolderNameStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7bf5783e5af9fc67418fb2fb4eeb4460</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaColorModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a86da7df2dd4bb192d2761fc683486fba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaWideFocusZoneStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac57b5dc5b34ab126589025d885a79f59</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFocusModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46b72f13a2bbdb2f851c5ef33490ce28</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFocusAreaStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a41f286c8521b605899d44c16fbe6b209</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaDECPositionStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a792327ce3aaf15ce1aa1853839a7ee84</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaColorProfileStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0d645ae45bf5404d227b64fd4867fa73</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaDataImprintStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae66a5bb29213debfbc920af375662629</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFlashMeteringStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a95aa8d3502d74360929e9c4bfb4d9347</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaExposureMode7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a390d752bf5b814f1cc9f7e45fd2a8b76</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageSize7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4883671d63f58ec87a281e8d9b46b092</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageQuality7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0e7be377600a9d3a3d7c577349520a83</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaWhiteBalance7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a11607ec03795cced361760bdb18aa052</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFocusMode7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab64c0cda77eaea1d9522c80fbbb528ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaAFPoints7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4bf8058aa398483ef75b97c4aea777bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaISOSetting7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2eaf63ade9409c3100e5be3064b0dc99</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaColorSpace7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8305c51ce92578261ebd0484334b7a4c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaRotation7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaf278186981bf241de56fd6f08118ad2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaExposureMode5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a821f4e88ea7b89b2316a277368bbeee0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageSize5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac317f7953333d284aa818ea53e63e875</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaImageQuality5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad39b59aa951e9c2dfa142545797d1b3f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaWhiteBalance5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae2c1700d6322c2e577aa7c28222b6756</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaMeteringMode5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a56abe53cc9e51ffbd579188560f148da</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaISOSetting5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8651748e54ec3e5a72992c559539d88c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaColorSpace5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a490c4c0286a664f3415fc63dafecf0a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaRotation5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a59d8367dda6186779281285af4914016</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFocusPosition5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ada265bc13f051bc2cffaa32b56d364f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaFocusArea5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92bd114e0a84dbbccec661254d2d847a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaAFMode5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a035d33e6c29418b9c21301bf3f69cc70</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaPictureFinish5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad4eb1b6aea41d6dfab16807a54940967</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyDriveMode2A100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a76acd30a3da7b1158115e8ea72a0ea1d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFocusModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0358d331267f3133ea703b77baea2194</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFlashModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1b3d9a83509a9c761612110e7d73690a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyMeteringModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab35d5194bed3cc74581ca7fa29727557</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyZoneMatchingModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af4ef2bce5c7ea71fe19deb510a77501f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyColorSpaceA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5157c2adde3eed27d94dcb113d3088d3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyDriveModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5422b7e6dbd0cfbeed77e287f8766182</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonySelfTimerTimeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aee68651a5b2478149f13f8c4e8fd9dc8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyContinuousBracketingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8683da286f1304f418f0e78363e85bec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonySingleFrameBracketingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2a1d6976baab1f962883d2cc641e4688</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyWhiteBalanceBracketingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a70d1b332b4bf4f0584e9720d315f7dae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyWhiteBalanceSettingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9cec26c1e0f3b4a802716f2291713773</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyPresetWhiteBalanceA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6198da6f48159f8b1814863b1cb45361</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyColorTemperatureSettingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a32494577684a40fbd3587d503985fee4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyCustomWBSettingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2659676674265f7233c4a13d055393f8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyCustomWBErrorA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a45802e88cd668eae6eb928118350639c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyImageSizeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ace386ee9801499d563f07ccae185c75a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyInstantPlaybackSetupA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad615bfed8d44396fb5c7d504ac46851f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFlashDefaultA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a80cd30cd401a5cd3cf7a6859ec949353</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAutoBracketOrderA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a63cafb3b94ae0251494b64c511ff947a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFocusHoldButtonA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad2ad9dc996000cee07e06962d57dfe9f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAELButtonA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c8a4855234c0d52c81176285cee264</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyControlDialSetA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aee3870e550274a8fa1c77ccd4542e733</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyExposureCompensationModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe13b90c6180b0d6247118dc6bd77615</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAFAreaIlluminationA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a444499d55449f4335b84159099cf813f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyMonitorDisplayOffA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a06ab05007a48cbc7fb9f4bc710df4588</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyRecordDisplayA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a14014dfde801de530fcb9a935f591586</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyPlayDisplayA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5f498899297ac01c71d6426bfd15484c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyMeteringOffScaleIndicatorA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af793472089189998b07b83abbf7122c6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyExposureIndicatorA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af09c7b777cfc4b2485f3523c3fd57b7d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFocusModeSwitchA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a647e2da893d8202a8a6340306f7a067d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFlashTypeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8f1b5391f384e913e95b7168d8d7c327</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyBatteryLevelA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f7e3761e14dfe867d4a4d8af46696e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>TagDetails const</type>
      <name>minoltaSonyLensID</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a634ee06b9381d3fc4d917f5cb493b423</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9ec73ab244a88fac77d1a9844c07ee7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyBoolFunction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2cb1c5528920b688793819bee1199f27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyBoolInverseFunction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3922350476934f10641792ceea18691d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5d4fbd4b40c01e2b4a02f1712d3c0f9b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyLocalAFAreaPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ada30b7003b59f606bb1a36d8ccb7c378</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyDynamicRangeOptimizerMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a71304f89aa014f0ffebe0aabd12d12f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyPrioritySetupShutterRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab3ff408b7c3ce1efeb36a834db71be4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyQualityCs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adf7b2ad729a981ef9c2545f110345ade</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad44071d598ae00ee7cfca8d168a73181</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonySceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a061a34c971e0179a722e20e455f69bb9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f5d314452fe050796f7c9b752ba055b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyTeleconverterModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac0f1adf8d8895fd161ae2986f0e0b5a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6860c534cfa9a7103707598342cf5a54</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>minoltaSonyZoneMatching</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a562ed626a642a6e710f005cb78ad1621</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a69b61286c47e76cb159754709d3162e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonOlnh</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad346d5ae478e4cb4bab85884631acab6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonActiveDLighning</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab69092d00eb8c09e501bda0b0c2f0669</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>nikonFocusarea</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a446ee917785b5d32be959b5c3ffc11d3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>nikonFocuspoints</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae77c02da7c28bf4180af7ce8ce82b8a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashComp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad3cb89fa81157e07f3d4fda21baea943</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3f282151f86036a5d8067e4f697bd4aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aff9258f1b099a005e51246405f1f738b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>nikonShootingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a16442f8fe673453d1a72bf079f426bf2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>nikonShootingModeD70</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae759df96cfea9b06f25d59c763006d5a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonAutoBracketRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a880d2501fddea52ed7ff93055ea0b271</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonNefCompression</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa36b796744f762f80ab157727deff486</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonRetouchHistory</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac426a5e86c07f02c738f612162072b94</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonHighISONoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adef67d82f6a8638ef2a1d0d0b701fba2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikon2Quality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2977de262765264483515d6282b67017</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikon2ColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a994f49baf5e1b6cb1bc7d02c873ce990</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikon2ImageAdjustment</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a505f8b7be642afa6cf56a6f65065d33c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikon2IsoSpeed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6cb258442a0ef1f0743c6bef7cc1d316</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikon2WhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a345491f8c809b11bb84df480905b32d2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonYesNo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa5a925f06ac4bc609cdbab6555487c1b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonDateDisplayFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a53b3ac05cf780c2cf3bf6bdc0c0c176b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonOnOff</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af22fa6c776293c494cd92c7feebf4dc2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonAdjust</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa1c69b08b24d179bce846f605631197b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFilterEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad8ed8e43e9f91db3a0f6d6da8762d6f8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonToningEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6330fdc6a098f4a44d933a47553b51a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>aftOnOff</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a87e5412477e9e222c15af0bf63041b26</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonIsoExpansion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa411be0eec95875ea54bad403a518841</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonAfAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab1ceee58486a74f8b3b9c9e432818c74</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonAfPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a966b932dfd64488e51bf78e6eb8b04f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>nikonAfPointsInFocus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab0e1fd265be39ed61c5e724119088edf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonPhaseDetectAF</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5dbdb07cca0be793ce9f81f77705a20a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonMultiExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa9fc40df7b5251208fd6d58e990054d6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a40ed619d30cadba1478cbe0edcaf92ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashFirmware</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af5a3638c2f31ef4805661671d52f6d08</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashGNDistance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a43ec13266c77c8a635bcb7449d6a6ae6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashControlMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8731e5a17fe621b3a90352c0922d956b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonExternalFlashFlags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a241fb9dfb638cc2f7a5e2f0d57e60133</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonFlashColorFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9375b58d1fc3e340a7fc3d1ddd92ccca</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonAfFineTuneAdj1</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a26934141e7abd2b0bf0c72ff78db72b7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonAfFineTuneAdj2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a771482e62aa132995d8f3ad6da88b6e5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonOffOn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>affed8ce9550489aedfeb23d829c21111</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>nikonOffOn3</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adb02a696102d586214a0a74465cb0d83</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adba91d20b5a570049a82614691c8831c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusNoYes</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac29710c4ac7fdd6bbc668a9fe7e39346</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1b5c5423f08a712d7e0a90572bf77af6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1e100e1ff79146232dd1a8a48df683ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusOneTouchWb</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae9e604a8c0d9679df5af8427a28cf631</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusSceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afa9dbcfbbbdae651651c94208413865d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFlashDevice</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20f57ab9c3f2cc72fe2ef1fa4e02be9a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFocusRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a38429942efad2197f0d7b6bc408a050e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a25ca273dc8de2f627bde640d086d109c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a88b9db1977dff96fcd7e021ff0a79cbb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a109aae0fd15fdb691b4dc951eafba286</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusCCDScanMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad2ca9e68152e2ff446485834a5c430f1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8a7e7363866b0376dda375dff886ab31</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad663ea3ebe4587f468cdaafb057edbf9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusMacroMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa5ca3423866a384643a09b2d3ac72aea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusCsFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7243875f1a9c34d0a2914a77a65141ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFocusProcess</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a995989f370ea35525d996bdb1c0905f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusAFSearch</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a119a23b1a2579c2981c423feedb45d8a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>olympusFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>affa93a7ccc2342e76e61198a9fcb0093</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFlashRemoteControl</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a927653832b3bc31c2bcbbbcdefa369c5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFlashControlMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a384f62726eaad4039c62bb2f7d3042ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acded634ff08fea90686be4ee56132e52</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusModifiedSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4411f0e99766b5ed9f2d2b9824f5ea7c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a49f51fd591fa9ee708ac60a46bbb2986</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>olympusNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a24d1824e3cb8a8fe37b3e5fcc91dc22e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusPictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a24e73f1ed44df6d779fadd890f54fd33</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusPictureModeBWFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a451cbe6a74b6b4ef263fd952b5440d1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusPictureModeTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adf00460be3eccc2bf4f2bc3d443e688d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusCsQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afb2f19a74c37d4a79283cdc630d3af52</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusImageStabilization</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a43e0619631c2b95618c7de65e99a734c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusEqFlashType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a422cf005261e1e6c8f85238ebab47a7c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusEqFlashModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aedb3b80885864cbba188f8d6cd65e679</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRdColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a722077510f591134bc188c8fd2c6d927</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRdEngine</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3230dc72172b635b9862e5cf5d65b002</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRdEditStatus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe52e30874f31d3975fc8b78dd08401f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetailsBitmask</type>
      <name>olympusRdSettings</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0eeb5902adb9b30643a9b0ae7553e99d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRd2WhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac40f69e6c5d0c4cdfa8b9749e848c7a8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRd2ColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad2b3a6c4bdff79b1ed698b28ccba105c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRd2Engine</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75bcbe7b1d30a4ac3d6ee98016376776</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRd2PictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad4c3e3645b514e63a2a2dab5de899350</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRd2PM_BWFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2ac81d3ecb99497a3d21e126686d7671</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRd2PMPictureTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa11b0808d0661f8526ae380cffe79150</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusIpMultipleExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a99a130555e01fac984d188048284b1ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusIpAspectRatio</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8defc21795480a222fc9d184bddb25cf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusFiExternalFlashBounce</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a252128f60944f9ab004a4ba047a39755</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>olympusRiLightSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeb59962fcfa11de686548da668077987</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a25698205ba5ecd2e3a43b0b378051492</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3b5e8835899504282b127d84d3856434</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a88750d12da71f4f0f65ad3b0c7ebaa7d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicImageStabilizer</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab5c2f958dc5f270a6064f864a5106eb4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8896b03957ac1eaec5e3600c28d3f904</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicShootingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abb0e4739085cc918e1f964773eec18cb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicAudio</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a590519b6fc3eafc84304481349035c70</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicColorEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a52ac7cdcdd99d4159de929a914d6a6d6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicBurstMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1b8d610ebd9f5f00b87ccd1a1c826c2d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afc190caae15904754ef662c85df8b71f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a899750075080ef94fd6e82b3626bc7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicSelfTimer</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a112baa09228953cda5450fcbb5afac1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a162f3146194576dbc7ecd4edba073825</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a512e29503fc05abf578d4071b632dfda</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicOpticalZoomMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af547de3da09b8f0ea5b12917392c00e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicConversionLens</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6eeed37b0e6dd902aba942ea3798827b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicWorldTimeLocation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa3e7f619022312b61c6f8ad54d334ee9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>panasonicFilmMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac9f9c7b252ca14fe1aef02d5c1dcfedc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxShootingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6c8b0430b9364fc35b5bc179b8daaeee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaa0ed7589741235389f72b4270378e5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a29fcf521ee8a6d948530ae03d154abbb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a95d72cc7b23ba2398e800eedbd989099</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxFlash</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>affe18aedc871a84cff85521f3739c1e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxFocus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2da8c48f77ea330f905d104ab1892b66</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxAFPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a720cf642973f8c1ba16bf6da4777a42a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxAFPointFocus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a845571e040113f86aede628238667229</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxISO</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aee268ae8d5112e8246d7f93916d6e601</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6ab1cb151476ce4848734a86294b4442</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxYesNo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aecd22ac1087e4d89f41ef549f2f21900</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a784b0c226541dfbd3971fef86b385e30</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxWhiteBallance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81d898f5329f18dc5b37bbcfb4b14878</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxWhiteBallanceMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a54cf5103f802c6ae065919ec48eb6b22</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13f99c3907547258aa293859bb8d5632</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8750df9563630ffaf4f0ef9a003bc2f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9a14c207ea0a02f1a53e5858fa61b824</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxLocation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad5a2f3790b794b2b97b8d3281379078e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxCities</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0cf87437026f4d17760371e160dfdc2d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxImageProcessing</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adbc19f69aade28d977df1fe67a3c91ce</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxPictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a142a2726d8955651192e67235de04257</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxDriveMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a3a600e5eda8b3750394af2309fe05d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2ee5371239ada86538b5c66ed7777d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a18605ced571015286675a45d11d9d770</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxImageTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5ce369dfb0296cf75d551b63ac1baa7a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxDynamicRangeExpansion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6e5b947b43c9a7f6e84553f73cc34add</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>pentaxHighISONoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5cbd796a5467b1f43f10b737f3eab96d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>NormalSoftHard</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a332a32f9c6d365d434b769714d93d780</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>Saturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a665a924b3d4a20d797a7bc7e054e73bd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>YesNo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6fd109fb6bcf114c2b238dd8df7c8551</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>DateDisplayFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1d201eb2eb326f21846a9527d983f224</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>samsung2LensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a68867814f1d408ef424bb9693617eb1d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>samsung2ColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83b3924d0119b47db279cfd2c3493354</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>samsung2SmartRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a644e8198586e6a981189118f098e7ae6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>samsungPwMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af1e0c126c2fff2f29a672c684f0cda60</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyHDRMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13a4c4a434ff1ce0941ac4a33bbf7a18</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyModelId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0062c1cb6dbe0ff20db176c865ae58f4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>print0xb025</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a326a00d79e9256a531605e4280e05d13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2817694e22f477f9c0e8ed8ce2305d5b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyJPEGQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a26e106872c027256696699fa7b09a582</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAntiBlur</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adbf90e8dbf1e0026fcb3f9abe76a9aae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>print0xb04f</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acc54f9e461ae39bed27610aadfa65a81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyIntelligentAuto</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ace6295e93e6a39799d8e78d0ae9a3bdb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a829d7bdb3f67dc68a4831a7429e56bc9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0e116ba1e490cdbee31bc62d6ce6699b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAFMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83f9953188a925f11f710b2f04e6ec6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAFIlluminator</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a78504720dcedafa3c7dcc325ec83a638</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyMacroMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae75e3df8724689f097844c0eb0728799</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFlashLevel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a43cfe4fecb0ee6713a1ba20b73eb727c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyReleaseMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae9e7eb151ec87ee34d46d5e763ef1880</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonySequenceNumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aec1e1e434fe898569cd2fabfe885631c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyLongExposureNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa1e2721cce359c0958a8e191af70ae96</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyDriveModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae1c8c3bc94a6fc5ed56406779e106737</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyCSFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7a48f054097166261e2d718aa59692b8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>accd3b0f237980df44f060e10ec6048d2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyCreativeStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>affe4ebba47de80504fa40a24f7af86ab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a47175e6c1ac38f20304df5a356306442</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAFIlluminatorCS</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae6936c0e9affc93eac3971497493b651</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyImageStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a06c68cd7ad16198325a31b766cd59165</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyExposureProgram</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a167e43471609d8fbe9f10f0d4e3580f3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af02cb7dd34cab8d156f9f3f0ff0ef4a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyAspectRatio</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2e34d8f0f270319c68862cc41ad7b67d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>sonyExposureLevelIncrements</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa7d4bfc093234f0822884662d44dac01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifNewSubfileType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac609551bb185508e1137bc7f5089f2f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSubfileType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a768ac1e46039c210a992af51175700</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifUnit</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a031b2454e62f3db0c87c4ffcca457623</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifCompression</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7c3cdf33290caf393c1c6e5efa20a785</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifPhotometricInterpretation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa83cdb27f7b9f060f1c7ac55061681e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifThreshholding</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abb2719fcc3482659e776ae9812eadaa9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifOrientation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a53d37c9f1bd8f748427404aaa88531aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifPredictor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a08fb40477dddd5b14ab4b2975327aad9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifInkSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3604d319f1faaf70fda0bb79aa06ce8b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSampleFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a624faf66cde0564a838f767ff71355e1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifIndexed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7b6260c0837f4938b6b959de018a538e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifJpegLosslessPredictor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad8981e50df5a460fd4287c49e5ec9c16</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifYCbCrPositioning</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8ef14cb4f2fa1113e5533da94123ee60</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifFlash</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acef4a0a6dce5d71db7e3c75d82288a32</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifCfaLayout</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af0a69495285ab078871f3b94a5c6706b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifExposureProgram</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa8f67d7ccd1fc9e77b82c591cf9a8486</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a95cedf52513ab0294a8595d9e11077cd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifLightSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e33caf01be73f25a127b8d476429a62</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a375405a7777e386f680411284cd6febc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSensingMethod</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab40420992149bb4bc836dbc379589a37</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifFileSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6da41aa194bc598f1d4a407c757d3bb8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSceneType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac449ad2b0de7ee2a9e7746fa55cfa75f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifCustomRendered</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac2d95ab14d129eff598c6566e1c43d9a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1ae9f8ea4a0ec315be6727c6a7303b1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a826dfb8fb39f07b59de15ab129102fbc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSceneCaptureType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a531ad2110b0aad6d2951f6ebbab46ba6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGainControl</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acc3e97dfd46ce073b60ba149be3760e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifNormalSoftHard</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5996063dcc1c4f345217277c6475faa1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af29f6c1313b2ade5b430655dde86b77e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifSubjectDistanceRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a91c642a5f50cf09ed3430660603235bf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSLatitudeRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acfcc0c23454c76a803d184f6cf4050df</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSLongitudeRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afeeb1d97f491f03a9d891e08653cada9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSAltitudeRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1827728d05d6c07d3b4e8778146e9945</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSStatus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aba77e2ccd95648594248e37510fbd267</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSMeasureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0fa150defcfc8b6bc1d56c0de1269905</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSSpeedRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeb006c797002f52cf5c036e8263ca332</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSDirRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4950b019c1863dae272bf6635a601b28</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSDestDistanceRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a681dc0d321c8dae1370693a4010b949f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TagDetails</type>
      <name>exifGPSDifferential</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8dbf11b89bc07dbad39dae55ff3cdd28</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const CryptFct</type>
      <name>notEncrypted</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a475b22ee46d5a9961ac6e4c0ceee7d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonCsCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7efa329c16b4369abe50431b8ee587c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>canonCsDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3aca55bad35da9a38edcf8ce33c7c730</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonSiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad613db4723ad630ca73f6ff4566cbb30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonPaCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9e6ed66af1f1f7659ac1a21421509227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonCfCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a263d572644d229bb06509246b1498c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonPiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a601dc14ceccdb76dbc70df36395aef0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonFiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a653ad7393c7348e5e44d6cd927d642c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>canonFiDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f5867550f0d79e9232d4a44df42e94a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>canonPrCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a06c7178b0d236a83b7756296e0922d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonVrCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a341d0a1573f293ccc228b50d2b2fe918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonVrDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa3d93c9f61d2860c82bdce874dea5052</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonPcCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a603b74e3da353c591ef441cefe05812c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonPcDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aee574b1d4d9abeb59b5152e8cd958f91</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonWtCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13d6a70740c4fd42608f33309fabb14a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonWtDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a15ca6542f4fe3779aefa8f310c5e84c7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonIiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aec643ace5d3934995bd7aad26e5a5501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonIiDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b976a4ec7cc5a2a1be0058235431e09</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonAfCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a04fc00fb941672d83ac99c0375b9bcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonAfDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa638572849042e50ca8b1ef7a9f12340</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonAf2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aee8c99e5aa3aa556fe0688424f47592d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonAf2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afd9d91824cbede0586cd567142b32fe8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonAFTCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5d42ca90a7f8c76a045ca06ffeba12e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonAFTDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b166186f2d8fff563e143017538d4e3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonFiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a74c73b4e98f9b093f8e6ad6fd319add0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonFiDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9429a48443f7d6ca206da646cec28e15</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonMeCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac999e3ce47f59fca47b2ba504be7a945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonMeDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a065e810077e4cbc7c11260065b3bb597</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonFl1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a60c1465902b8b280687b2e3319c14c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonFl1Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abdb2ab71c084401a778b4dd137bf680c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonFl2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a377bdb2d631d301ebbc120461550001e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonFl2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adbe91e3d087045d9f3b9a52cf75f82c0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonFl3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a88bf23a697a94f0d6d7402e8fedaa800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonFl3Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a12482df19244b7e5f9aee6bb752fc000</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArraySet</type>
      <name>nikonFlSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a016fe8758656cb6566d4da3f96fdf547</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonSi1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a74f9e6f5eb008286d10c3a8e8b0aad7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonSi1Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3a774ac8ac6ff8c487c3477163ddf14d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonSi2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a215cf37dc0be61b5ba923455204ff073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonSi2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a87f3e19a9b12e4c5a8ab7ae7d2e4b302</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonSi3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a68acd0053e0d05a45e2f9337ccb5e12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonSi3Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c9e22e74e941f920ddd5c26f8f9a784</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonSi4Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac53ef33a4811cd1c5c74cd23e33607fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonSi4Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aacf83260199f36ce4e3689e1150903c4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonSi5Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a56a76c77724a94b8f377c6873fd87923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonSi5Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad897836375f8aec521b9353dc837011c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonSi6Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0d11e07d31d1a6b3ded49dbea4d76905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArraySet</type>
      <name>nikonSiSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a811c144adfb5a4b33684e157d014eeae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonLd1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae7a4792a1e83c5a37a553f4208ae503a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonLd2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>add523f7a60f5ea9d1c78aa3e01038c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonLd3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20674db66be6ba02898b7f77e4b547e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonLdDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4a297656fe305a1b3432d0ef0f8894ac</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArraySet</type>
      <name>nikonLdSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e024260ded344db881f7b33d2da9ba2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonCb1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8eff0e3c8f1bc300cb62c828d38acd82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonCb2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f368328bf9ff5e68e9adc625bff11e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonCb2aCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af140bb018d3303b99969b69b779adb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonCb2bCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af8e21141dd9a3c6eeefc93dbd6931421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonCb3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae89f1f8efa5f5d35a5bef6a465647310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>nikonCb4Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9840735db812c2e6ac6f5e03629add86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonCb1Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa28bac4e3fffdea43998baa9d13202db</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonCb2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acaf8fb4a788ea4815bb1384e38d25a07</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonCb2aDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f2881d303656bf1a6f40807caea7d48</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonCb2bDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aba1a854c733f784a54f07dc14fe80fad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonCb3Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8a16e5a5954892a087fd315269ba5068</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>nikonCb4Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a16dc425f637574b9595c773d4bd71cba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArraySet</type>
      <name>nikonCbSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5d22a7c7593d2c1e357da7d1f4e95d69</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>minoCsoCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7c5ab6717c686328dc5d324a4f204da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>minoCsnCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a471bb1ca7b4262d83700d5a49c08aeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>minoCs7Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab0ccc3a726e0de08cb0f37100958fc09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>minoCs7Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02c27bd01ea839b1b9fd5f64dac81343</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>minoCs5Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2a14706d0d413d4ff57380319b74faa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>minoCs5Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5fa0934078cef316e8b364c6f2670133</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony1CsCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6ec974f22bb9ec1ab3b2ac72929c21af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony1Cs2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac02d70e3a20eb69df20a43740a3c5e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>sonyCsDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e2b32c968bf27a59a390956555e57d5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony2CsCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9771a96e753539376cc29623409b8ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony2Cs2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20f4a6d3a3c4817a8b3fa9fbcf596a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>sonyCs2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75dd7b41ee5a71b096e9f0b59b809262</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArraySet</type>
      <name>sony1CsSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a52aeb88679123ccbbd40c073164866b8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArraySet</type>
      <name>sony2CsSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0a263694f4caf1466b1ef0425c733b78</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony1MCsoCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f751d7bdfa5a057b10af278ef3487ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony1MCsnCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6f32ec2238c5a28f993d4656c3db0e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony1MCs7Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5d51bf004e41937774976b5dc5e87551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>sony1MCsA100Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5ba15e9b7f7e47aec3dbd56d8fe0d51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>sony1MCsA100Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2eed957d00ca01bc9fa68ccfe72e884e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>samsungPwCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad90dafae2969b76345ef6eb4cc58d0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef</type>
      <name>samsungPwDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a09ce981e3504b872bfcdd63345a526ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedByte</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab71efecbf99f9418820c73708a3cf62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttAsciiString</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b5bde30ee6d5c70b7bb097fb9ec2964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedShort</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d20b7b8d431865c5bbb72ece0e82421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2074c61e7cda2b4dae148c2ab281eaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedRational</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a354900bea65845107454abb6775a32f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedByte</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a210fbda6987f7c2812751a85d9b9f298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUndefined</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acffb015c64c008b6f123c06b1522286c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedShort</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e6bcae5c75296a29576af25dbad8c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f8b97b43c3cbc2f3b23e2f7612d0d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedRational</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af85d508a811442ccc864d5fa516c2c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffFloat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a098b9822143ebe072f1efc9669dd8e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffDouble</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a38ee59526e75451a0eef5fa23afb11a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a59beb014bec68a9a262d80dbb35c0318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::LensIdFct</name>
    <filename>structExiv2_1_1Internal_1_1LensIdFct.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensIdFct.html</anchorfile>
      <anchor>a5f3195fda5bd74a5d67196d16fc3a813</anchor>
      <arglist>(long id) const </arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>id_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensIdFct.html</anchorfile>
      <anchor>ad0767f809540b9923c60c5840f3f15e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrintFct</type>
      <name>fct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensIdFct.html</anchorfile>
      <anchor>a2165c6f6ee8faaec78cd1a48f02e80fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::LensTypeAndFocalLengthAndMaxAperture</name>
    <filename>structExiv2_1_1Internal_1_1LensTypeAndFocalLengthAndMaxAperture.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>lensType_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensTypeAndFocalLengthAndMaxAperture.html</anchorfile>
      <anchor>ac0ea6a0de92f2444bab5e91363ec69ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>focalLength_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensTypeAndFocalLengthAndMaxAperture.html</anchorfile>
      <anchor>a76e3f96a0a58044d2f34a21753056b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>maxAperture_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensTypeAndFocalLengthAndMaxAperture.html</anchorfile>
      <anchor>a10bf797b2e45a9d90da1d03f0bd2724c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::NikonArrayIdx</name>
    <filename>structExiv2_1_1Internal_1_1NikonArrayIdx.html</filename>
    <class kind="struct">Exiv2::Internal::NikonArrayIdx::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>abf54f6bfa9306203e56b1d7a274dbc86</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>ae1171f742edbb3337c1bcf0e7ce53cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ver_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a7a2586631855184e7e484f066dc96415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a16a30b68d38d107a539bfb076d4247f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a80d8855ef3fb66f7e37a30d1232edafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>start_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a9d8c948df5b3ac559eb0eb26d63959aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::NikonArrayIdx::Key</name>
    <filename>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>a311c0a1130815cc8316c33e489ef47f3</anchor>
      <arglist>(uint16_t tag, const char *ver, uint32_t size)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>a6a46e5a128c66160ca8e82819ba59598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ver_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>af704247134ed213b2e868313f090b104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>a310039ac9cb057a3a1393c4de38f9eca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::DummyTiffHeader</name>
    <filename>classExiv2_1_1Internal_1_1DummyTiffHeader.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>DummyTiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1DummyTiffHeader.html</anchorfile>
      <anchor>a0921142a040979efc3624fd77036bd28</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DummyTiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1DummyTiffHeader.html</anchorfile>
      <anchor>a58ac8254abb0bcd3aba7cd750f4a0783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1DummyTiffHeader.html</anchorfile>
      <anchor>a30b71df106089f681f8ab960a833bd5c</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffHeaderBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a7f0305c7aec03206ea8963be88d71f87</anchor>
      <arglist>(uint16_t tag, uint32_t size, ByteOrder byteOrder, uint32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~TiffHeaderBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a9fefeddfac1b264ef8025bfdb0f75da4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a398480391f75407ba95f80634e244f48</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ae166b455995299494c6015700752c181</anchor>
      <arglist>(uint32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a11cb34f4fa1ff44d5b0fb6c581aa2acb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a2a0242356ba661e5700b2e3d9f731a0c</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ac1c1215acd731ee3820e01dd682f3a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a658a38818e3fc6a4cf4f8457546de7ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>acacbfc3677b1e1b5536e58a057699783</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a678caad2e48b63ca9052eafc0d459515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImageTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a9dc99743c39e50b33a93d7c050646d87</anchor>
      <arglist>(uint16_t tag, IfdId group, const PrimaryGroups *pPrimaryGroups) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CanonMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1CanonMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3c81fc12f0e39595d0be950debb89495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a6dae78b0cac2fa190e88c2b9c2682561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a19ad7233b46e19412afd07c6abca2cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPa</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a64b219fc700f55b231586f8c81b61c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCf</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3d0c1a2a2baadb47fb017efa6d0b6261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a0fa8b9b1c5ff0a541285b0cca7350a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a203344d78569e5d75c0ea157f15d1e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abac6750da609603a873ad3a375884741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFiFileNumber</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a855339d00000363505b605bb04968c71</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocalLength</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a78f4f8d5b1ee4953e838ba73050857a0</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0008</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aa273348bed665d9201179fce7c73b0e7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x000c</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ad27d1c8361515c7a07a0f40a5466b010</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCs0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a6ecab56136c0e3e8a0ed5aa543dcb94c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCsLensType</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abe617b7dc5018aa2aecdcfd7aec32035</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCsLens</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ae8f03d224336c64601c8726d1d14633c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a30e8a90b067bab29f9dd5ba1e6ad9c60</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0003</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aff5e4204e14e1dcddc7b29be0fafd586</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0009</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a19f6ba09113640bb8be3e0ae150c5ea6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x000e</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aecca49287a3093be70764ebe5f8a28ea</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *pExifData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0013</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ad561a40517cbfc6ebd4bbe34177e2e66</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0015</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3eec32eca5659bce32d1547fbe30957c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0016</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abed475fc6211d1b9aedcc925902cbe82</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0017</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a26e4af4cb3ca6399f19b5b2a9988b8ba</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Cr2Header</name>
    <filename>classExiv2_1_1Internal_1_1Cr2Header.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>Cr2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>ada7e3259b9f29a8f6a1ffb0f1d3ecb35</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cr2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a7cdcb20b921a39b74a1633a72943b967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>aae1f8edc05a5fab9ef139db87cea36a2</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a057282912f53ff7f01fe02c57d536c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImageTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a3bda8e910ee30db6f0cf277a389c968e</anchor>
      <arglist>(uint16_t tag, IfdId group, const PrimaryGroups *pPrimaryGroups) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>offset2addr</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a4df6a77c3d06c54505c6e016d3666ee1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffComponent</name>
    <filename>classExiv2_1_1Internal_1_1CiffComponent.html</filename>
    <member kind="typedef">
      <type>std::auto_ptr&lt; CiffComponent &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a057050ea74eefe38ee677a6db3136d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CiffComponent * &gt;</type>
      <name>Components</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a14200c5e50edda33b64eff5c9229c187</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ac118a539300aa707f77692631d36843d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a241ef11ce8db1b56f059729fb99b1863</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a534e7fa5cf79c6a843069f001d34eb26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a2adef06fdae2c0178603b5015e798120</anchor>
      <arglist>(uint16_t tag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataLocId</type>
      <name>dataLocation</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aa8a1296c8299343399ab9eff9d0e6583</anchor>
      <arglist>(uint16_t tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ae56e6ee4b1da653b6d44ef9f0969e025</anchor>
      <arglist>(AutoPtr component)</arglist>
    </member>
    <member kind="function">
      <type>CiffComponent *</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>af019bd49e7c4a38c644f4d9b0e99bff6</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a796cd02123f8f107f98c0e3bb5221208</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a6a7574b05379d86c2cc71ec5aa18b7b6</anchor>
      <arglist>(const byte *pData, uint32_t size, uint32_t start, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a28f3354567a79aed51d111ef51fa5f58</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder, uint32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeValueData</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a185e1f0f6064990dd1a5c6b9164a0e0d</anchor>
      <arglist>(Blob &amp;blob, uint32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDir</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a7ef2788e0125bd87717e1c04d27209e7</anchor>
      <arglist>(uint16_t dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aa1847aa0d7f71378eae491af41a337d2</anchor>
      <arglist>(DataBuf buf)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doAdd</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>acce7704691a48c5c1f1e8af4b98e5532</anchor>
      <arglist>(AutoPtr component)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CiffComponent *</type>
      <name>doAdd</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a8c72fc7369b5772b2c0ae977c84ed37d</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doRemove</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a4878acf471cbc8680a4111439790c2ef</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doRead</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ab814e06f56d1db89f0828e319a921c50</anchor>
      <arglist>(const byte *pData, uint32_t size, uint32_t start, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a46c9e097d4974da18d891ceab43b5bf3</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder, uint32_t offset)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a3bf3b862b5d5d5a96cb035177aabae0d</anchor>
      <arglist>(uint32_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a7203038d5cd748c8bbd319443291b972</anchor>
      <arglist>(uint32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a309a5447a6a6361e90cc69b6fba867ba</anchor>
      <arglist>(Image &amp;image, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>acd6b00278cead8f8fc514c71804bcb2f</anchor>
      <arglist>(std::ostream &amp;os, ByteOrder byteOrder, const std::string &amp;prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDirEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a9fad54e734aff6aab957dae16a8afa03</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>dir</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ac60ae649ccb6bd44f04979c4f6e33252</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a78c07cf9a7a3718259a8d9ed7530b3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>af823b6f819f1d6b55d88fcd691c8a37d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a38e99214c0866c9fd683b621ec3590f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a3dd5fb1770b0e6c8f9b08a51c958a55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aa863e648904d2a14a7efaad7e6458212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tagId</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ad370128bddf89b0c4ec43783f3e7bdae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ac0742c8b3d210200b965a277070d1b64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataLocId</type>
      <name>dataLocation</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ae0f4e20439ea306bb5decd2bfd44004e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CiffComponent *</type>
      <name>findComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a106b9412754841caaf95f4220dc45771</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doDecode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a78f1afe3715944c885e80e666ccbede0</anchor>
      <arglist>(Image &amp;image, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doPrint</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>af17cf974ed679b7c0b9881d37a522600</anchor>
      <arglist>(std::ostream &amp;os, ByteOrder byteOrder, const std::string &amp;prefix) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doEmpty</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a4eda8546882afa34b99d2f2cbd92eb0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CiffComponent *</type>
      <name>doFindComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aacba737d1c00b34512982422383b297c</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffEntry</name>
    <filename>classExiv2_1_1Internal_1_1CiffEntry.html</filename>
    <base>Exiv2::Internal::CiffComponent</base>
    <member kind="function">
      <type></type>
      <name>CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>ac948f9fbbecc083162477a1f2dc0e17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>abc023ca95fbc78e600c3d090c0dde9e9</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>a2100d8593d35daffcaeeb902d492b0c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffDirectory</name>
    <filename>classExiv2_1_1Internal_1_1CiffDirectory.html</filename>
    <base>Exiv2::Internal::CiffComponent</base>
    <member kind="function">
      <type></type>
      <name>CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a29e5c51e4253a15e64532267dfc428af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>ad8d88930816866fa8b897534108cca10</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a94228862c2dde6b46545b377d88f2586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a576d1c93e772acfc663c1f199e668ee5</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffHeader</name>
    <filename>classExiv2_1_1Internal_1_1CiffHeader.html</filename>
    <member kind="typedef">
      <type>std::auto_ptr&lt; CiffHeader &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a098550c33d4cba5c82eaf7d7e9dbed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>adf3cbe93196e7b0af5b89873dbbb5411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>aa4b16507eae5e80a6724515092b89373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a3d53434a9b7d2f5a9a791304e76488a7</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a079c5bad818fdd9fe950b0438fdb8944</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir, DataBuf buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a5b9ba517b40e199a1ffe81f91c7dad87</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a3ff2822606553f5fb21c159b8236738c</anchor>
      <arglist>(Blob &amp;blob) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a792e5455cfbc618dc56b1f952f453feb</anchor>
      <arglist>(Image &amp;image) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>ac664aa3405f5911eeca041de450ade0e</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a17ce435145295480f6344c73fd73b5d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CiffComponent *</type>
      <name>findComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a00500dfe33f65e71912de0fc738ccdfe</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>signature</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a97bc348326182b891ed63e1df7ddaf59</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::CrwSubDir</name>
    <filename>structExiv2_1_1Internal_1_1CrwSubDir.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>crwDir_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwSubDir.html</anchorfile>
      <anchor>abbd1122fd275cf739af883f605978723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>parent_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwSubDir.html</anchorfile>
      <anchor>a1a4e6be6250972ebd11694876d56867b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::CrwMapping</name>
    <filename>structExiv2_1_1Internal_1_1CrwMapping.html</filename>
    <member kind="function">
      <type></type>
      <name>CrwMapping</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>af2baaca143e2ccb2252af22842ef39d2</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir, uint32_t size, uint16_t tag, Internal::IfdId ifdId, CrwDecodeFct toExif, CrwEncodeFct fromExif)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>crwTagId_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>ae1d07658e2c4f6c6e6adc5ecb319e431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>crwDir_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>aa412d424d237230e0bd4ddcdf5bf587a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a7ae07df0d75e8c08420a2ad006c61435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a6dca36583a62f4d6625239d52e84ec29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a2f451f1f58068991537170a5b3664de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CrwDecodeFct</type>
      <name>toExif_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a22e026f16d60a4188a8ca7120def0381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CrwEncodeFct</type>
      <name>fromExif_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>ace880a94ed89279dfa6320b11cfbb803</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CrwMap</name>
    <filename>classExiv2_1_1Internal_1_1CrwMap.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CrwMap.html</anchorfile>
      <anchor>a8abc0f4c524faf5c50e924e32d1ce4aa</anchor>
      <arglist>(const CiffComponent &amp;ciffComponent, Image &amp;image, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CrwMap.html</anchorfile>
      <anchor>abe05b6fe8d83c440acd29e98640451dc</anchor>
      <arglist>(CiffHeader *pHead, const Image &amp;image)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadStack</name>
      <anchorfile>classExiv2_1_1Internal_1_1CrwMap.html</anchorfile>
      <anchor>ae8e294d1437f8087521e7566e298f79b</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwDir)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::FujiMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1FujiMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMakerNote.html</anchorfile>
      <anchor>ad34e3281ad11e91a4c94f4ee35e24c70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffMnRegistry</name>
    <filename>structExiv2_1_1Internal_1_1TiffMnRegistry.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a5c971def1069722439f9dae7445f9a9a</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a99cfbf87ce0b196d3f9311dd25b5d174</anchor>
      <arglist>(IfdId key) const </arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>make_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>ad0149fb2e2d044796a34a0c50fa0e5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>mnGroup_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a31e3506887912409274cc2f33fcf8c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewMnFct</type>
      <name>newMnFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a4dd24f06766c40d5ed78c4e79f379c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewMnFct2</type>
      <name>newMnFct2_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a248f96cdb6b4f0cdc72a0b9180c7f323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffMnCreator</name>
    <filename>classExiv2_1_1Internal_1_1TiffMnCreator.html</filename>
    <member kind="function" static="yes">
      <type>static TiffComponent *</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnCreator.html</anchorfile>
      <anchor>a1320c47f78af761d8851a4d3607bbbe1</anchor>
      <arglist>(uint16_t tag, IfdId group, const std::string &amp;make, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TiffComponent *</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnCreator.html</anchorfile>
      <anchor>a915e49d948c7dec21fdc11d860583197</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TiffMnCreator</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnCreator.html</anchorfile>
      <anchor>a0a452592361c5ae821a6e0da616012ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1MnHeader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a637b16623470fbc7f64524c8170f7fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a1932fbdfe5684d9262c7277d17062d68</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a0ae20114fb027315fa793064217b4fb6</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>ae55b23ff14f7362a3a9d05aaf168db3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a0033143984bfa08b335d8a0c37a96962</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a3b2d0554aa3765704100a10e389c1418</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a3a6dbd14fe05d8c4c38e5b9704b91fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>aa833a45f4cce2e5f5ffc0c25e8e5999e</anchor>
      <arglist>(uint32_t mnOffset) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OlympusMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1OlympusMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>OlympusMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a81f75d7da53dcefc2996b98025239b56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OlympusMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>acdfd891d4853acb58da97cb3b15e6862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a4c839d1b72eb49bcd12825b1a8ddb5c3</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>af0b9014e4696084097d9f98792c2ba3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a17912e01e2a9d57175d50d757cbebe2e</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>aaa252fdbaa971ed5f136602298bba041</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a13f262203deaa5ffc30d79198d3570ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Olympus2MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Olympus2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>ad9ac595b2bd4dbe59fb1e732bf22874c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Olympus2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>aef4e7894a18c5926a1d12b06aff5bfa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a2dd789356462db2d628ec6f37df421f3</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a08e886a435c4760e68a7ca9cd33a1e2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a809b42c4047f5c451c453415995b34d9</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a2f62b79b9ae8babf5c5f5bf52ecae33b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a15d5c09143855d2d2ab55783656fbfae</anchor>
      <arglist>(uint32_t mnOffset) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>add41fedef1a2cb622e34c8c670b99286</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::FujiMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1FujiMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>FujiMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a6f66491820ae3a8d1ed7168bb9285532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FujiMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a725b3eb50e4cefca08036bbcf6f00e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>ae4322ef667f5dd0263cf5ce5391dd445</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a01c2d2f857dca850f4c8b95bfb750c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>ac1329b1dc15cc6161344b11c5ae8289e</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a3453f67cfc4f0874b51f2a28815700dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a09d3c9a6b6d0b53498e3ae0f997fb5c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>abb7e2af19172c14a8dc478d16a40f594</anchor>
      <arglist>(uint32_t mnOffset) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>add7e100a6a4c11a5112b5f4ccdbfe6fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon2MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Nikon2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a745da49dfb6712f2357db9ddb540745a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Nikon2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a63ab28200eb35d79ded08cc18d0fda56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>ae131b4cf70141ca978735cc230f53e2d</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a8976257a41e6a2398effe02cbb869e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a722835d7db60ec41c3ec482259f58dd8</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a47fc6ea9ca208a3d4d736805c4383a68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>ac6ab9309613bb80615e119b9e5f89544</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon3MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Nikon3MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a4d4f0f180a68922addb026b5f559e993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Nikon3MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a87b081efc67a8c4d4706fd5d42123e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a5479934da677d4bc2c58c9a2d66e8ea8</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>ad4e0f2e9e06331e3a1fd42c214136424</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>ace5d3fe6e14a4a7e46285aa7921ac340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>aedd0a4fa98ac65606cc3409163181ac2</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>ad9cb41a1a54c122437a5d954662da36f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a75c1c8783abb52b6254e36473ec5be5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a007c9a5f547f900c84942bca49c4bc94</anchor>
      <arglist>(uint32_t mnOffset) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>af0790d55b82c27e643680326462d4057</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PanasonicMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>PanasonicMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a591effcf519fb72ccedccc9acff95efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PanasonicMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a3aa1d518ee0914eeb75196552b01d28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>aba12da2c30e60a2300638111d2da9f4b</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a71e29198dd84b1321904a1b7a8c529d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a5ac61b7f154961443302d6d32974708e</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>aebd6657d6df234f44fd30e87cf18aeb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>af6e0a64bcab79b50002eba10695e8b0a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PentaxDngMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>PentaxDngMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a23ccc6b3739523ebd160c1562e05e148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PentaxDngMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>aa4a555b6722aef6556388633010baf7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a6da1f1fc4f3201a5395c4830463b4203</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a3ea6ec14b8ef6d76436f12ed01ebe43c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a8eec6d60e54bfddd152312a4c4895eb6</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>ad2c63380f0f181957cc92af5149e4f3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a1a17d341ceead1e72eddfd1ce383dbbd</anchor>
      <arglist>(uint32_t mnOffset) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>ade2af64d6d374f09c0627544733fc04d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PentaxMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1PentaxMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>PentaxMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>af1f3136e3ff0c28e24beffab085886eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PentaxMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a780ae961b2278a7cbb9dd0c3df7ee8e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a004c965781c3d6165f39dfb854fba091</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a55f1d7106817b754c09ee1d96557feca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>adc724c574da13dc81b9e67baba15a645</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a7147eaad1c6d2fe9a433a5944dc43988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a20792067ebf95b2059079cb38b9ff786</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SamsungMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1SamsungMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>SamsungMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a06a0a641aed24a6251d001713e37d99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>aab1d19cf5dc6ed92a49acdaf6487ce9f</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a134eee65a425fab7abef95aeaab7449e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a750df2047fc399b7540acebb2fd0babb</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a24c8c8f193e1f413f05857a403d2bb49</anchor>
      <arglist>(uint32_t mnOffset) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SigmaMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1SigmaMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>SigmaMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>abe6ea09d00b3260f8111bba0769ea30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SigmaMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a9958fc90270fdb131e386f6f98a29de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>afea3930844ab4eee62d5ca20d26b7c79</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a74b8d0ffa9f8847fa85e71e1dacee5b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a1109620868da92456961eaf5f90cbfb2</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a63a88f75a41edfb25e0840eb0c65a87a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a9dbe8396993f453fb06bfee92ca19493</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SonyMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1SonyMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>SonyMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a054f57e798221d80cc0bfd0c4c645428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SonyMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a05a83bef4ff4ed547b213c112b091235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a92ab0460cb3bf11db2ba17b44e8afd10</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a975f57ab2e5c642d1f1c92d31db1caf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a4b803475f64cc81bc871c7e58a305fb0</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a491f595b7a79bdb82fe47095b6044302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a28a7b4a8065aedb86f0c06bdcf9da00e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::MinoltaMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a7ed35284ec7ee8c8df89010fd25edc92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCsStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a4d125cf7fc0a488a630cf3b9c51a0c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs7D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ab63dd0e0c5a1fde3b6f6df06832d4cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs5D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ad2da7222e3cb07369340f0ea23f90baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCsA100</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a975d3b57e06fcf97992d0ae293933c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureSpeedStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a0ad754361cd6487c9ff10fa710f6d42f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureTimeStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ad6377a02aa1a7969f67e85ee8657f209</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaFNumberStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a5c40e016520dbc7275a586a771760363</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureCompensationStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>aa06a034258cc950cc200c4f6d041de30</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaFocalLengthStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a2080a93d1efc4f1daa820be1a47af890</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaDateStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a624395073c43c5b772ff7c7c96ad6ad1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaTimeStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a437692d41909f931b57f65fb5bf1df3c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaFlashExposureCompStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a15e27e24d426ebf5f7f982b8dd267eb9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaWhiteBalanceStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>aeed85acc372fee0e0fae768baa3dc221</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaBrightnessStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a10b86dbdb66356612079014d073b4818</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureManualBias5D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a8fd4d9653b24e90d4019eed36b583fd1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureCompensation5D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ac22380bb27463ea5dd7d4cabfe097abc</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon1MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a07f95d0c31a454ddd08596d93d5e3546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a195f975baf2b352400b160cdedbf734f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a9512b8fb2c9e9e3ad6d88746e0aa5a72</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0085</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>ac31a71f6172238fba5ecbaf086d1e776</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0086</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a254d47c729464e9cfdac00f9fe6c049a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0088</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a3a3a59ad0ba1292fac0e6c68dacf9f9a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon2MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Nikon2MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MakerNote.html</anchorfile>
      <anchor>a5bfcdae844f11a69d296ca85a63bb913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x000a</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MakerNote.html</anchorfile>
      <anchor>abe4c37c8b38afda87bec332d7fc11c41</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon3MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ac358d44a7dd6837a07ab2385384b7e30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListVr</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>af59e006eac800a949cd5d312d5cf1639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPc</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>affa3dbded8e2e918a4674d7c34f13de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListWt</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a10e08e9d83ae2eb9121559063f242c9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListIi</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3c57d3b3363b293a9b19a43285cb95af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a4704a9ba6429312f520a5a4f030a7da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ae62114b68a11c23410b4f237be2fcc6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAFT</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aed4cea1f77f7d66e8241a9be179b00e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFi</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a1dbe8cc702e24dc933f893417f41dced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListMe</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2fcce54594c3ba9cc24d4c7dd64a7006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a9cd851da75a8faf1602f212052ef5645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a662b5307f06c051a41c1bf0517154d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a5eae3ad9da77eb2b6e7ec6b416c952eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a118ded2689be40a22349903091c83327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a88e843b83bea05da49319ef0a37b30a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ac023c876f1b8b5f8a3b4a5f11abee396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aaa9c2314ddbb9ea2a50095f737782f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi5</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a77cfba4f7b1e4a39fb1de9d53d49efd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a68ae327da06170eb0b218c27b88fc2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2d1d576a8235d2b95f3b4dfa588ad371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb2a</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ad850a7103fdd24004054f8e68cdc5e9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb2b</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a708f5d84e0b23b71204cea47ddc2256f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ab036d36d7bfc885bb2a3fe3331ca2f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a470a166affe087b3805039a8c47a9311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ab7504de0ee75e6a4b69ebdeb6a821370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ad82974022bb0de378d995ae076fadae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a350901bea31af5a3fd388fc4becfeaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a678b7365718ccaba211578ece0b2a11c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a844e3e904a1f03b18b12eedfbd2426f8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0083</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3c52cbbef312bca26edb767348a50471</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0084</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a66e4079e034b50c2913f7a8698f72597</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0085</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2c229cade852d167ae902e44af838093</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0086</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2fee496bbdf1c8acaaec9d2427013b4e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0088</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aca54465a5a83c506ff164e2db10be0ee</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0089</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a8eee7952b0c7465cbb5e00aef60a28ef</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x008b</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>adff8e6ac89731e4c497afe7c7f6a173b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printAfPointsInFocus</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>add8045dc230d099fab9638918f7a4528</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printLensId</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3d6fb82d2369baab391500522af6f977</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata, const std::string &amp;group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocusDistance</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a7c7c696ac16b59c04eca0ca8f68a91a5</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printAperture</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a4013268e57e829c97f252a6cc59ee057</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocal</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a28b4d8a290ea765ddb38ad3ef2bed7c5</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFStops</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a6ca20ae91a8d52a6909ca247c4c5cdf6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printExitPupilPosition</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a06651763a24989a69bf08be76a300f83</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x009a</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a76c76801ca20c73a7519e3ef896d3f94</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x009e</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a6346ff8bb13bdb6081c653b203029d16</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printIiIso</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ae3d52ed17c72fef2fa98be45a017fa62</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFlashFocalLength</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a373e2dc383e668f927e1a72d98f30fed</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printRepeatingFlashRate</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a25a5839ced045d3d102285299129682d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printRepeatingFlashCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a24ace53a0abec80f08a225c2bd9d8d40</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printTimeZone</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ab1e76948d6104466301a11b25dc85ea7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPictureControl</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a1f90c75d6d4e0401db4be6b041424a7b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OlympusMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1OlympusMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ae9d353ff8d84a4c84ea0c63ce055451e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a864bab7b691c8eae817e8556de35b1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListEq</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa94fc9c156caccaf4e9c266d5b04f3fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRd</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a5d6918e7f562dd61695d9fe85b5e5d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRd2</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>af0dcd1a68105b370cfbdc82d96072a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListIp</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a7bdd868124b0ac2324f51a4699f8c8a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFi</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aea50ea5fe5644a2997dcf07d8443a382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFe</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a02b3e3d931ba6b1748f441878c0c2f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRi</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ab2a9539feee4e2c83616a6d87b1650b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0200</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa2da0dadba4f887cb4eb8a53f304e8cd</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0204</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a23372979ed42fc25dc21fc61f1218de9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x1015</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa282c4d7a1575f6a909557fc381463fb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0201</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a0ea897be304a83295dded2bb8573d0a8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0209</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a4ff35aee60f19a4b72c9257842491bd8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printEq0x0301</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a883d1a483beb4c970aa48a25404c72ca</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCs0x0301</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ae0393cbb429bfd5f0c856c461c1d9418</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x050f</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>af62d1c2ac76d5ada5fbef808be9d3232</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0527</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a97bec9dbe4fe9966c2f20fda22d72da3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0529</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a0b6fa2f10f9741e6a0966c2e525741ad</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x1209</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a67f520b41dd3ab0518675bd1fe79cf13</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0305</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ad0f3789715de37a329b664957854f7fc</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0308</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>abed43cff874a6dba0c53ddb8cc80eb9b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printGeneric</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>af635bae11e8f490316219f70202945b4</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OrfHeader</name>
    <filename>classExiv2_1_1Internal_1_1OrfHeader.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>OrfHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>ad09dae004bec4f724931cad73c405dd8</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OrfHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>a97c0ba7ba3314b511caf2f78c657fa7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>a2933bb0b87bbf1038a9aeb8f70d49ddb</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>a052595c0d199ee2abc1f7771a3fc0b36</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PanasonicMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a4d8679a88a7c585df3f02d11ac4dee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRaw</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a45ec9a40014238fa5fffd39175adee3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x000f</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a97970b8c766528396736b2d66c78590a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0023</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a0b24bfa8dfff107bc48a4556d40f8055</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PentaxMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1PentaxMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>ad70e23e3d3ba06f3d4164f7a2db013ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxVersion</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>afb94a4cf21e18389d631af9d5a09dd80</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxResolution</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a97d8577df07be39b756f6b87e96501cb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxDate</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a70fb74ccb7f4ed25289d319435289d5d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxTime</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a4f20ecbd4791254893b4f316d4132551</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxExposure</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a10bff60313808f2d6f9dd3e463f77641</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxFValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a988b7f64c844d90dc7d0c06fda0a1c16</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxFocalLength</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a4ac32a29e0e81c4232694680c8ce2884</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxCompensation</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a2fba6bc546e938e46d73fcf2e8892976</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxTemperature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>ab4930b0ac38c8c70e0c37f0bd6a62579</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxFlashCompensation</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a2e624000fde5f7f1de7970690f9f6923</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPentaxBracketing</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>af0201a8ea7e8559692e1b9973afead6e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PngChunk</name>
    <filename>classExiv2_1_1Internal_1_1PngChunk.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>TxtChunkType</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a9a05f1f7d1b88f8e869813f6b318fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tEXt_Chunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a9a05f1f7d1b88f8e869813f6b318fd35a9d4285267d152ee004057da92b089f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>zTXt_Chunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a9a05f1f7d1b88f8e869813f6b318fd35afc93823f59215208899bced8edb455e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iTXt_Chunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a9a05f1f7d1b88f8e869813f6b318fd35ae7dc9088cf2ab5aa2b8a5d35f86bd181</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decodeIHDRChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a925fea946a68197f16e1cc8225fcfb8f</anchor>
      <arglist>(const DataBuf &amp;data, int *outWidth, int *outHeight)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decodeTXTChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>ab0df6c0422f2d0444b0908025a74e012</anchor>
      <arglist>(Image *pImage, const DataBuf &amp;data, TxtChunkType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>keyTXTChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a98eec5722607d7906aed3389af5de467</anchor>
      <arglist>(const DataBuf &amp;data, bool stripHeader=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>makeMetadataChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>aba85035dffed7bea98f90d21f61e8119</anchor>
      <arglist>(const std::string &amp;metadata, MetadataId type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Rw2Header</name>
    <filename>classExiv2_1_1Internal_1_1Rw2Header.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>Rw2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>ac40a81a8968e35bc1eed614aa4ed513b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rw2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>adee39107ac5a0406e1a457edcbed0829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>a5b7c7b2d646269787208b1c4a9aaffc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ac6c2b995f17db153877d7a49ad80eaf6</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Samsung2MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Samsung2MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Samsung2MakerNote.html</anchorfile>
      <anchor>af65fcdab3f3257c893de9da8be9db8fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPw</name>
      <anchorfile>classExiv2_1_1Internal_1_1Samsung2MakerNote.html</anchorfile>
      <anchor>acd8c20f8ba51f1613f02fd921b5bc789</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SigmaMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1SigmaMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>a979b001c0c27d8186f683e01adb0ccb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printStripLabel</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>af9d597dfb029f5567b1d4dec4b995670</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0008</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>a3aa00e02413d8f3e751a23eb0f1b1027</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0009</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>ab6d8642d4e2b50e94a92967de5ab31ee</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SonyMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1SonyMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a67104c1ffd06c6bccf29e07f1f4c81e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a62e5997564d3ce36ecc6aaf5aede3065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs2</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>ae661749988e8f255c80c8c1fce9478a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0xb000</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>ab87f1665cf27045c3f9dc82a6c4a55ba</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printImageSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a9e5f5373ec18b941d732aa912ab67fad</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::SectionInfo</name>
    <filename>structExiv2_1_1Internal_1_1SectionInfo.html</filename>
    <member kind="variable">
      <type>SectionId</type>
      <name>sectionId_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SectionInfo.html</anchorfile>
      <anchor>aa06733950dd5dcd3d391ffb2e472d1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SectionInfo.html</anchorfile>
      <anchor>a44c5f0fa92f1075b36e35f2b8ebcae30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SectionInfo.html</anchorfile>
      <anchor>abe87f6b64f66d1959a067b80c1dc37f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TagDetails</name>
    <filename>structExiv2_1_1Internal_1_1TagDetails.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetails.html</anchorfile>
      <anchor>a9fc2955f831de0c18daf0880660a2f93</anchor>
      <arglist>(long key) const </arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>val_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetails.html</anchorfile>
      <anchor>a82e1cf7b97eee440843391f4f139e93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetails.html</anchorfile>
      <anchor>a329a8dc06b52b3ac67359c51d65d76dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TagDetailsBitmask</name>
    <filename>structExiv2_1_1Internal_1_1TagDetailsBitmask.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>mask_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetailsBitmask.html</anchorfile>
      <anchor>a7e77d36a2f5d1cbd51a914854a06416a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetailsBitmask.html</anchorfile>
      <anchor>a8a03ad485e4eb535ea89a77bd96833ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TagVocabulary</name>
    <filename>structExiv2_1_1Internal_1_1TagVocabulary.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagVocabulary.html</anchorfile>
      <anchor>a87d75aae233021da3dc9bc0d9469f883</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>voc_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagVocabulary.html</anchorfile>
      <anchor>a16d7fa9b6c9bf976008fd9c5c8b66e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagVocabulary.html</anchorfile>
      <anchor>a970dbaf26667e1cc7627ba3586f26e65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffPathItem</name>
    <filename>classExiv2_1_1Internal_1_1TiffPathItem.html</filename>
    <member kind="function">
      <type></type>
      <name>TiffPathItem</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a9300c3e691a49cb6855ad0b40d568997</anchor>
      <arglist>(uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a9a0f38155d12baa103dae2a98a84ee4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>extendedTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a38e4af983e0b8754ceb602270c7d1407</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>group</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>aa407533b485cf6bca0df464000a68d31</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::IoWrapper</name>
    <filename>classExiv2_1_1Internal_1_1IoWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>IoWrapper</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a4237c7a12faecebeb424cbc36caff995</anchor>
      <arglist>(BasicIo &amp;io, const byte *pHeader, long size, OffsetWriter *pow)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a6fabb0585e55152b54f60c56e837c672</anchor>
      <arglist>(const byte *pData, long wcount)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a248b4747439e4bcbe9eabce1906ef48b</anchor>
      <arglist>(byte data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a5d82c353c309c968a6daa5169a8a7e4a</anchor>
      <arglist>(int id, uint32_t target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffComponent</name>
    <filename>classExiv2_1_1Internal_1_1TiffComponent.html</filename>
    <member kind="typedef">
      <type>std::auto_ptr&lt; TiffComponent &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae6f6d2a03171e797fccd52abde24e3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TiffComponent * &gt;</type>
      <name>Components</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ab7480921cadfd69456e1618635ae056e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae2e1ca8ba933828ea3913d6e742b67a9</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae24fce32b86c001db5118514067114bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a3956f54bf18edc7462035a69cbb29739</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, AutoPtr object=AutoPtr(0))</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ad191eb622542900b2052c3aafc2a9952</anchor>
      <arglist>(AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a951bae064ca367a8de554935f5d23b7b</anchor>
      <arglist>(AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae76a57686b20b3f0db99dd43162e6aef</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a58fd0f28208c10d250413636dc760012</anchor>
      <arglist>(const byte *pStart)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1b0e6489abcb3eab4f47c80f02311194</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>abbb9dd77ea9e3696ad7363070699197a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>group</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae047ff8db43dbe971d434aa7beea86d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>start</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aadffde8164513da9d5dd3328729ffaac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AutoPtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a7f14e9cbe6e5eec560b29c122ad3c82d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a22ca22bb91e9c6f754d6e07e4eb2c35e</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a4b9bd893ace174c25d9b35ab0a789689</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a70cb160a3ee96b6f3d4121e85f3628ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a8a6995093d8709c2f5061512d0d0f21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a5c6eabeeb172dd41745f6713bcfcb34f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a192645bb7f6f48a8e4bbf0fc330555e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aeff1bc96a64b006a32964e20badc081a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a9f3163b156f97c9f337c9a2cc254e0c5</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::AutoPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a7613e8914b1bb67a45fc2260aeda9652</anchor>
      <arglist>(AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a51b8260fe31fcf7e348526837783cfcf</anchor>
      <arglist>(AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a82b7887062080957e73100840ad6f4ff</anchor>
      <arglist>(TiffVisitor &amp;visitor)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ad9cbce19baecb7979188542330158d03</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TiffComponent *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a2c0c1513f803d2aa8de09a44c4016d6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a0f9dd2de27d0451519fe8873b0c68772</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a2956f0d98ceba9cc3d52c89fa89251dd</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a7f550c5ab52eb1b12b5b1521fdf0f757</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aeb547ffe6a8f14dddf761464af077f00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a534e05a5ee70714ec4d29da33db3dee6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ab9eb2ed551e3ca3813bf56bc2c674451</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffMappingInfo</name>
    <filename>structExiv2_1_1Internal_1_1TiffMappingInfo.html</filename>
    <class kind="struct">Exiv2::Internal::TiffMappingInfo::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a091265ffe38431730396829b2ce37893</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a4654ce67400d8f6cb72087ff728d92da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>make_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a5201e70fead4789a4969483b097bedb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>extendedTag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>ae0d7bb896e528f306919dee8595d9cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a21b161ea8e0b852a87bd84ee2d3b4fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecoderFct</type>
      <name>decoderFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>ae6acc40e13d18b9727e4e89da3e0d241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EncoderFct</type>
      <name>encoderFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>affe24e6d1e86125c78cbee1006d22ad8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffMappingInfo::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>a5871348b2fb14a0f130145918127b6b9</anchor>
      <arglist>(const std::string &amp;m, uint32_t e, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>a73465324364508d6dc02822ac2ac0861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>e_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>add46be5badb97686a9e84eb5e589f492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>ae8d274bb774049116a9f6b3b19af4038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffEntryBase</name>
    <filename>classExiv2_1_1Internal_1_1TiffEntryBase.html</filename>
    <base>Exiv2::Internal::TiffComponent</base>
    <member kind="function">
      <type></type>
      <name>TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a1d2b266cc3f69cf4ed5fbb9dfdd98b93</anchor>
      <arglist>(uint16_t tag, IfdId group, TiffType tiffType=ttUndefined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a3bb4abb0ddbe4c7898a22d9edc6f2d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a120f4553c20edd9a3bedb5bfb2b70627</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a2492ad8b99d7eae18994ebb0e143249f</anchor>
      <arglist>(int32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a294adfcd18857f59fd43050b69f0cfd9</anchor>
      <arglist>(byte *pData, int32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a9b548e190453de6f89cafea2931b2546</anchor>
      <arglist>(DataBuf buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>af5d547241f4f81bf31d92d5a1404247f</anchor>
      <arglist>(Value::AutoPtr value, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>abcbad17ad9e563bc18307a3c5b3527cb</anchor>
      <arglist>(Value::AutoPtr value)</arglist>
    </member>
    <member kind="function">
      <type>TiffType</type>
      <name>tiffType</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a117a85a01acfeef57da7c8bdf375ec23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a9042a9b60a1c72c09d894187e52e1195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>ade432b04da98bd2a61153c5400b3bd6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>aec8ea60ac53db3a19dcfad3696ebb232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Value *</type>
      <name>pValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a89551cc821f74099067c914dbe00c0ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a93cfd65ac320c9b9846673dd8b6813d0</anchor>
      <arglist>(const TiffEntryBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a897202c050120e1215ca3425380ab7e7</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>ab4966572c77cb1d76d6e98c0dbed4e86</anchor>
      <arglist>(uint32_t count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIdx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a1d207af0c6746b4dc88c2ba5769e5dac</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a9ab324d27420e834e30009f0a45b4fab</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a131247d5aedf30f60f0ee1905328036c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a87a026b705e56096985bd47ae7070fad</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>adbb5b0fe7ab81ce9a4a95633f68d9a16</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>aa3f9ddc998d51469b9621d7249f2e4ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>af8518a5e85a1d4892f7c86b3ca95a17f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>af75778a373cce48ab75bd6556900bb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static uint32_t</type>
      <name>writeOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a45ea0d30421096b90fffda654eafcd83</anchor>
      <arglist>(byte *buf, int32_t offset, TiffType tiffType, ByteOrder byteOrder)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffEntry.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a9fb8509a4c368ab14db8ea55adb6fe5a</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>abd8e1799e48ca34def38991834237544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a8ba9ed052cb610274e5dd6f351390681</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>aa21640ef99a0dad32bfcf12c8c0aa0cb</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a3476560ebfa8e1068f3d83f38958d5ac</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDataEntryBase</name>
    <filename>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a75720f07ddae6f598b0c83644076936c</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a1c26424e184e71bed2cdba5a8179c8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a5e9e26731e696cffd810ab1ebe4a2a85</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset)=0</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>szTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>af25696819de35209d88331e965c9bb6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>szGroup</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a803c82d63e21c2076e5d0642e8b99b8b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDataEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffDataEntry.html</filename>
    <base>Exiv2::Internal::TiffDataEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a9599fd771303451d38baea1446ea2f2e</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>abf3a297e1ef553521d6248d59c3da561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a09fa8cfd81902122b44a43e757dc1ed3</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>abe4b2a64063738008434328ade173960</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>aedbb8b0be3b6b31c38f0d99830a3bd0a</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a1f7b93956d2285cbf9181d1fb47f06fa</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffDataEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>af06b907d3aa7fd3aa461424e36c9eebc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a476bfad6efb4f99adc7c575142e79f03</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a9633a516a72d525ef86d37082a40b488</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffImageEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffImageEntry.html</filename>
    <base>Exiv2::Internal::TiffDataEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>aa5e4c9cc96d3a6f85fb33ede94aeda3c</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>aad413c25cc2128f0d743f1fc7e38ff13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a5289138e7d56331e7a3f10ac0f6d8626</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a30239ce6ddbc2895e7889f237b3de4b6</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ad7e246568faba32f7ada2800fd7428a6</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>af6d7a1db93df2fb340c4c1014edab170</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffImageEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a41bf327ef95500431cb149cb8d32b21b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ad0537233e24d3e43d3820e10dcf04813</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a0fcd09972923cbc46be53a6cf646d43c</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ac53b369851086b4aa9efac64d1badf2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>aa963850a13ce41396b85bda10daa39ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a84a8f2b31371547602ee03e51c13e695</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffSizeEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffSizeEntry.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a5131b7636e00e008fe80ea6b39bccc6f</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t dtTag, IfdId dtGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a4c12f727fbbcb6dd3c65fe19d0a5a005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>dtTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>af59f7b728a86ec1ab60dc9b3432deea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>dtGroup</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>ae75d80ad47d592019ee89b4d6cc0e300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a1ee5004e682efde5d778e2a325088209</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a98cc1d60637bc5564bdf6535b5a3f0fd</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffSizeEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>ab5ed11b27163cd9b604e75a2d2b9c349</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDirectory</name>
    <filename>classExiv2_1_1Internal_1_1TiffDirectory.html</filename>
    <base>Exiv2::Internal::TiffComponent</base>
    <member kind="function">
      <type></type>
      <name>TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a01b5039d6a7a353832d9b2014b765c98</anchor>
      <arglist>(uint16_t tag, IfdId group, bool hasNext=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>aea6749a32af0d4ffd533844105195712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>aef7bd156689b6eeb424051ac5afc5cb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a7b4a36a14d33a89032c115dcf2c3c0d7</anchor>
      <arglist>(const TiffDirectory &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a9edad2120742592a951e5575e3bab9b5</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::AutoPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a1b2eb50a8feffcc3ba03a2b068b34b4a</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a08c29ba4a6c12534062df3b4c2459b2b</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a4df146903bceffb9d6e4f1dfdbb0947d</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a3f8b673ea9c2824ccf3feea0838e0e26</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffDirectory *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a350dab8c80591abc86fa2e226a8febe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a5cd94913714b0aa9d856843e509d125b</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>aec94994cf87499241eb1afe3297ffced</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a887294c3f67609f3c8bc2b3075df1cb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a9785018a7909a3a4c634fa32a8ae85f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a1cc63c42d0048d207c422b4cb8589c42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a7009b9a9fbd243cd4b00b7d1e995bdee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffSubIfd</name>
    <filename>classExiv2_1_1Internal_1_1TiffSubIfd.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a7e3358438c3c1b01ce1267e95f173314</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId newGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ad9feee5ec17b0c25ee993fd56ad6f076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ad37bec524fa5191125fef9295eb5c30b</anchor>
      <arglist>(const TiffSubIfd &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a0968d20fb2bbf51c0d17a3de7746fe89</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::AutoPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>abfb32e809b34b2102e1462f102545a01</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ac09875dddd2d56f777e6363c3aa1c678</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a60d191e9a86618c60539334c83409764</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a50b6e7fd2630ba7770107e812dad40d4</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffSubIfd *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ae585dd2d21743b931a8533ad2df60c0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ae34995e3cb7d3534e3b98670f3ff80c9</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ac90dace9132ad1bfa721f56904a60f81</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a01e0c4fd6c64c4724c4561b315894b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a7976a9a0e9ebc905f7d10ded7bb448e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a3b68269cdff2d873837dabbcbc7ff6ee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffMnEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffMnEntry.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a3b8e2c44f34b63ab0741b2c873e07adc</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a2aa494d8e4bf771fa6dbb26bf71ab501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a79588c344e1c8f19a4c0d52e867776da</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::AutoPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a334f558b62d9d6ff3a9464ae78bbdb0b</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a9e452f5ca34fa391e5653da691a1c794</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a486002cf6c1614760236c3a6b2738c47</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>ab6e590a1cd1ba5783d4db2cceea7b6ad</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>ae9caf2f4172a40571fbd1403330a4d23</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffMnEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>adc1219a648a8a5ee37464f974ab0de99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>af74222e52ddf2972063b362b5ecd1680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a3385c28833ef31e5e1015e4c31ca8016</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffIfdMakernote</name>
    <filename>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</filename>
    <base>Exiv2::Internal::TiffComponent</base>
    <member kind="function">
      <type></type>
      <name>TiffIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>adb044a76bf663904946027f52c309374</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, MnHeader *pHeader, bool hasNext=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>adaac44e3543b3d34d3926ee20cda3aa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a509ac44715f29e9c56486bc15d6fa282</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a20548b0d390dd53f9192326853715759</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>aad6227d7129f265443a6c6ff2ba8b2bd</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9c73f4a7dee024625c87b692dd236a7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a32f824033554538d1ec3f4060cc20cf6</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>mnOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>af4e1288f8bcf09231df57fe1864386d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a98d8d4eea895ec9e1cccce8a503bdc17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a636c719000dc96281ba49dc0b90121aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>imageByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>adc718bdfcd9ba174d7e804d4453649e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a71832ca3560cb196ecd1ef01c9cb4f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a3468216a6b55229a72e031d760db49a3</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::AutoPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a394a9cc44d64ef6c654cb4484fc1c8c5</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a90196d721b8439f8e1b5a8b15740dcd0</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9ab6b72ae54fb831aae8d3c93166d606</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>adaadc6113c745cdb8a69d3240781a452</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffIfdMakernote *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ab951508fb7ffcb5fb3028d49c0d0cf01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>aea787a9356f5a8795638ec1294f4939c</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ab8d2379197850996bcbd6b1a035932e9</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a1810693a4ab53294eecfc5401fdb0536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a2830f5afbb090defaf30d94a3cc29b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a09aed9782dffb60600b303933d7a999b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a1559db4023264f6e0b3bb1bceeaf3187</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ArrayDef</name>
    <filename>structExiv2_1_1Internal_1_1ArrayDef.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>a174ab1037b44fcbee29ff3c750f506d8</anchor>
      <arglist>(uint32_t idx) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>a4d76af2750f7222508717c97fe2c04a9</anchor>
      <arglist>(uint16_t tag, IfdId group) const </arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>idx_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>ae938e896879af5d19bd95f7b48fe55b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TiffType</type>
      <name>tiffType_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>a95c11f75aca91b98e312d44f9932109c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>count_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>acad24ca28deb4c2327cbb720bb4a59b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ArrayCfg</name>
    <filename>structExiv2_1_1Internal_1_1ArrayCfg.html</filename>
    <member kind="function">
      <type>uint32_t</type>
      <name>tagStep</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>add94950592a37970499f05f185fd0fc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>abbebcf2ae0b67a438d0fa66a3cabed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ByteOrder</type>
      <name>byteOrder_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a9df7e162de9f33b28cb88184b1af056d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TiffType</type>
      <name>elTiffType_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a9784c4e799ef48fc178e27ecf24dce20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CryptFct</type>
      <name>cryptFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a7a6ae4cd29d4e7822b4fdaccea7f95a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSize_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a07e1bbd973045b9faea8a595a00e29eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasFillers_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>ade63547b782912667cd9c0d278659e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>concat_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a48d04c0a34331b2c60918071e5cd41d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayDef</type>
      <name>elDefaultDef_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a360bcca16f6238842571b885fd4d7ddd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ArraySet</name>
    <filename>structExiv2_1_1Internal_1_1ArraySet.html</filename>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>cfg_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArraySet.html</anchorfile>
      <anchor>a8ad1065ba895de81edfeebf0f684dcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef *</type>
      <name>def_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArraySet.html</anchorfile>
      <anchor>a5509a22b08d09d9dc5b33f8ec8dd81f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>defSize_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArraySet.html</anchorfile>
      <anchor>aa0315132a8c0b9d1e51a2c00996175cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffBinaryArray</name>
    <filename>classExiv2_1_1Internal_1_1TiffBinaryArray.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>af4190ceecbb69b8ac64ba70715253b80</anchor>
      <arglist>(uint16_t tag, IfdId group, const ArrayCfg *arrayCfg, const ArrayDef *arrayDef, int defSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>af524c960095437ff0051509d395b1c07</anchor>
      <arglist>(uint16_t tag, IfdId group, const ArraySet *arraySet, int setSize, CfgSelFct cfgSelFct)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>adf448678af2f10acbe05bc7ea2af34fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>addElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ac8240d4cc33515c463d5edc99e358100</anchor>
      <arglist>(uint32_t idx, const ArrayDef &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a3553703cabd53249611e445e00186bd8</anchor>
      <arglist>(IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a967b9f71d33fcf3cbdd42b2d980de7b1</anchor>
      <arglist>(TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iniOrigDataBuf</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a8c02e3e6547f9d3dd5f0c13a40e54df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updOrigDataBuf</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a64de17c00126b9bf6748590e013195c7</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecoded</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a3823ad5f78af167150a9f21d9960fbc5</anchor>
      <arglist>(bool decoded)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayCfg *</type>
      <name>cfg</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a791694e4b1e5f279fd619882b998e630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ArrayDef *</type>
      <name>def</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a14fd7052eafa7bcdd32dea031d2927b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a80c8d2f51f5cdfcbaba7b3b0c980c8fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decoded</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a209331ee22a9e846fd5a45fd47c92e95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ab0a0d6f72e52b4fce1f762256780a5c0</anchor>
      <arglist>(const TiffBinaryArray &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a1a7c93e85c88379eae644f52f2ee949b</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::AutoPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a162149c957c96f57872f8b5576968dae</anchor>
      <arglist>(TiffComponent::AutoPtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a4f3c7701652cd89963e3e6cdfa9f4681</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a783d1478b63bd43ecfd3f5cc3db562f3</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a10eab074460ab0dfe5759fb95a88a087</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffBinaryArray *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>abe8bab29c025446c6a7165fedd60d05a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a418477a03288ff2dc646fa0d5d91dfdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a5e6033f5498096f8bb69ad250167d1ea</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffBinaryElement</name>
    <filename>classExiv2_1_1Internal_1_1TiffBinaryElement.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a2c3dfe8362b2ab712c105369c8450cb1</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a799c08f15d2a3d819fe92a040413fdc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElDef</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a47a1d69ebc7dc1031700e889f33bfe6d</anchor>
      <arglist>(const ArrayDef &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>ab8ccf609952eeebc04b51a41bf58aa7c</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayDef *</type>
      <name>elDef</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a3081b891392ee8a6f7a071d68afe42da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>elByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a0e755fb1eb44681991fcb81cdfbd9d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a8af9080da9fb605f3a62dcc7f8d93dce</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a4f7e4224895b9b2fa5509756d215c869</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>aa4cadcdd7f93fccd93d54df6b003cc17</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffBinaryElement *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>aedaf5fe38930763a1c656eeeb9532bb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>ab52544590d47de60a40962e68edb01f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a90878b5b402ce6193803c6a7100b86d9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffHeaderBase</name>
    <filename>classExiv2_1_1Internal_1_1TiffHeaderBase.html</filename>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffHeader</name>
    <filename>classExiv2_1_1Internal_1_1TiffHeader.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>TiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>a578d4f78f22592940e8f9f93877cd589</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian, uint32_t offset=0x00000008, bool hasImageTags=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>a2e0717d71eebfb61059a1a98ee1b1646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImageTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>a5351189136b42536bb9d052a16f21ddc</anchor>
      <arglist>(uint16_t tag, IfdId group, const PrimaryGroups *pPrimaryGroups) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffImgTagStruct</name>
    <filename>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</filename>
    <class kind="struct">Exiv2::Internal::TiffImgTagStruct::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</anchorfile>
      <anchor>a4400d21c442f813c8624342c8fe1d28b</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</anchorfile>
      <anchor>a5dd4345fa1fadf39f28197cc77e2dce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</anchorfile>
      <anchor>a3a7694948ee2d27aa62a3c8c67ac975c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffImgTagStruct::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</anchorfile>
      <anchor>a8c860d0f22a9dcbe640b004cf11e05ce</anchor>
      <arglist>(uint16_t t, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>t_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</anchorfile>
      <anchor>acbeeab7da5f13ea018abff27d92c1d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</anchorfile>
      <anchor>aef9b111263b0b604cece4db84c1a1520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffGroupStruct</name>
    <filename>structExiv2_1_1Internal_1_1TiffGroupStruct.html</filename>
    <class kind="struct">Exiv2::Internal::TiffGroupStruct::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>af89eb5ffd12b40803ab643a110af58e9</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>aee79ac1783b9f3de6e1a144ce64d0fd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>extendedTag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>a211c3f8b9aed29b3b7844c4cabd55071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>a03d9ffc3800f49b09b7836e7b89f5b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTiffCompFct</type>
      <name>newTiffCompFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>ad24b4536890ac475773d4a1358a4d416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffGroupStruct::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</anchorfile>
      <anchor>a72bbb2804a5f207abf2a56abbf3b21ea</anchor>
      <arglist>(uint32_t e, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>e_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</anchorfile>
      <anchor>a53a35fd5353cda375b229c0521a35971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</anchorfile>
      <anchor>aca57c9f52d7c58df93f360e1656e5995</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffTreeStruct</name>
    <filename>structExiv2_1_1Internal_1_1TiffTreeStruct.html</filename>
    <class kind="struct">Exiv2::Internal::TiffTreeStruct::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>a31789fcde22be21bd2d38d9dc6542207</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>root_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>ae19ddbc9bbc53a1b47c55b2c39916cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>a9a0e03e84d512b123a3140b1fbc44683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>parentGroup_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>af4fd8bcf3a082c82c5740370b6fb6821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>parentExtTag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>a9f138eb1a82db09d6d6571ab952497dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffTreeStruct::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</anchorfile>
      <anchor>ab293dd00014d2a09ad7a3fc3ce8cabdb</anchor>
      <arglist>(uint32_t r, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>r_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</anchorfile>
      <anchor>a497fa01af248a14005b9511360330ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</anchorfile>
      <anchor>a094999c962296fe5f13017bb07aba9f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffCreator</name>
    <filename>classExiv2_1_1Internal_1_1TiffCreator.html</filename>
    <member kind="function" static="yes">
      <type>static std::auto_ptr&lt; TiffComponent &gt;</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCreator.html</anchorfile>
      <anchor>ae9fc1e9bb38355358e114a982afafcbb</anchor>
      <arglist>(uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCreator.html</anchorfile>
      <anchor>a47e495da6bbd360c753372890192139c</anchor>
      <arglist>(TiffPath &amp;tiffPath, uint32_t extendedTag, IfdId group, uint32_t root)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffParserWorker</name>
    <filename>classExiv2_1_1Internal_1_1TiffParserWorker.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffParserWorker.html</anchorfile>
      <anchor>a942f09d50e57072672cee2fd4bc29a11</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size, uint32_t root, FindDecoderFct findDecoderFct, TiffHeaderBase *pHeader=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffParserWorker.html</anchorfile>
      <anchor>a997834afb3498e2abd298921fc14dee7</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData, uint32_t root, FindEncoderFct findEncoderFct, TiffHeaderBase *pHeader, OffsetWriter *pOffsetWriter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffMapping</name>
    <filename>classExiv2_1_1Internal_1_1TiffMapping.html</filename>
    <member kind="function" static="yes">
      <type>static DecoderFct</type>
      <name>findDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMapping.html</anchorfile>
      <anchor>a03f4d94b3e5dcad752ce88e228bb5c2d</anchor>
      <arglist>(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EncoderFct</type>
      <name>findEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMapping.html</anchorfile>
      <anchor>af1929701af5886a4768883d577e96a1c</anchor>
      <arglist>(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OffsetWriter</name>
    <filename>classExiv2_1_1Internal_1_1OffsetWriter.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>OffsetId</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aaacdcd1d3c2a9cabb6ee53dca00d7b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cr2RawIfdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aaacdcd1d3c2a9cabb6ee53dca00d7b66a9cd54e49efc4b1dfaf2afdf478cd7369</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>ac2bb169036d207264d7567a1dad7bd01</anchor>
      <arglist>(OffsetId id, uint32_t origin, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>a3027f3a66c703571949035345a962ac8</anchor>
      <arglist>(OffsetId id, uint32_t target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeOffsets</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aeecd16d5bdc23ce332fa3630258c8543</anchor>
      <arglist>(BasicIo &amp;io) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::FindExifdatum</name>
    <filename>classExiv2_1_1Internal_1_1FindExifdatum.html</filename>
    <member kind="function">
      <type></type>
      <name>FindExifdatum</name>
      <anchorfile>classExiv2_1_1Internal_1_1FindExifdatum.html</anchorfile>
      <anchor>a24aa8db73317e338856c0009dd47ee9a</anchor>
      <arglist>(Exiv2::Internal::IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classExiv2_1_1Internal_1_1FindExifdatum.html</anchorfile>
      <anchor>a74cd28ba60eed8876bbe514329ab1a42</anchor>
      <arglist>(const Exiv2::Exifdatum &amp;md) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffVisitor</name>
    <filename>classExiv2_1_1Internal_1_1TiffVisitor.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>GoEvent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geTraverse</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8aa143ea958e4dc68dc636fad5fea2c9180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geKnownMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8aa4c3cf947f58363d79cdf275c09357b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffVisitor</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a253cb67361289149b84f08811065d1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffVisitor</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a3d77e16d272afb041d1158245fee439a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGo</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ae5ba2a8d7d67f632470d585752a098b3</anchor>
      <arglist>(GoEvent event, bool go)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>af004fb7a5e7c72caebdf729b3362b412</anchor>
      <arglist>(TiffEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a09a605d7c2e112ccebee4c55366467e3</anchor>
      <arglist>(TiffDataEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>aab5927f89109dc8cfcbcb3ccfbe2fb5b</anchor>
      <arglist>(TiffImageEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ade6e6eead57ccb78ebc0844402bf3529</anchor>
      <arglist>(TiffSizeEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a9f17fc91eaf54d71663d5d8258f940c3</anchor>
      <arglist>(TiffDirectory *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a351bbd9f685e8fda073ad080cbdaf0fc</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>afe692b051c5e1bf0b8023a00b3e4af4f</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a9ee375a20d3387b94f4c719472e7f196</anchor>
      <arglist>(TiffSubIfd *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>abaee0a5b57d41b46d1266c1aeae7f553</anchor>
      <arglist>(TiffMnEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ac16398cc0d44e5aa759c9492b002461d</anchor>
      <arglist>(TiffIfdMakernote *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>afc8f05466b176ead31fdb8a07e122880</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a5a58e763e52cf17e3766c967065c0fbc</anchor>
      <arglist>(TiffBinaryArray *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArrayEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a3de094a0126aa6913f80eda90d7b1027</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a5281ac9c370de3e05f0874acdfc5da6b</anchor>
      <arglist>(TiffBinaryElement *object)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>go</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a3c0f0648fd65eb69bf96e7773c7bc812</anchor>
      <arglist>(GoEvent event) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffFinder</name>
    <filename>classExiv2_1_1Internal_1_1TiffFinder.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffFinder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>afce0929db4ef88546a4fb852f324ca5e</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffFinder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a651920b0692b216555b874be57322c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a2e5e58d10be57dfe53e80738d41d48a8</anchor>
      <arglist>(TiffEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a7df3b5308cfc17742dc23f3f1d56315b</anchor>
      <arglist>(TiffDataEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a6411194d674a5e79436d85f4b86feedd</anchor>
      <arglist>(TiffImageEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a647ac947e591dc44cfb104814dd8b3d3</anchor>
      <arglist>(TiffSizeEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a9580ca7dd0cf4fa02191a9c07b6bcdac</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>acc2f36f0f9f8d5e07779512812bf6fef</anchor>
      <arglist>(TiffSubIfd *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a27b9f7cc83abd1941e16172352e621e5</anchor>
      <arglist>(TiffMnEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a78c7177567dfe147471bace7c68f6544</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>af41e619a8b0533e31d6f4e79f08b25fb</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a13e3b7ccf8e44b6c08f634c36ffc91f7</anchor>
      <arglist>(TiffBinaryElement *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findObject</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>afe0f826f4c5c707916234de7094aa64e</anchor>
      <arglist>(TiffComponent *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ae304660df9b523cbc3bb317aa6514a4c</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>result</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a075c3fb3b37afa7bead758966ac3ce98</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffCopier</name>
    <filename>classExiv2_1_1Internal_1_1TiffCopier.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffCopier</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ac432131d70fdb78c7e84d8b7b457b9e2</anchor>
      <arglist>(TiffComponent *pRoot, uint32_t root, const TiffHeaderBase *pHeader, const PrimaryGroups *pPrimaryGroups)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffCopier</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ac5b54797084d06d46638783cab379dbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a122167e9d3ae403e76c9f1928ba1339d</anchor>
      <arglist>(TiffEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ae67741aabedda72ec44c737cd3ff05cd</anchor>
      <arglist>(TiffDataEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a7bee97ff77f152673a9fd164a42592f5</anchor>
      <arglist>(TiffImageEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a3eaf9d924005d7ba1821979c96938d79</anchor>
      <arglist>(TiffSizeEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a310faaa4c3edc7d534de3f93dc7a6edf</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a85b82a26fdf28c446fdc7bfd18ef27e6</anchor>
      <arglist>(TiffSubIfd *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a161f5e62a24f44abe996014c7439c3d4</anchor>
      <arglist>(TiffMnEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a730e5838269681fa5bb919f9f5513792</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>aafaf7cb790d7890dd3b8b6ff3f1164de</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a7897f9764c707e97ba3257b90d50f9dc</anchor>
      <arglist>(TiffBinaryElement *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyObject</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ad93c6b4502bc4b150d18b456f83c253e</anchor>
      <arglist>(TiffComponent *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDecoder</name>
    <filename>classExiv2_1_1Internal_1_1TiffDecoder.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a1507de48fdedec53c7fbd381a03ba4a6</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, TiffComponent *const pRoot, FindDecoderFct findDecoderFct)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a46bb21979df0b6f0488cc1f3cd4c3a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a21d5db451313da5149484ab11db8b925</anchor>
      <arglist>(TiffEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>af4e2cae14a9e73258e6432f787e298b2</anchor>
      <arglist>(TiffDataEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>aac235b79aec65dc5fdfe2da256581da4</anchor>
      <arglist>(TiffImageEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>ac705b6d17270ca5dab87651ebb8cda45</anchor>
      <arglist>(TiffSizeEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a9ed764b8ae5c01ec17ac053958daa041</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>ac147682cc77dcbc3b0959997f67ab8f7</anchor>
      <arglist>(TiffSubIfd *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a9a58a1448744f0ea968cbfa92fc4fc88</anchor>
      <arglist>(TiffMnEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>ab29ed8ad16fc31bad892ba09c25af21a</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>afccda321f391066353b0db1331153051</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a9aa20571625eaf7a498160a8f54eecd7</anchor>
      <arglist>(TiffBinaryElement *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>aa8add8599e73ceafd8c892515e8e1d37</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeStdTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a3dd97ca1a8d80586a24ed6d7c04fe2c4</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeIptc</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a57c90a966b1a575594590d9e6fc2e0dc</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeXmp</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>ae5504e0c2926277b0d6587bf182984c7</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffEncoder</name>
    <filename>classExiv2_1_1Internal_1_1TiffEncoder.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a8ce50d7674613fe90dfc0986c0f556b4</anchor>
      <arglist>(const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData, TiffComponent *pRoot, const bool isNewImage, const PrimaryGroups *pPrimaryGroups, const TiffHeaderBase *pHeader, FindEncoderFct findEncoderFct)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a1f349a87b1b2c397c150f2375c7c7106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a163c9c49059d96105748d7e2ea8d2b74</anchor>
      <arglist>(TiffEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ab2b855fb74f2550d2f735327c643f3b7</anchor>
      <arglist>(TiffDataEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>aa16a113a06fa297ea1397781ac4e920e</anchor>
      <arglist>(TiffImageEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a2ca8286cc85a46a779954e115bbf0232</anchor>
      <arglist>(TiffSizeEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>aaf94fc517661659348d8f4c626807de9</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a410fd37077df80a9a38ab3a20d588056</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>aa106e5ebb8b7f37de783a61e441a9614</anchor>
      <arglist>(TiffSubIfd *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>af7217ab05df66ee8527e92b5353c8b79</anchor>
      <arglist>(TiffMnEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a6cdc32e19303876fb2904715e9f84ee0</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a41660acbc530bcbe1b6d8b27173cac6c</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>acce6190a2c3a89b4018d3f5183966903</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArrayEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a825c71712f78496ca8f046dda27406b7</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a50f06e7a030d3c1c078286f395d898dd</anchor>
      <arglist>(TiffBinaryElement *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeTiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a6337b077ea2901f35e8fa5654b563f2d</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9e34574779fa30bafe92bd55487323c5</anchor>
      <arglist>(TiffBinaryElement *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a951ccd77eee85396174abde0e2a3ecb3</anchor>
      <arglist>(TiffBinaryArray *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ac2abfd0b9aedff5d4428bee951cb19af</anchor>
      <arglist>(TiffDataEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a94567744627f7f507cc4f1fa16506647</anchor>
      <arglist>(TiffEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a5e3c0f3f3875c5536f83246ba1935bbf</anchor>
      <arglist>(TiffImageEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a2a407a1199102a5865650fafe2a35caf</anchor>
      <arglist>(TiffMnEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ac49cea13b2c733bb6eb1c9964fc33c26</anchor>
      <arglist>(TiffSizeEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a2a813e9d67f22839131e26087bef6caf</anchor>
      <arglist>(TiffSubIfd *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeTiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a4f7eb1a12c41743206eb186732b916db</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeOffsetEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a99c2f3243b36054e23ed4d0d0acb92f4</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeIptc</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9bb14099d61c48278daa4fe76f484a6e</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>aa7f980841679a63fd86e895c64b9268d</anchor>
      <arglist>(TiffComponent *pRootDir, TiffComponent *pSourceDir, uint32_t root)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirty</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a5a42879df429239e393283f280019d70</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9637b61073bbe40e28ceac1ff5e23e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a21461f9cfdd435d24db7e601743a8d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WriteMethod</type>
      <name>writeMethod</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9f70d962c85cd3f20331b261dd73329d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffRwState</name>
    <filename>classExiv2_1_1Internal_1_1TiffRwState.html</filename>
    <member kind="typedef">
      <type>std::auto_ptr&lt; TiffRwState &gt;</type>
      <name>AutoPtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>adc73896025dc849defe74e149cef4152</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffRwState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>a69b9da8b23ebd14d986a4a9ae29fb6b3</anchor>
      <arglist>(ByteOrder byteOrder, uint32_t baseOffset)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>abae7ec85e6f689f2a049e41735e15116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>a67623fd8a7f27730c8f933900dde39a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffReader</name>
    <filename>classExiv2_1_1Internal_1_1TiffReader.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffReader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a9a5ad34241890c82ac4c0de005974266</anchor>
      <arglist>(const byte *pData, uint32_t size, TiffComponent *pRoot, TiffRwState::AutoPtr state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffReader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>afe310dab5d3b058dce65377aaa667823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a80670aea5ec5db38681485f30ac8b7f8</anchor>
      <arglist>(TiffEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a7c5f0d9d0a26f278e666c9aabb60a3c8</anchor>
      <arglist>(TiffDataEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a6d0240aa0b096296a3c3575acd971f4b</anchor>
      <arglist>(TiffImageEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a502c535ff222883b4f479950a1132658</anchor>
      <arglist>(TiffSizeEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>aac2ca4bab27246a480069bd0491f9350</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>aec83f2d101e7ecc4f8ae00f1c3debfab</anchor>
      <arglist>(TiffSubIfd *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a7efdcfe00dcaa4a51cbb8aae1481ee6e</anchor>
      <arglist>(TiffMnEntry *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a40b3907cebcb7a3bfcb93b1d50730015</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a7c9603364b1ebdf39c8c8e5ec2f33c9d</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a893b2e995e622d55268c04fea5f36561</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a5471377e19ef85bfddc218ae8569bad8</anchor>
      <arglist>(TiffBinaryElement *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a69624656368e5905c64e70b6d46b278d</anchor>
      <arglist>(TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a22414a0e61d0f5d7c130dbb3b10fe961</anchor>
      <arglist>(TiffDataEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>af6430db9d15a1bce4273e22c892d3779</anchor>
      <arglist>(TiffRwState::AutoPtr state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>aa0cfdf439fcd92adce61c16a1664ea40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>circularReference</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a92d3c537e43e5dec338c0f6054aab86e</anchor>
      <arglist>(const byte *start, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextIdx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a5b5ad63d2375049fd6e32098aecd7388</anchor>
      <arglist>(IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postProcess</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ade2df556b57153234e608801f907df1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>aab9f4c2b0dda826148fc3d8c2265c0b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a265a8a2954a23a8771bad59428b16e0c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2::Internal::Tag</name>
    <filename>namespaceExiv2_1_1Internal_1_1Tag.html</filename>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>none</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a17e6ad3bb3358f906bf837a70130abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>root</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a417152f70ffd99dfe68efd7d5d5264c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>next</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>afd82fb6baa277be5f954f3ec475b6162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>all</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>ae69c008300422213aaece8ee8c730109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>pana</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a3af7db83d7ab02130ca4c7ee7c2c1949</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jzon::FormatInterpreter</name>
    <filename>classJzon_1_1FormatInterpreter.html</filename>
  </compound>
  <compound kind="struct">
    <name>Jzon::Pair</name>
    <filename>structJzon_1_1Pair.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
  </compound>
  <compound kind="class">
    <name>Jzon::TypeException</name>
    <filename>classJzon_1_1TypeException.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::NotFoundException</name>
    <filename>classJzon_1_1NotFoundException.html</filename>
  </compound>
  <compound kind="struct">
    <name>Jzon::Format</name>
    <filename>structJzon_1_1Format.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Node</name>
    <filename>classJzon_1_1Node.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Value</name>
    <filename>classJzon_1_1Value.html</filename>
    <base>Jzon::Node</base>
  </compound>
  <compound kind="class">
    <name>Jzon::Object</name>
    <filename>classJzon_1_1Object.html</filename>
    <base>Jzon::Node</base>
    <class kind="class">Jzon::Object::const_iterator</class>
    <class kind="class">Jzon::Object::iterator</class>
  </compound>
  <compound kind="class">
    <name>Jzon::Object::const_iterator</name>
    <filename>classJzon_1_1Object_1_1const__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Object::iterator</name>
    <filename>classJzon_1_1Object_1_1iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Array</name>
    <filename>classJzon_1_1Array.html</filename>
    <base>Jzon::Node</base>
    <class kind="class">Jzon::Array::const_iterator</class>
    <class kind="class">Jzon::Array::iterator</class>
  </compound>
  <compound kind="class">
    <name>Jzon::Array::const_iterator</name>
    <filename>classJzon_1_1Array_1_1const__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Array::iterator</name>
    <filename>classJzon_1_1Array_1_1iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::FileWriter</name>
    <filename>classJzon_1_1FileWriter.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::FileReader</name>
    <filename>classJzon_1_1FileReader.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Writer</name>
    <filename>classJzon_1_1Writer.html</filename>
  </compound>
  <compound kind="class">
    <name>Jzon::Parser</name>
    <filename>classJzon_1_1Parser.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Util</name>
    <filename>namespaceUtil.html</filename>
    <class kind="class">Util::Getopt</class>
    <member kind="function">
      <type>std::string</type>
      <name>dirname</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a2d5eb823f2910e392a04c146c54f9543</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>basename</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a0ec92119bdb7f1269693f1ee94d360ea</anchor>
      <arglist>(const std::string &amp;path, bool delsuffix=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>suffix</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>aa61f770944bfdb930ec8241c529887b8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>strtol</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>ae3760f32ad9aaad800e68917578c7220</anchor>
      <arglist>(const char *nptr, long &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>aac2efa1797a1bd038485be421ca80ca3</anchor>
      <arglist>(std::string &amp;text, const std::string &amp;searchText, const std::string &amp;replaceText)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Util::Getopt</name>
    <filename>classUtil_1_1Getopt.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>option</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>a27e365f1f9710ce80f4b534686d7e887</anchor>
      <arglist>(int opt, const std::string &amp;optarg, int optopt)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nonoption</name>
      <anchorfile>classUtil_1_1Getopt.html</anchorfile>
      <anchor>af182b096eb3da4ce48c1bbb8b84817b1</anchor>
      <arglist>(const std::string &amp;argv)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>exiv2</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/exiv2/</path>
    <filename>dir_37d6fa65281b882183c3a4a410ad77f3.html</filename>
    <file>actions.hpp</file>
    <file>asfvideo.hpp</file>
    <file>basicio.hpp</file>
    <file>bmpimage.hpp</file>
    <file>canonmn_int.hpp</file>
    <file>convert.hpp</file>
    <file>cr2image.hpp</file>
    <file>cr2image_int.hpp</file>
    <file>crwimage.hpp</file>
    <file>crwimage_int.hpp</file>
    <file>datasets.hpp</file>
    <file>easyaccess.hpp</file>
    <file>epsimage.hpp</file>
    <file>error.hpp</file>
    <file>exif.hpp</file>
    <file>exiv2.hpp</file>
    <file>exiv2app.hpp</file>
    <file>exv_conf.h</file>
    <file>exv_msvc.h</file>
    <file>fujimn_int.hpp</file>
    <file>futils.hpp</file>
    <file>getopt_win32.h</file>
    <file>gifimage.hpp</file>
    <file>http.hpp</file>
    <file>i18n.h</file>
    <file>image.hpp</file>
    <file>iptc.hpp</file>
    <file>jp2image.hpp</file>
    <file>jpgimage.hpp</file>
    <file>Jzon.h</file>
    <file>makernote_int.hpp</file>
    <file>matroskavideo.hpp</file>
    <file>metadatum.hpp</file>
    <file>minoltamn_int.hpp</file>
    <file>mrwimage.hpp</file>
    <file>nikonmn_int.hpp</file>
    <file>olympusmn_int.hpp</file>
    <file>orfimage.hpp</file>
    <file>orfimage_int.hpp</file>
    <file>panasonicmn_int.hpp</file>
    <file>pentaxmn_int.hpp</file>
    <file>pgfimage.hpp</file>
    <file>pngchunk_int.hpp</file>
    <file>pngimage.hpp</file>
    <file>preview.hpp</file>
    <file>private.h</file>
    <file>properties.hpp</file>
    <file>psdimage.hpp</file>
    <file>quicktimevideo.hpp</file>
    <file>rafimage.hpp</file>
    <file>rcsid_int.hpp</file>
    <file>riffvideo.hpp</file>
    <file>rw2image.hpp</file>
    <file>rw2image_int.hpp</file>
    <file>samsungmn_int.hpp</file>
    <file>sigmamn_int.hpp</file>
    <file>sonymn_int.hpp</file>
    <file>ssh.hpp</file>
    <file>tags.hpp</file>
    <file>tags_int.hpp</file>
    <file>tgaimage.hpp</file>
    <file>tiffcomposite_int.hpp</file>
    <file>tifffwd_int.hpp</file>
    <file>tiffimage.hpp</file>
    <file>tiffimage_int.hpp</file>
    <file>tiffvisitor_int.hpp</file>
    <file>timegm.h</file>
    <file>types.hpp</file>
    <file>tzfile.h</file>
    <file>utils.hpp</file>
    <file>value.hpp</file>
    <file>version.hpp</file>
    <file>xmp.hpp</file>
    <file>xmpsidecar.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/include/</path>
    <filename>dir_d44c64559bbebec7f509842c48db8b23.html</filename>
    <dir>exiv2</dir>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/Users/rmills/gnu/exiv2/gsoc13trunk/src/</path>
    <filename>dir_68267d1309a1af8e8297ef4c3efbcdba.html</filename>
    <file>actions.cpp</file>
    <file>asfvideo.cpp</file>
    <file>basicio.cpp</file>
    <file>bmpimage.cpp</file>
    <file>canonmn.cpp</file>
    <file>convert.cpp</file>
    <file>cr2image.cpp</file>
    <file>crwedit.cpp</file>
    <file>crwimage.cpp</file>
    <file>crwparse.cpp</file>
    <file>datasets.cpp</file>
    <file>doxygen.hpp</file>
    <file>easyaccess.cpp</file>
    <file>epsimage.cpp</file>
    <file>error.cpp</file>
    <file>exif.cpp</file>
    <file>exifprint.cpp</file>
    <file>exiv2.cpp</file>
    <file>fujimn.cpp</file>
    <file>futils.cpp</file>
    <file>gifimage.cpp</file>
    <file>http.cpp</file>
    <file>httptest.cpp</file>
    <file>image.cpp</file>
    <file>iptc.cpp</file>
    <file>jp2image.cpp</file>
    <file>jpgimage.cpp</file>
    <file>Jzon.cpp</file>
    <file>makernote.cpp</file>
    <file>matroskavideo.cpp</file>
    <file>metadatum.cpp</file>
    <file>minoltamn.cpp</file>
    <file>mrwimage.cpp</file>
    <file>mrwthumb.cpp</file>
    <file>nikonmn.cpp</file>
    <file>olympusmn.cpp</file>
    <file>orfimage.cpp</file>
    <file>panasonicmn.cpp</file>
    <file>pentaxmn.cpp</file>
    <file>pgfimage.cpp</file>
    <file>pngchunk.cpp</file>
    <file>pngimage.cpp</file>
    <file>preview.cpp</file>
    <file>properties.cpp</file>
    <file>psdimage.cpp</file>
    <file>quicktimevideo.cpp</file>
    <file>rafimage.cpp</file>
    <file>remotetest.cpp</file>
    <file>riffvideo.cpp</file>
    <file>rw2image.cpp</file>
    <file>samsungmn.cpp</file>
    <file>sigmamn.cpp</file>
    <file>sonymn.cpp</file>
    <file>ssh.cpp</file>
    <file>tags.cpp</file>
    <file>tgaimage.cpp</file>
    <file>tiff-test.cpp</file>
    <file>tiffcomposite.cpp</file>
    <file>tiffimage.cpp</file>
    <file>tiffmn-test.cpp</file>
    <file>tiffvisitor.cpp</file>
    <file>types.cpp</file>
    <file>utils.cpp</file>
    <file>utiltest.cpp</file>
    <file>value.cpp</file>
    <file>version.cpp</file>
    <file>xmp.cpp</file>
    <file>xmpdump.cpp</file>
    <file>xmpsidecar.cpp</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Image metadata library and tools v0.23</title>
    <filename>index</filename>
    <docanchor file="index" title="Exiv2 Overview">overview</docanchor>
    <docanchor file="index" title="Getting started">getting-started</docanchor>
    <docanchor file="index" title="Metadata reference tables">metadata</docanchor>
    <docanchor file="index" title="File Formats">formats</docanchor>
    <docanchor file="index" title="Support">supp</docanchor>
    <docanchor file="index" title="License">license</docanchor>
  </compound>
</tagfile>
