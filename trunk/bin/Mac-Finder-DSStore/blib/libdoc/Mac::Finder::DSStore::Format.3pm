.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mac::Finder::DSStore::Format 3"
.TH Mac::Finder::DSStore::Format 3 "2010-05-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "DS_Store Format"
.IX Header "DS_Store Format"
Some notes on the format of the Macintosh Finder's \fI.DS_Store\fR files.
.SH "OVERVIEW"
.IX Header "OVERVIEW"
The Mac \s-1OS\s0 X Finder stores information about how it displays directories
and files in files named \fI.DS_Store\fR in each directory which it has touched.
(This seems to be a departure from the pre-OSX method of storing all the
information in one file at the root of each filesystem).
The format is not documented by Apple.
The information in this file is based on the reverse-engineering notes
by Mark Mentovai published on the Mozilla wiki,
and further investigation by me (Wim Lewis).
.SH "FILE FORMAT"
.IX Header "FILE FORMAT"
The \fI.DS_Store\fR file holds a series of records giving attributes of
the files in the directory or of the directory itself (referred to as
\&\fI.\fR). These records are stored in a B\-tree, and the pages of the
B\-tree are stored in the file by a \*(L"buddy allocator\*(R" along with a
small amount of metadata. The allocator also provides a level of
indirection, from small integers to file offsets, presumably allowing
blocks to be relocated as they grow and shrink.
.PP
The file is generally big-endian. Unless otherwise noted, an \*(L"integer\*(R"
is a four-byte (32\-bit) big-endian number, probably unsigned (but I'm
not always sure about that).
.Sh "Records"
.IX Subsection "Records"
A record has the following format:
.IP "\(bu" 4
Filename length, in characters, as an integer. (4 bytes)
.IP "\(bu" 4
Filename, in big-endian \s-1UTF\-16\s0. Presumably with the same Unicode
composition rules as the \s-1HFS+\s0 filesystem. (2 * length bytes)
.IP "\(bu" 4
Structure id or type, a FourCharCode indicating what property of the
file this entry describes. (4 bytes)
.IP "\(bu" 4
Data type (4 bytes), indicating what kind of data field follows:
.RS 4
.ie n .IP "\*(Aqlong\*(Aq" 4
.el .IP "\f(CW\*(Aqlong\*(Aq\fR" 4
.IX Item "long"
An integer (4 bytes)
.ie n .IP "\*(Aqshor\*(Aq" 4
.el .IP "\f(CW\*(Aqshor\*(Aq\fR" 4
.IX Item "shor"
A short integer? Still stored as four bytes, but the first two are
always zero.
.ie n .IP "\*(Aqbool\*(Aq" 4
.el .IP "\f(CW\*(Aqbool\*(Aq\fR" 4
.IX Item "bool"
A boolean value, stored as one byte.
.ie n .IP "\*(Aqblob\*(Aq" 4
.el .IP "\f(CW\*(Aqblob\*(Aq\fR" 4
.IX Item "blob"
An arbitrary block of bytes, stored as an integer followed by that
many bytes of data.
.ie n .IP "\*(Aqtype\*(Aq" 4
.el .IP "\f(CW\*(Aqtype\*(Aq\fR" 4
.IX Item "type"
Four bytes, containing a FourCharCode.
.ie n .IP "\*(Aqustr\*(Aq" 4
.el .IP "\f(CW\*(Aqustr\*(Aq\fR" 4
.IX Item "ustr"
A Unicode text string, stored as an integer character count followed 
by 2*count bytes of data in \s-1UTF\-16\s0.
.RE
.RS 4
.RE
.PP
A given structure id/type always seems to have the same type of data
associated with it, and any structure id appears at most once per
filename. Some only appear on files, and some only appear on
directories (including the filename \fI.\fR).
.PP
Information about a directory (its Finder window view settings, for
example) is usually held in its parent directory's store file, unless
the directory is at the root of its volume, in which case it's held
in the directory itself with the filename \fI.\fR.
.PP
I've encountered the following record types:
.ie n .IP "\*(AqBKGD\*(Aq" 4
.el .IP "\f(CW\*(AqBKGD\*(Aq\fR" 4
.IX Item "BKGD"
12\-byte \f(CW\*(C`blob\*(C'\fR, directories only. Indicates the background of the
Finder window viewing this directory (in icon mode). The format
depends on the kind of background:
.RS 4
.IP "Default background" 4
.IX Item "Default background"
FourCharCode \f(CW\*(C`DefB\*(C'\fR, followed by eight unknown bytes, probably garbage.
.IP "Solid color" 4
.IX Item "Solid color"
FourCharCode \f(CW\*(C`ClrB\*(C'\fR, followed by an \s-1RGB\s0 value in six bytes, followed by two unknown bytes.
.IP "Picture" 4
.IX Item "Picture"
FourCharCode \f(CW\*(C`PctB\*(C'\fR, followed by the the length of the blob
stored in the \f(CW\*(Aqpict\*(Aq\fR record, followed by four unknown bytes.
The \f(CW\*(Aqpict\*(Aq\fR record points to the actual background image.
.RE
.RS 4
.RE
.ie n .IP "\*(AqICVO\*(Aq" 4
.el .IP "\f(CW\*(AqICVO\*(Aq\fR" 4
.IX Item "ICVO"
\&\f(CW\*(C`bool\*(C'\fR, directories only. Unknown meaning. Always seems to be 1, so
presumably 0 is the default value.
.ie n .IP "\*(AqIloc\*(Aq" 4
.el .IP "\f(CW\*(AqIloc\*(Aq\fR" 4
.IX Item "Iloc"
16\-byte \f(CW\*(C`blob\*(C'\fR, attached to files and directories. 
The file's icon location. Two 4\-byte values representing the
horizontal and vertical positions of the icon's center (not
top-left). (Then, 6 bytes 0xff and 2 bytes 0?) For the purposes of the
center, the icon only is taken into account, not any label. The icon's
size comes from the icvo blob.
.ie n .IP "\*(AqLSVO\*(Aq" 4
.el .IP "\f(CW\*(AqLSVO\*(Aq\fR" 4
.IX Item "LSVO"
\&\f(CW\*(C`bool\*(C'\fR, attached to directories. Purpose unknown.
.ie n .IP "\*(Aqcmmt\*(Aq" 4
.el .IP "\f(CW\*(Aqcmmt\*(Aq\fR" 4
.IX Item "cmmt"
\&\f(CW\*(C`ustr\*(C'\fR, containing a file's \*(L"Spotlight Comments\*(R".
.ie n .IP "\*(Aqdilc\*(Aq" 4
.el .IP "\f(CW\*(Aqdilc\*(Aq\fR" 4
.IX Item "dilc"
32\-byte \f(CW\*(C`blob\*(C'\fR, attached to files and directories.
Unknown, may indicate the icon location
when files are displayed on the desktop.
.ie n .IP "\*(Aqdscl\*(Aq" 4
.el .IP "\f(CW\*(Aqdscl\*(Aq\fR" 4
.IX Item "dscl"
\&\f(CW\*(C`bool\*(C'\fR, attached to subdirectories. Indicates that the
subdirectory is open (disclosed) in list view.
.ie n .IP "\*(Aqfwi0\*(Aq" 4
.el .IP "\f(CW\*(Aqfwi0\*(Aq\fR" 4
.IX Item "fwi0"
16\-byte \f(CW\*(C`blob\*(C'\fR, directories only.
Finder window information.
The data is first four two-byte values representing the top, left,
bottom, and right edges of the rect defining the content area of the
window. The next four bytes represent the view of the window: \f(CW\*(C`icnv\*(C'\fR
is icon view, other values are \f(CW\*(C`clmv\*(C'\fR and \f(CW\*(C`Nlsv\*(C'\fR.
The next four bytes are unknown, and are either zeroes or
\&\f(CW\*(C`00 01 00 00\*(C'\fR.
.Sp
On Leopard (10.5), the view-type information seems to be ignored,
but see \f(CW\*(C`vstl\*(C'\fR.
.ie n .IP "\*(Aqfwsw\*(Aq" 4
.el .IP "\f(CW\*(Aqfwsw\*(Aq\fR" 4
.IX Item "fwsw"
\&\f(CW\*(C`long\*(C'\fR, directories only. Finder window sidebar width, in
pixels/points. Zero if collapsed.
.ie n .IP "\*(Aqfwvh\*(Aq" 4
.el .IP "\f(CW\*(Aqfwvh\*(Aq\fR" 4
.IX Item "fwvh"
\&\f(CW\*(C`shor\*(C'\fR, directories only.
Finder window vertical height. If present, it overrides the height
defined by the rect in fwi0. The Finder seems to create these (at
least on 10.4) even though it will do the right thing for window
height with only an fwi0 around, perhaps this is because the stored
height is weird when accounting for toolbars and status bars.
.ie n .IP "\*(Aqicgo\*(Aq" 4
.el .IP "\f(CW\*(Aqicgo\*(Aq\fR" 4
.IX Item "icgo"
8\-byte \f(CW\*(C`blob\*(C'\fR, directories (and files?).
Unknown. Probably two integers, and often the value \f(CW\*(C`00 00 00 00 00
00 00 04\*(C'\fR.
.ie n .IP "\*(Aqicsp\*(Aq" 4
.el .IP "\f(CW\*(Aqicsp\*(Aq\fR" 4
.IX Item "icsp"
8\-byte \f(CW\*(C`blob\*(C'\fR, directories only.
Unknown, usually all zeroes if present.
.ie n .IP "\*(Aqicvo\*(Aq" 4
.el .IP "\f(CW\*(Aqicvo\*(Aq\fR" 4
.IX Item "icvo"
18\- or 26\-byte \f(CW\*(C`blob\*(C'\fR, directories only.
Icon view options. There seem to be two formats for this blob.
.Sp
If the first 4 bytes are \*(L"icvo\*(R", then 8 unknown bytes (flags?), then 2 bytes
corresponding to the selected icon view size, then 4 unknown bytes
\&\f(CW\*(C`6e 6f 6e 65\*(C'\fR (the text \*(L"none\*(R", guess that this is the \*(L"keep
arranged by\*(R" setting?).
.Sp
If the first 4 bytes are \*(L"icv4\*(R", then:
two bytes indicating the icon size in pixels, typically 48;
a 4CC indicating the \*(L"keep arranged by\*(R" setting
(or \f(CW\*(C`none\*(C'\fR for none or \f(CW\*(C`grid\*(C'\fR for align to grid);
another 4CC, either \f(CW\*(C`botm\*(C'\fR or \f(CW\*(C`rght\*(C'\fR,  indicating the label position \fIw.r.t.\fR the icon;
and then 12 unknown bytes (flags?).
.Sp
Of the flag bytes, the low-order bit of the second byte is 1 if \*(L"Show
item info\*(R" is checked, and the low-order bit of the 12th (last) byte
is 1 if the \*(L"Show icon preview\*(R" checkbox is checked. The tenth byte
usually has the value 4, and the remainder are zero.
.ie n .IP "\*(Aqicvt\*(Aq" 4
.el .IP "\f(CW\*(Aqicvt\*(Aq\fR" 4
.IX Item "icvt"
\&\f(CW\*(C`shor\*(C'\fR, directories only.
Icon view text label (filename) size, in points.
.ie n .IP "\*(Aqinfo\*(Aq" 4
.el .IP "\f(CW\*(Aqinfo\*(Aq\fR" 4
.IX Item "info"
40\- or 48\-byte \f(CW\*(C`blob\*(C'\fR, attached to directories and files.
Unknown.
.ie n .IP "\*(Aqlssp\*(Aq" 4
.el .IP "\f(CW\*(Aqlssp\*(Aq\fR" 4
.IX Item "lssp"
8\-byte \f(CW\*(C`blob\*(C'\fR, directories only.
Unknown. Possibly the scroll position in list view mode?
.ie n .IP "\*(Aqlsvo\*(Aq" 4
.el .IP "\f(CW\*(Aqlsvo\*(Aq\fR" 4
.IX Item "lsvo"
76\-byte \f(CW\*(C`blob\*(C'\fR, directories only.
List view options. Seems to contain the columns displayed in list
view, their widths, and their sort ordering if any.
.ie n .IP "\*(Aqlsvt\*(Aq" 4
.el .IP "\f(CW\*(Aqlsvt\*(Aq\fR" 4
.IX Item "lsvt"
\&\f(CW\*(C`shor\*(C'\fR, directories only.
List view text (filename) size, in points.
.ie n .IP "\*(Aqpict\*(Aq" 4
.el .IP "\f(CW\*(Aqpict\*(Aq\fR" 4
.IX Item "pict"
Variable-length \f(CW\*(C`blob\*(C'\fR, directories only.
Despite the name, this contains not a \s-1PICT\s0 image but an Alias record
(see \fIInside Macintosh: Files\fR) which resolves to the file containing
the actual background image. See also \f(CW\*(AqBKGD\*(Aq\fR.
.ie n .IP "\*(Aqvstl\*(Aq" 4
.el .IP "\f(CW\*(Aqvstl\*(Aq\fR" 4
.IX Item "vstl"
\&\f(CW\*(C`type\*(C'\fR, directories only. Indicates the style of the view
(one of \f(CW\*(C`icnv\*(C'\fR, \f(CW\*(C`clmv\*(C'\fR, \f(CW\*(C`Nlsv\*(C'\fR, or \f(CW\*(C`Flwv\*(C'\fR)
selected by the Finder's \*(L"Always open in icon [or other style] view\*(R"
checkbox.
This appears to be a new addition to the Leopard (10.5) Finder.
.Sh "B\-Tree"
.IX Subsection "B-Tree"
The records are stored in a B\-tree structure. The B\-tree consists of a
small master block containing a few statistics and a pointer to the
root node; one or more leaf (external) nodes; and zero or more
non-leaf (internal) nodes.
.PP
The header block is pointed to by the \f(CW\*(C`DSDB\*(C'\fR entry in the buddy
allocator's directory. It is 20 bytes long and contains five integers:
.IP "0" 4
The block number of the root node of the B\-tree
.IP "1" 4
.IX Item "1"
The number of levels of internal nodes (tree height minus one \-\-\- that
is, for a tree containing only a single, leaf, node this will be zero)
.IP "2" 4
.IX Item "2"
The number of records in the tree
.IP "3" 4
.IX Item "3"
The number of nodes in the tree (tree nodes, not including this header
block)
.IP "4" 4
.IX Item "4"
Always 0x1000, probably the tree node page size
.PP
Individual nodes are either leaf nodes containing a bunch of records,
or non-leaf (internal) nodes containing N records and N+1 pointers to
child nodes.
.PP
Each node starts with two integers, \f(CW\*(C`P\*(C'\fR and \f(CW\*(C`count\*(C'\fR. If \f(CW\*(C`P\*(C'\fR is 0,
then this is a leaf node and \f(CW\*(C`count\*(C'\fR is immediately followed by that
many records. If \f(CW\*(C`P\*(C'\fR is nonzero, then this is an internal node, and
\&\f(CW\*(C`count\*(C'\fR is followed by the block number of the leftmost child, then a
record, then another block number, \fIetc.\fR, for a total of \f(CW\*(C`count\*(C'\fR
child pointers and \f(CW\*(C`count\*(C'\fR records. \f(CW\*(C`P\*(C'\fR is itself the rightmost
child pointer, that is, it is logically at the end of the node.
.PP
This relies on 0 not being a valid value for a block number. As far as
I can tell, 0 is a valid value for a block number but it always holds
the block containing the buddy allocator's internal information,
presumably because that block is allocated first.
.PP
The ordering of records within the B\-tree is by case-insensitive
comparison of their filenames, secondarily sorted on the structure
\&\s-1ID\s0 (record type) field. My guess is that the string comparison follows
the same rules as \s-1HFS+\s0 described in Apple's \s-1TN1150\s0.
.Sh "Buddy Allocator"
.IX Subsection "Buddy Allocator"
B\-tree pages and other info are stored in blocks managed by a buddy
allocator. The allocator maintains a list of the offsets and sizes of
blocks (indexed by small integers) and a freelist. 
The allocator also stores a small amount of metadata, including a
directory or table of contents which maps short strings to block
numbers. The only entry in that table of contents maps the string
\&\f(CW\*(C`DSDB\*(C'\fR (\*(L"desktop services database\*(R"?) to the B\-tree's master block.
.PP
The buddy allocator is in charge of all but the first 36 bytes of
the file, and manages a notional 2GB address space, although the file is
of course truncated to the last allocated block. All its offsets are
relative to the fourth byte of the file. Another way to describe this
is that the file consists of a four-byte header (always \f(CW\*(C`00 00 00
01\*(C'\fR) followed by a 2GB buddy-allocated area, the first 32\-byte block
of which is allocated but does not appear on the buddy allocator's
allocation list.
.PP
The 32\-byte header has the following fields:
.IP "\(bu" 4
Magic number \f(CW\*(C`Bud1\*(C'\fR (\f(CW\*(C`42 75 64 31\*(C'\fR)
.IP "\(bu" 4
Offset to the allocator's bookkeeping information block
.IP "\(bu" 4
Size of the allocator's bookkeeping information block
.IP "\(bu" 4
A second copy of the offset; the Finder will refuse to read the file
if this does not match the first copy. Perhaps this is a safeguard
against corruption from an interrupted write transaction.
.IP "\(bu" 4
Sixteen bytes of unknown purpose.
These might simply be the unused space at the end of the block,
since
the minimum allocation size is 32 bytes, as will be seen later.
.PP
The offset and size indicate where to find the block containing the
rest of the buddy allocator's state. That block has the following
fields:
.IP "Block count" 4
.IX Item "Block count"
Integer. The number of blocks in the allocated-blocks list.
.IP "Unknown" 4
.IX Item "Unknown"
Four unknown bytes. Appear to always be 0.
.IP "Block addresses" 4
.IX Item "Block addresses"
Array of integers. There are \fIblock count\fR block addresses here, with
unassigned block numbers represented by zeroes. This is followed by
enough zeroes to round the section up to the next multiple of 256
entries (1024 bytes).
.IP "Directory count" 4
.IX Item "Directory count"
Integer, indicates the number of directory entries.
.IP "Directory entries" 4
.IX Item "Directory entries"
Each consists of a 1\-byte count, followed by that many bytes of name
(in \s-1ASCII\s0 or perhaps some 1\-byte superset such as MacRoman), followed
by a 4\-byte integer containing the entry's block number.
.IP "Free lists" 4
.IX Item "Free lists"
There are 32 freelists, one for each power of two from 2^0 to
2^31. Each freelist has a count followed by that many offsets.
.PP
There are three different ways to refer to a given block. Most of the
file uses what I call block numbers or block IDs, which are indexes
into the \f(CW\*(C`block address\*(C'\fR table. Block \s-1ID\s0 0 always seems to refer to
the buddy allocator's metadata block itself.
.PP
The entries in the block address table are what I call block addresses.
Each address is a packed offset+size. The least-significant 5 bits of
the number indicate the block's size, as a power of 2 (from 2^5 to
2^31). If those bits are masked off, the result is the starting offset
of the block (keeping in mind the 4\-byte fudge factor). Since the
lower 5 bits are unusable to store an offset, blocks must be allocated
on 32\-byte boundaries, and as a side effect the minimum block size is
32 bytes
(in which case the least significant 5 bits are equal to \f(CW0x05\fR).
.PP
The free lists contain actual block offsets, not \*(L"addresses\*(R". The
size of the referenced blocks is implied by which freelist the block
is in; a free block in freelist N is 2^N bytes long.
.PP
Although the header block is not explicitly allocated, the allocator
behaves as if it is; other blocks are split in order to accommodate it
in the buddy scheme, and its buddy block (at 0x20) is either on the
freelist or allocated. (Usually it holds the B\-tree's master block.)
.PP
Other than the 4\-byte prefix and the 32\-byte header block, every byte
in the file is either in a block on the allocated blocks list, or is in a
block on one of the free lists.
.SH "CREDITS"
.IX Header "CREDITS"
Original reverse-engineering effort by Mark Mentovai,
<https://wiki.mozilla.org/DS_Store_File_Format>. Some of the text
describing record types has been copied from that wiki page.
.PP
Further investigation and documentation by Wim Lewis
<wiml@hhhh.org>.
.PP
Also thanks to Yvan BARTHE\*'\s-1LEMY\s0 for investigation and bugfixes.
