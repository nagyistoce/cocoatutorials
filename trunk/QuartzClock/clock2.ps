%!PS
%%File: clock2.ps
/xc     280 def  % center of clock
/yc     330 def
/radius 250 def  % size

/time    (01:51:43) def
/hour    time 0 2 getinterval cvi def 
/minute  time 3 2 getinterval cvi def
/second  time 6 2 getinterval cvi def

/hour hour minute 60 div add def

/blue   { 0 0  1 setrgbcolor } def
/green  { 0 1  0 setrgbcolor } def
/red    { 1 0  0 setrgbcolor } def
/blue   { 0 0  1 setrgbcolor } def
/white  { 1 1  1 setrgbcolor } def
/linen  { 1 1 .9 setrgbcolor } def
/black  { 0 0  0 setrgbcolor } def
/yellow { 1 1  0 setrgbcolor } def

/mangle { 6 mul        } def % number mangle number % convert minutes to degrees
/hangle { 5 mul mangle } def % number hangle number % convert hours to degrees

/hand { % xc yc width angle length hand - % draw a hand on the clock face
  /save save def
    /length exch def
    /angle  exch def
    /width  exch def
    /yc     exch def
    /xc     exch def
    
    width setlinewidth 1 setlinecap
    xc yc moveto
    length width sub angle sin mul
    length width sub angle cos mul
    rlineto stroke
    
    0 setlinecap
    xc yc moveto
    length -5 div angle sin mul
    length -5 div angle cos mul
    rlineto stroke
  save restore  
} def

/tick { % angle tick - 
  gsave 
    xc yc translate rotate
    8 setlinewidth
    0 setlinecap
    0 radius 60 sub moveto
    0 radius 10 sub lineto stroke
  grestore
} def

/Cshow {
  dup stringwidth pop -2 div 0 rmoveto
  show
} def

/Cstroke {
  dup stringwidth pop -2 div 0 rmoveto
  false charpath stroke
} def

% 
% functions 
% http://www.redgrittybrick.org/postscript/gradient.html
%
% I found this code on the web
% -----------------------------------------------------------
% This is not the correct way to render a gradient
% It's very crude and uses a brute force approach
% The correct way is to create an image and use it to fill the area
% - however it's been a while since I used PostScript and
%   I don't really remember how to implement the image method
%   The image method:
%       - uses very little memory
%       - device and resolution
%       - guaranteed band free
% -----------------------------------------------------------
/inch { 72 mul } def 
/dpi  { 72 div } def 
/Rez 150 dpi def % calc lines per point for fill 
/Step 1 Rez div def 
/StartRGB {
	/B1 exch def /G1 exch def /R1 exch def
} def

/EndRGB {
	/B2 exch def /G2 exch def /R2 exch def 
	/Steps s Step div def 
	/Rstep R2 R1 sub Steps div def 
	/Gstep G2 G1 sub Steps div def 
	/Bstep B2 B1 sub Steps div def 
} def

/StepRGB {
	/R1 R1 Rstep add def 
	/G1 G1 Gstep add def 
	/B1 B1 Bstep add def 
	R1 G1 B1 setrgbcolor 
} def 

%
% fill
%
/myfill {
	gsave % save path for re-use
	clip  % set path as a clipping path for our infill
	0 0 translate % origin to bottom right
	% 45 rotate % so fill is diagonal
	Step setlinewidth
	/s 10 inch def
	/s yc 2 mul def
	1.0 0.0 0.0  StartRGB
	1.0 1.0 0.0  EndRGB 
	1 Step s {
		StepRGB
		newpath
		-20 inch exch moveto % position left hand side
		40 inch 0 rlineto % draw a line
		stroke
	} for
	grestore % restore path
} def

20 20 translate

% draw the page
gsave linen 0 0 xc 2 mul yc 2 mul rectfill   grestore
gsave black 0 0 xc 2 mul yc 2 mul rectstroke grestore

% fill clock background, mark the ticks and stroke the perimeter
gsave blue                  xc yc radius 0 360 arc myfill   grestore
0 30 360 { white tick } for
gsave black 30 setlinewidth xc yc radius 0 360 arc stroke grestore

% draw the hands of the clock
red    xc yc 18 hour   hangle radius hand
green  xc yc 10 minute mangle radius hand
blue   xc yc  4 second mangle radius hand


% (*) { =string cvs print (\n) print } 200 string /Font resourceforall

yellow /Helvetica-BoldOblique 70 selectfont xc yc 150 sub moveto time Cshow
2 setlinewidth
black  /Helvetica-BoldOblique 70 selectfont xc yc 150 sub moveto time Cstroke

showpage
%%EOF
